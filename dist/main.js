(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(537),a=n.n(r),i=n(645),o=n.n(i)()(a());o.push([e.id,"body {\n    background-color: lightgray;\n}\n\n.animate {\n    /* animation: 0.7s slide-in 0.7s 3 linear; */\n    animation-name: slide-in;\n    animation-duration: 0.3s;\n    animation-iteration-count: 3;\n}\n  \n@keyframes slide-in {\n    0% {\n        transform: scale(0.25);\n        transform: translateY(-1000px);\n    }\n    80%{\n        transform: scale(0.25);\n    }\n    100% {\n        transform: translateY(0);\n        transform: scale(1);\n    }\n}\n\nth, td{\n    margin: 0;\n    padding: 0;\n    height: 32px;\n    width: 32px;\n}\n\ntd {\n    border: 1px solid black;\n}\n\ndiv.hit, div.ship {\n    margin: 0;\n    padding: 0;\n    \n    height: 100%;\n    width: 100%;\n}\n\ndiv.ship {\n    background-color: blue;\n}\n\ndiv.hit {\n    background-color: red;\n}\n\ndiv.hit.ship {\n    border: 5px solid blue;\n    box-sizing: border-box;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,2BAA2B;AAC/B;;AAEA;IACI,4CAA4C;IAC5C,wBAAwB;IACxB,wBAAwB;IACxB,4BAA4B;AAChC;;AAEA;IACI;QACI,sBAAsB;QACtB,8BAA8B;IAClC;IACA;QACI,sBAAsB;IAC1B;IACA;QACI,wBAAwB;QACxB,mBAAmB;IACvB;AACJ;;AAEA;IACI,SAAS;IACT,UAAU;IACV,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,SAAS;IACT,UAAU;;IAEV,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,sBAAsB;IACtB,sBAAsB;AAC1B",sourcesContent:["body {\n    background-color: lightgray;\n}\n\n.animate {\n    /* animation: 0.7s slide-in 0.7s 3 linear; */\n    animation-name: slide-in;\n    animation-duration: 0.3s;\n    animation-iteration-count: 3;\n}\n  \n@keyframes slide-in {\n    0% {\n        transform: scale(0.25);\n        transform: translateY(-1000px);\n    }\n    80%{\n        transform: scale(0.25);\n    }\n    100% {\n        transform: translateY(0);\n        transform: scale(1);\n    }\n}\n\nth, td{\n    margin: 0;\n    padding: 0;\n    height: 32px;\n    width: 32px;\n}\n\ntd {\n    border: 1px solid black;\n}\n\ndiv.hit, div.ship {\n    margin: 0;\n    padding: 0;\n    \n    height: 100%;\n    width: 100%;\n}\n\ndiv.ship {\n    background-color: blue;\n}\n\ndiv.hit {\n    background-color: red;\n}\n\ndiv.hit.ship {\n    border: 5px solid blue;\n    box-sizing: border-box;\n}"],sourceRoot:""}]);const s=o},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,i){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(o[l]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);r&&o[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),a&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=a):d[4]="".concat(a)),t.push(d))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(a," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var i={},o=[],s=0;s<e.length;s++){var l=e[s],c=r.base?l[0]+r.base:l[0],d=i[c]||0,p="".concat(c," ").concat(d);i[c]=d+1;var u=n(p),h={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==u)t[u].references++,t[u].updater(h);else{var A=a(h,r);r.byIndex=s,t.splice(s,0,{identifier:p,updater:A,references:1})}o.push(p)}return o}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var i=r(e=e||[],a=a||{});return function(e){e=e||[];for(var o=0;o<i.length;o++){var s=n(i[o]);t[s].references--}for(var l=r(e,a),c=0;c<i.length;c++){var d=n(i[c]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}i=l}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var i=t[r]={id:r,exports:{}};return e[r](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{const e=document.querySelector("#content"),t=document.createElement("main"),r=document.createElement("footer");e.appendChild(t),e.appendChild(r);const a=(e,t)=>{let n=document.createElement("td");return n.classList.add("playerGrid"),n.dataset.row=e,n.dataset.col=t,n},i=e=>{let t=document.createElement("th");return t.textContent=e,t},o=e=>{let t=document.createElement("tr");t.dataset.row=e,t.appendChild(i(e));for(let n=0;n<10;n++)t.appendChild(a(e,n));return t},s=()=>{const e=document.createElement("table");e.appendChild((()=>{let e=document.createElement("tr");return e.appendChild(i("")),e.appendChild(i("A")),e.appendChild(i("B")),e.appendChild(i("C")),e.appendChild(i("D")),e.appendChild(i("E")),e.appendChild(i("F")),e.appendChild(i("G")),e.appendChild(i("H")),e.appendChild(i("I")),e.appendChild(i("J")),e})());for(let t=0;t<10;t++)e.appendChild(o(t));return e},l=()=>{let e,t,n;return{setUpView:(r,a)=>{const i=document.querySelector("#content");(e=>{let t=document.createElement("header"),n=document.createElement("h1");n.textContent="Battleship",t.appendChild(n),e.appendChild(t)})(i),e=s(),i.appendChild(e),((e,t)=>{for(let n=0;n<10;n++)for(let r=0;r<10;r++)if(e[n][r]){let e=t.children[n+1].children[r+1],a=document.createElement("div");a.classList.add("ship"),e.appendChild(a)}})(r.getShipGrid(),e),i.appendChild((e=>{let t=s();for(let n=0;n<10;n++)for(let r=0;r<10;r++)t.children[n+1].children[r+1].onclick=t=>{e(n,r,t)};return t})(a)),(e=>{const r=document.createElement("p");r.classList.add("msgDisplay"),r.classList.add("container"),t=document.createElement("p"),t.classList.add("msgOne"),t.textContent="Begin the game by clicking on the right board to select coordinates to fire at",n=document.createElement("p"),n.classList.add("msgTwo"),n.textContent="Have fun!",e.appendChild(r),r.appendChild(t),r.appendChild(n)})(i)},markComputerAttack:(t,n)=>{let r=((t,n)=>e.children[t+1].children[n+1])(t,n);if(r.firstChild)r.firstChild.classList.add("hit"),r.firstChild.classList.add("animate");else{let e=document.createElement("div");e.classList.add("hit"),e.classList.add("animate"),r.appendChild(e)}},updateMsgOne:(e,n,r)=>{let a;"miss"===r?a=`You fire at (${e}, ${n}) but hit nothing.`:"hit"===r?a=`You fire at (${e}, ${n}) and score a hit.`:"sunk"===r?a=`You fire at (${e}, ${n}), score a hit, and sink a ship.`:"loss"===r&&(a="Your opponent has sunk all your ships. You lose the match."),t.textContent=a},updateMsgTwo:(e,t,r)=>{let a;"miss"===r?a=`Your opponent fires at (${e}, ${t} but hits nothing.)`:"hit"===r?a=`Your opponent fires at (${e}, ${t}) and scores a hit.`:"sunk"===r?a=`Your opponent fires at (${e}, ${t}), scores a hit, and sinks a ship.`:"win"===r&&(a="You have sunk all your opponent's ships and won!"),n.textContent=a}}},c=(e,t="noID",n="south")=>{const r=t,a=e,i=n;let o=0,s=!1;return{getHitsSustained:()=>o,hit:()=>{o++,o===a&&(s=!0)},isSunk:()=>s,getLength:()=>a,getDirection:()=>i,getID:()=>r}},d=()=>{const e=Array(10).fill().map((()=>Array(10).fill(null))),t=[];let n="";const r=(e,t)=>e>=0&&e<10&&t>=0&&t<10,a=(n,a,i)=>{if(!((t,n,a)=>{let i="south"===t.getDirection()?1:0,o="east"===t.getDirection()?1:0;for(let s=0;s<t.getLength();s++){if(!r(n,a))return!1;if(null!=e[n][a])return!1;n+=i,a+=o}return!0})(n,a,i))throw new Error(`Failed to place ship ${n.getID()} at row: ${a}, col: ${i}`);t.push(n);let o="south"===n.getDirection()?1:0,s="east"===n.getDirection()?1:0;for(let t=0;t<n.getLength();t++)e[a][i]=n,a+=o,i+=s};return{placeShip:a,receiveAttack:(t,r)=>{n="",e[t][r]?(e[t][r].hit(),n="hit",e[t][r].isSunk()&&(n="sunk")):n="miss"},getOutcome:()=>n,isDefeated:()=>{for(let e of t)if(!e.isSunk())return!1;return!0},initDefaultShips:()=>{let e=c(4,"a","east");a(e,0,4),t.push(e);let n=c(2,"b","south");a(n,0,9),t.push(n);let r=c(2,"c","east");a(r,2,0),t.push(r);let i=c(3,"d","south");a(i,3,4),t.push(i);let o=c(1,"e","south");a(o,3,6),t.push(o);let s=c(3,"f","south");a(s,4,9),t.push(s);let l=c(2,"g","east");a(l,5,0),t.push(l);let d=c(1,"h");a(d,8,0),t.push(d);let p=c(1,"i");a(p,9,5),t.push(p);let u=c(1,"j");a(u,9,9),t.push(u)},getShipGrid:()=>e,isShipPresentAt:(t,n)=>null!=e[t][n]}},p=()=>{const e=Array(10).fill().map((()=>Array(10).fill(null)));return{isValidAttack:(t,n)=>((e,t)=>e>=0&&e<10&&t>=0&&t<10)(t,n)&&null===e[t][n],recordAttack:(t,n)=>{e[t][n]="hit"}}};var u=n(379),h=n.n(u),A=n(795),m=n.n(A),f=n(569),g=n.n(f),C=n(565),v=n.n(C),y=n(216),b=n.n(y),I=n(589),k=n.n(I),w=n(426),B={};B.styleTagTransform=k(),B.setAttributes=v(),B.insert=g().bind(null,"head"),B.domAPI=m(),B.insertStyleElement=b(),h()(w.Z,B),w.Z&&w.Z.locals&&w.Z.locals,(()=>{let e=(()=>{const e=d(),t=d(),n=p(),r=p();let a="",i="";e.initDefaultShips(),t.initDefaultShips();const o=(e=>{let t=()=>Math.floor(10*Math.random());return{pickTargetSimple:()=>{let n=t(),r=t();for(;!e.isValidAttack(n,r);)console.log(`(${n}, ${r}) is invalid. Rerolling`),n=t(),r=t();return console.log(`AI final target (${n}, ${r})`),{row:n,col:r}}}})(r);return{getShipGrid:()=>e.getShipGrid(),processUserInput:(e,r)=>{n.isValidAttack(e,r)&&(t.receiveAttack(e,r),a=t.getOutcome(),n.recordAttack(e,r))},isAttackableByPlayer:(e,t)=>n.isValidAttack(e,t),winCheckPlayer:()=>t.isDefeated(),winCheckComputer:()=>e.isDefeated(),isShipPresentAt:(n,r,a)=>("computer"===a?t:e).isShipPresentAt(n,r),processComputerAttack:()=>{let t=o.pickTargetSimple();if(r.isValidAttack(t.row,t.col))return e.receiveAttack(t.row,t.col),i=e.getOutcome(),r.recordAttack(t.row,t.col),t;console.log("game master: processComputerAttackError")},getPlayerTurnResult:()=>a,getComputerTurnResult:()=>i}})(),t=l();const n=(n,r,a)=>{if(!e.isAttackableByPlayer(n,r))return;if(((e,t)=>{console.log(e.target);let n=document.createElement("div");n.classList.add("hit"),n.classList.add("animate"),t&&n.classList.add("ship"),e.target.appendChild(n)})(a,e.isShipPresentAt(a.target.dataset.row,a.target.dataset.col,"computer")),e.processUserInput(n,r),t.updateMsgOne(n,r,e.getPlayerTurnResult()),e.winCheckPlayer())return console.log("player wins"),void t.updateMsgTwo(0,0,"win");let i=e.processComputerAttack();t.markComputerAttack(i.row,i.col),console.log(`Your opponent fires at (${i.row}, ${i.col}) and ${e.getComputerTurnResult()}`),t.updateMsgTwo(i.row,i.col,e.getComputerTurnResult()),e.winCheckComputer()&&(console.log("computer wins"),t.updateMsgTwo(0,0,"loss"))};return{initiate:()=>{t.setUpView(e,n)},processUserInput:n,getShipGrid:()=>e.getShipGrid()}})().initiate()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,