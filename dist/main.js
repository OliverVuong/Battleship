(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(537),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([e.id,"body {\n    background-color: lightgray;\n}\n\n.animate {\n    animation: slide-in 0.7s both;\n}\n  \n@keyframes slide-in {\n    0% {\n        transform: translateY(-1000px);\n    }\n    100% {\n        transform: translateY(0);\n    }\n}\n\ntd, tr {\n    margin: 0;\n    padding: 0;\n    border: solid black 1px;\n    max-height: 32px;\n    min-height: 32px;\n}\n\ntd {\n    max-width: 32px;\n    min-width: 32px;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,2BAA2B;AAC/B;;AAEA;IACI,6BAA6B;AACjC;;AAEA;IACI;QACI,8BAA8B;IAClC;IACA;QACI,wBAAwB;IAC5B;AACJ;;AAEA;IACI,SAAS;IACT,UAAU;IACV,uBAAuB;IACvB,gBAAgB;IAChB,gBAAgB;AACpB;;AAEA;IACI,eAAe;IACf,eAAe;AACnB",sourcesContent:["body {\n    background-color: lightgray;\n}\n\n.animate {\n    animation: slide-in 0.7s both;\n}\n  \n@keyframes slide-in {\n    0% {\n        transform: translateY(-1000px);\n    }\n    100% {\n        transform: translateY(0);\n    }\n}\n\ntd, tr {\n    margin: 0;\n    padding: 0;\n    border: solid black 1px;\n    max-height: 32px;\n    min-height: 32px;\n}\n\ntd {\n    max-width: 32px;\n    min-width: 32px;\n}"],sourceRoot:""}]);const s=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var l=0;l<e.length;l++){var p=[].concat(e[l]);r&&i[p[0]]||(void 0!==a&&(void 0===p[5]||(p[1]="@layer".concat(p[5].length>0?" ".concat(p[5]):""," {").concat(p[1],"}")),p[5]=a),n&&(p[2]?(p[1]="@media ".concat(p[2]," {").concat(p[1],"}"),p[2]=n):p[2]=n),o&&(p[4]?(p[1]="@supports (".concat(p[4],") {").concat(p[1],"}"),p[4]=o):p[4]="".concat(o)),t.push(p))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},i=[],s=0;s<e.length;s++){var c=e[s],l=r.base?c[0]+r.base:c[0],p=a[l]||0,u="".concat(l," ").concat(p);a[l]=p+1;var d=n(u),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==d)t[d].references++,t[d].updater(h);else{var m=o(h,r);r.byIndex=s,t.splice(s,0,{identifier:u,updater:m,references:1})}i.push(u)}return i}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var i=0;i<a.length;i++){var s=n(a[i]);t[s].references--}for(var c=r(e,o),l=0;l<a.length;l++){var p=n(a[l]);0===t[p].references&&(t[p].updater(),t.splice(p,1))}a=c}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,exports:{}};return e[r](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{const e=document.querySelector("#content"),t=document.createElement("head"),r=document.createElement("main"),o=document.createElement("footer");e.appendChild(t),e.appendChild(r),e.appendChild(o);const a=(e,t)=>{let n=document.createElement("td");return n.classList.add("playerGrid"),n.dataset.row=e,n.dataset.col=t,n},i=e=>{let t=document.createElement("th");return t.textContent=e,t},s=e=>{let t=document.createElement("tr");t.dataset.row=e,t.appendChild(i(e));for(let n=0;n<10;n++)t.appendChild(a(e,n));return t},c=()=>{const e=document.createElement("table");e.appendChild((()=>{let e=document.createElement("tr");return e.appendChild(i("&nbsp;")),e.appendChild(i("A")),e.appendChild(i("B")),e.appendChild(i("C")),e.appendChild(i("D")),e.appendChild(i("E")),e.appendChild(i("F")),e.appendChild(i("G")),e.appendChild(i("H")),e.appendChild(i("I")),e.appendChild(i("J")),e})());for(let t=0;t<10;t++)e.appendChild(s(t));return e},l=()=>{let e,t,n;return{setUpView:(r,o)=>{const a=document.querySelector("#content");e=c(),a.appendChild(e),((e,t)=>{for(let n=0;n<10;n++)for(let r=0;r<10;r++)if(e[n][r]){let e=t.children[n+1].children[r+1],o=document.createElement("div");o.classList.add("ship"),o.textContent="s",e.appendChild(o)}})(r.getShipGrid(),e),a.appendChild((e=>{let t=c();for(let n=0;n<10;n++)for(let r=0;r<10;r++)t.children[n+1].children[r+1].onclick=t=>{e(n,r,t)};return t})(o)),(e=>{const r=document.createElement("p");r.classList.add("msgDisplay"),r.classList.add("container"),t=document.createElement("p"),t.classList.add("msgOne"),t.textContent="Begin the game by clicking on the right board to select coordinates to fire at",n=document.createElement("p"),n.classList.add("msgTwo"),n.textContent="Have fun!",e.appendChild(r),r.appendChild(t),r.appendChild(n)})(a)},markComputerAttack:(t,n)=>{let r=((t,n)=>e.children[t+1].children[n+1])(t,n);r.textContent="pch"},updateMsgOne:(e,n,r)=>{let o;"miss"===r?o=`You fire at (${e}, ${n}) but hit nothing.`:"hit"===r?o=`You fire at (${e}, ${n}) and score a hit.`:"sunk"===r?o=`You fire at (${e}, ${n}), score a hit, and sink a ship.`:"loss"===r&&(o="Your opponent has sunk all your ships. You lose the match."),t.textContent=o},updateMsgTwo:(e,t,r)=>{let o;"miss"===r?o=`Your opponent fires at (${e}, ${t} but hits nothing.)`:"hit"===r?o=`Your opponent fires at (${e}, ${t}) and scores a hit.`:"sunk"===r?o=`Your opponent fires at (${e}, ${t}), scores a hit, and sinks a ship.`:"win"===r&&(o="You have sunk all your opponent's ships and won!"),n.textContent=o}}},p=(e,t="noID",n="south")=>{const r=t,o=e,a=n;let i=0,s=!1;return{getHitsSustained:()=>i,hit:()=>{i++,i===o&&(s=!0)},isSunk:()=>s,getLength:()=>o,getDirection:()=>a,getID:()=>r}},u=()=>{const e=Array(10).fill().map((()=>Array(10).fill(null))),t=[];let n="";const r=(e,t)=>e>=0&&e<10&&t>=0&&t<10,o=(n,o,a)=>{if(!((t,n,o)=>{let a="south"===t.getDirection()?1:0,i="east"===t.getDirection()?1:0;for(let s=0;s<t.getLength();s++){if(!r(n,o))return!1;if(null!=e[n][o])return!1;n+=a,o+=i}return!0})(n,o,a))throw new Error(`Failed to place ship ${n.getID()} at row: ${o}, col: ${a}`);t.push(n);let i="south"===n.getDirection()?1:0,s="east"===n.getDirection()?1:0;for(let t=0;t<n.getLength();t++)e[o][a]=n,o+=i,a+=s};return{placeShip:o,receiveAttack:(t,r)=>{n="",e[t][r]?(e[t][r].hit(),n="hit",e[t][r].isSunk()&&(n="sunk")):n="miss"},getOutcome:()=>n,isDefeated:()=>{for(let e of t)if(!e.isSunk())return!1;return!0},initDefaultShips:()=>{let e=p(4,"a","east");o(e,0,4),t.push(e);let n=p(2,"b","south");o(n,0,9),t.push(n);let r=p(2,"c","east");o(r,2,0),t.push(r);let a=p(3,"d","south");o(a,3,4),t.push(a);let i=p(1,"e","south");o(i,3,6),t.push(i);let s=p(3,"f","south");o(s,4,9),t.push(s);let c=p(2,"g","east");o(c,5,0),t.push(c);let l=p(1,"h");o(l,8,0),t.push(l);let u=p(1,"i");o(u,9,5),t.push(u);let d=p(1,"j");o(d,9,9),t.push(d)},getShipGrid:()=>e,isShipPresentAt:(t,n)=>null!=e[t][n]}},d=()=>{const e=Array(10).fill().map((()=>Array(10).fill(null)));return{isValidAttack:(t,n)=>((e,t)=>e>=0&&e<10&&t>=0&&t<10)(t,n)&&null===e[t][n],recordAttack:(t,n)=>{e[t][n]="hit"}}};var h=n(379),m=n.n(h),f=n(795),A=n.n(f),g=n(569),C=n.n(g),v=n(565),y=n.n(v),k=n(216),w=n.n(k),b=n(589),x=n.n(b),I=n(426),S={};S.styleTagTransform=x(),S.setAttributes=y(),S.insert=C().bind(null,"head"),S.domAPI=A(),S.insertStyleElement=w(),m()(I.Z,S),I.Z&&I.Z.locals&&I.Z.locals,(()=>{let e=(()=>{const e=u(),t=u(),n=d(),r=d();let o="",a="";e.initDefaultShips(),t.initDefaultShips();const i=(e=>{let t=()=>Math.floor(10*Math.random());return{pickTargetSimple:()=>{let n=t(),r=t();for(;!e.isValidAttack(n,r);)n=t(),r=t();return{row:n,col:r}}}})(r);return{getShipGrid:()=>e.getShipGrid(),processUserInput:(e,r)=>{n.isValidAttack(e,r)&&(t.receiveAttack(e,r),o=t.getOutcome(),n.recordAttack(e,r))},isAttackableByPlayer:(e,t)=>n.isValidAttack(e,t),winCheckPlayer:()=>t.isDefeated(),winCheckComputer:()=>e.isDefeated(),isShipPresentAt:(n,r,o)=>("computer"===o?t:e).isShipPresentAt(n,r),processComputerAttack:()=>{let t=i.pickTargetSimple();if(r.isValidAttack(t.row,t.col))return e.receiveAttack(t.row,t.col),a=e.getOutcome(),r.recordAttack(t.row,t.col),t;console.log("game master: processComputerAttackError")},getPlayerTurnResult:()=>o,getComputerTurnResult:()=>a}})(),t=l();const n=(n,r,o)=>{if(!e.isAttackableByPlayer(n,r))return;if((e=>{console.log(e.target);let t=document.createElement("div");t.classList.add("hit"),t.classList.add("animate"),t.textContent="hit",e.target.appendChild(t)})(o),e.processUserInput(n,r),t.updateMsgOne(n,r,e.getPlayerTurnResult()),e.winCheckPlayer())return console.log("player wins"),void t.updateMsgTwo(0,0,"win");let a=e.processComputerAttack();t.markComputerAttack(a.row,a.col),console.log(`Your opponent fires at (${a.row}, ${a.col}) and ${e.getComputerTurnResult()}`),t.updateMsgTwo(a.row,a.col,e.getComputerTurnResult()),e.winCheckComputer()&&(console.log("computer wins"),t.updateMsgTwo(0,0,"loss"))};return{initiate:()=>{t.setUpView(e,n)},processUserInput:n,getShipGrid:()=>e.getShipGrid()}})().initiate()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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cUJBQ0pFLFFBQVFDLElBQUksaUJBQ1pJLEVBQWlCbkUsYUFBYSxFQUFHLEVBQUcsUUFDeEMsRUFPSixNQUFPLENBQUVxRSxTQUpRLEtBQ2JGLEVBQWlCdkYsVUFBVUMsRUFBTUMsRUFBaUIsRUFHbkNBLG1CQUFrQk8sWUFwRGpCLElBQ1RSLEVBQUtRLGNBbURrQyxFRzdEbENpRixHQUNSRCxVIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL3ZpZXdDb250cm9sbGVyLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc2hpcEZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zaGlwR3JpZEZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9hdHRhY2tHcmlkRmFjdG9yeS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL3N0eWxlLmNzcz83MTYzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvd2Vic2l0ZU1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9nYW1lTWFzdGVyLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvY29tcHV0ZXJUYXJnZXRpbmcuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL3NvdXJjZU1hcHMuanNcIjtcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBgYm9keSB7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogbGlnaHRncmF5O1xufVxuXG4uYW5pbWF0ZSB7XG4gICAgYW5pbWF0aW9uOiBzbGlkZS1pbiAwLjdzIGJvdGg7XG59XG4gIFxuQGtleWZyYW1lcyBzbGlkZS1pbiB7XG4gICAgMCUge1xuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTEwMDBweCk7XG4gICAgfVxuICAgIDEwMCUge1xuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMCk7XG4gICAgfVxufVxuXG50ZCwgdHIge1xuICAgIG1hcmdpbjogMDtcbiAgICBwYWRkaW5nOiAwO1xuICAgIGJvcmRlcjogc29saWQgYmxhY2sgMXB4O1xuICAgIG1heC1oZWlnaHQ6IDMycHg7XG4gICAgbWluLWhlaWdodDogMzJweDtcbn1cblxudGQge1xuICAgIG1heC13aWR0aDogMzJweDtcbiAgICBtaW4td2lkdGg6IDMycHg7XG59YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksMkJBQTJCO0FBQy9COztBQUVBO0lBQ0ksNkJBQTZCO0FBQ2pDOztBQUVBO0lBQ0k7UUFDSSw4QkFBOEI7SUFDbEM7SUFDQTtRQUNJLHdCQUF3QjtJQUM1QjtBQUNKOztBQUVBO0lBQ0ksU0FBUztJQUNULFVBQVU7SUFDVix1QkFBdUI7SUFDdkIsZ0JBQWdCO0lBQ2hCLGdCQUFnQjtBQUNwQjs7QUFFQTtJQUNJLGVBQWU7SUFDZixlQUFlO0FBQ25CXCIsXCJzb3VyY2VzQ29udGVudFwiOltcImJvZHkge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBsaWdodGdyYXk7XFxufVxcblxcbi5hbmltYXRlIHtcXG4gICAgYW5pbWF0aW9uOiBzbGlkZS1pbiAwLjdzIGJvdGg7XFxufVxcbiAgXFxuQGtleWZyYW1lcyBzbGlkZS1pbiB7XFxuICAgIDAlIHtcXG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtMTAwMHB4KTtcXG4gICAgfVxcbiAgICAxMDAlIHtcXG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwKTtcXG4gICAgfVxcbn1cXG5cXG50ZCwgdHIge1xcbiAgICBtYXJnaW46IDA7XFxuICAgIHBhZGRpbmc6IDA7XFxuICAgIGJvcmRlcjogc29saWQgYmxhY2sgMXB4O1xcbiAgICBtYXgtaGVpZ2h0OiAzMnB4O1xcbiAgICBtaW4taGVpZ2h0OiAzMnB4O1xcbn1cXG5cXG50ZCB7XFxuICAgIG1heC13aWR0aDogMzJweDtcXG4gICAgbWluLXdpZHRoOiAzMnB4O1xcbn1cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107XG5cbiAgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IFwiXCI7XG4gICAgICB2YXIgbmVlZExheWVyID0gdHlwZW9mIGl0ZW1bNV0gIT09IFwidW5kZWZpbmVkXCI7XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuICAgICAgaWYgKG5lZWRMYXllcikge1xuICAgICAgICBjb250ZW50ICs9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBjb250ZW50ICs9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07XG5cbiAgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgbGlzdC5pID0gZnVuY3Rpb24gaShtb2R1bGVzLCBtZWRpYSwgZGVkdXBlLCBzdXBwb3J0cywgbGF5ZXIpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIHVuZGVmaW5lZF1dO1xuICAgIH1cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfayA9IDA7IF9rIDwgbW9kdWxlcy5sZW5ndGg7IF9rKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2tdKTtcbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgbGF5ZXIgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdGVtWzVdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBsYXllclwiLmNvbmNhdChpdGVtWzVdLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQoaXRlbVs1XSkgOiBcIlwiLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVs1XSA9IGxheWVyO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWVkaWEpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMV0gPSBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5ET00gPSBbXTtcbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcbiAgICBpZiAoaW5kZXhCeUlkZW50aWZpZXIgIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHVwZGF0ZXIgPSBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMuYnlJbmRleCA9IGk7XG4gICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoaSwgMCwge1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiB1cGRhdGVyLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5mdW5jdGlvbiBhZGRFbGVtZW50U3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBhcGkgPSBvcHRpb25zLmRvbUFQSShvcHRpb25zKTtcbiAgYXBpLnVwZGF0ZShvYmopO1xuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB1cGRhdGVyO1xufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG4gICAgICBpZiAoc3R5bGVzSW5ET01bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRE9NW19pbmRleF0udXBkYXRlcigpO1xuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpO1xuXG4gICAgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZUVsZW1lbnQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIkBtZWRpYSBcIi5jb25jYXQob2JqLm1lZGlhLCBcIiB7XCIpO1xuICB9XG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG4gIGNzcyArPSBvYmouY3NzO1xuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9XG5cbiAgLy8gRm9yIG9sZCBJRVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3R5bGVFbGVtZW50LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50KTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKCkge30sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfVxuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cbiAgICBzdHlsZUVsZW1lbnQuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIl9fd2VicGFja19yZXF1aXJlX18ubmMgPSB1bmRlZmluZWQ7IiwiY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNjb250ZW50XCIpO1xuXG5jb25zdCBoZWFkZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaGVhZFwiKTtcbmNvbnN0IG1haW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibWFpblwiKTtcbmNvbnN0IGZvb3RlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmb290ZXJcIik7XG5cbmNvbnRhaW5lci5hcHBlbmRDaGlsZChoZWFkZXIpO1xuY29udGFpbmVyLmFwcGVuZENoaWxkKG1haW4pO1xuY29udGFpbmVyLmFwcGVuZENoaWxkKGZvb3Rlcik7XG5cbmNvbnN0IGNyZWF0ZUNlbGwgPSAobXlSb3csIG15Q29sKSA9PiB7XG4gIGxldCBvdXRwdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGRcIik7XG4gIG91dHB1dC5jbGFzc0xpc3QuYWRkKFwicGxheWVyR3JpZFwiKTtcbiAgb3V0cHV0LmRhdGFzZXQucm93ID0gbXlSb3c7XG4gIG91dHB1dC5kYXRhc2V0LmNvbCA9IG15Q29sO1xuICByZXR1cm4gb3V0cHV0XG59XG5cblxuY29uc3QgY3JlYXRlVGFibGVIZWFkZXIgPSAoY29udGVudCkgPT4ge1xuICBsZXQgb3V0cHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRoXCIpO1xuICBvdXRwdXQudGV4dENvbnRlbnQgPSBjb250ZW50O1xuICByZXR1cm4gb3V0cHV0O1xufVxuXG5jb25zdCBjcmVhdGVUb3BSb3cgPSAoKSA9PiB7XG4gIGxldCByb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidHJcIik7XG4gIHJvdy5hcHBlbmRDaGlsZChjcmVhdGVUYWJsZUhlYWRlcihcIiZuYnNwO1wiKSk7XG4gIHJvdy5hcHBlbmRDaGlsZChjcmVhdGVUYWJsZUhlYWRlcihcIkFcIikpO1xuICByb3cuYXBwZW5kQ2hpbGQoY3JlYXRlVGFibGVIZWFkZXIoXCJCXCIpKTtcbiAgcm93LmFwcGVuZENoaWxkKGNyZWF0ZVRhYmxlSGVhZGVyKFwiQ1wiKSk7XG4gIHJvdy5hcHBlbmRDaGlsZChjcmVhdGVUYWJsZUhlYWRlcihcIkRcIikpO1xuICByb3cuYXBwZW5kQ2hpbGQoY3JlYXRlVGFibGVIZWFkZXIoXCJFXCIpKTtcbiAgcm93LmFwcGVuZENoaWxkKGNyZWF0ZVRhYmxlSGVhZGVyKFwiRlwiKSk7XG4gIHJvdy5hcHBlbmRDaGlsZChjcmVhdGVUYWJsZUhlYWRlcihcIkdcIikpO1xuICByb3cuYXBwZW5kQ2hpbGQoY3JlYXRlVGFibGVIZWFkZXIoXCJIXCIpKTtcbiAgcm93LmFwcGVuZENoaWxkKGNyZWF0ZVRhYmxlSGVhZGVyKFwiSVwiKSk7XG4gIHJvdy5hcHBlbmRDaGlsZChjcmVhdGVUYWJsZUhlYWRlcihcIkpcIikpO1xuICByZXR1cm4gcm93O1xufVxuXG5jb25zdCBjcmVhdGVSb3cgPSAocm93TnVtYmVyKSA9PiB7XG4gIGxldCByb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidHJcIik7XG4gIHJvdy5kYXRhc2V0LnJvdyA9IHJvd051bWJlcjtcbiAgcm93LmFwcGVuZENoaWxkKGNyZWF0ZVRhYmxlSGVhZGVyKHJvd051bWJlcikpO1xuICBmb3IobGV0IGNvbCA9IDA7IGNvbCA8IDEwOyBjb2wrKyl7XG4gICAgcm93LmFwcGVuZENoaWxkKGNyZWF0ZUNlbGwocm93TnVtYmVyLCBjb2wpKTtcbiAgfVxuICByZXR1cm4gcm93O1xufVxuXG5jb25zdCBjcmVhdGVUYWJsZSA9ICgpID0+IHtcbiAgY29uc3QgbXlUYWJsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0YWJsZVwiKTtcbiAgbXlUYWJsZS5hcHBlbmRDaGlsZChjcmVhdGVUb3BSb3coKSk7XG4gIGZvcihsZXQgcm93ID0gMDsgcm93IDwgMTA7IHJvdysrKXtcbiAgICBteVRhYmxlLmFwcGVuZENoaWxkKGNyZWF0ZVJvdyhyb3cpKTtcbiAgfVxuXG4gIHJldHVybiBteVRhYmxlO1xufVxuXG5jb25zdCBkaXNwbGF5U2hpcHMgPSAoc2hpcEdyaWQsIHRhYmxlKSA9PiB7XG4gICAgZm9yKGxldCByb3cgPSAwOyByb3cgPCAxMDsgcm93Kyspe1xuICAgICAgICBmb3IobGV0IGNvbCA9IDA7IGNvbCA8IDEwOyBjb2wrKyl7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKHNoaXBHcmlkW3Jvd11bY29sXSk7XG4gICAgICAgICAgICBpZihzaGlwR3JpZFtyb3ddW2NvbF0pe1xuICAgICAgICAgICAgICAgIGxldCB0YWJsZVJvdyA9IHRhYmxlLmNoaWxkcmVuW3JvdyArIDFdO1xuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ2hlbGxvJyk7XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyh0YWJsZVJvdyk7XG4gICAgICAgICAgICAgICAgbGV0IGNlbGwgPSB0YWJsZVJvdy5jaGlsZHJlbltjb2wgKyAxXTtcbiAgICAgICAgICAgICAgICBsZXQgbXlEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgICAgIG15RGl2LmNsYXNzTGlzdC5hZGQoXCJzaGlwXCIpXG4gICAgICAgICAgICAgICAgbXlEaXYudGV4dENvbnRlbnQgPSBcInNcIjtcbiAgICAgICAgICAgICAgICAvL2NlbGwudGV4dENvbnRlbnQgPSBcImFzZGZhc1wiO1xuICAgICAgICAgICAgICAgIGNlbGwuYXBwZW5kQ2hpbGQobXlEaXYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5jb25zdCBhdHRhY2tHcmlkRmFjdG9yeSA9IChwcm9jZXNzVXNlcklucHV0KSA9PiB7XG4gIGxldCBhdHRhY2tHcmlkID0gY3JlYXRlVGFibGUoKTtcbiAgZm9yKGxldCByb3cgPSAwOyByb3cgPCAxMDsgcm93Kyspe1xuICAgICAgZm9yKGxldCBjb2wgPSAwOyBjb2wgPCAxMDsgY29sKyspe1xuICAgICAgICAgIGxldCB0YWJsZVJvdyA9IGF0dGFja0dyaWQuY2hpbGRyZW5bcm93ICsgMV07XG4gICAgICAgICAgbGV0IGNlbGwgPSB0YWJsZVJvdy5jaGlsZHJlbltjb2wgKyAxXTtcbiAgICAgICAgICAvL2NvbnNvbGUubG9nKGNlbGwpO1xuICAgICAgICAgIGNlbGwub25jbGljayA9IChjbGljaykgPT4ge1xuICAgICAgICAgICAgcHJvY2Vzc1VzZXJJbnB1dChyb3csIGNvbCwgY2xpY2spO1xuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhgbWFya2luZyB0aGlzIGZyb20gb25jbGljayAke3RoaXN9YCk7XG4gICAgICAgICAgfVxuICAgICAgfVxuICB9XG4gIHJldHVybiBhdHRhY2tHcmlkO1xuXG59XG5cbmNvbnN0IHNldFVwVmlldyA9IChnYW1lLCBwcm9jZXNzVXNlcklucHV0KSA9PiB7XG4gICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNjb250ZW50XCIpO1xuICAgIGxldCB0YWJsZSA9IGNyZWF0ZVRhYmxlKCk7XG4gICAgLy9jb25zb2xlLmxvZyh0YWJsZS5jaGlsZHJlbik7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKHRhYmxlKTtcbiAgICBkaXNwbGF5U2hpcHMoZ2FtZS5nZXRTaGlwR3JpZCgpLCB0YWJsZSk7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGF0dGFja0dyaWRGYWN0b3J5KHByb2Nlc3NVc2VySW5wdXQpKTtcbn1cblxuY29uc3QgbWFya0F0dGFjayA9IChjbGljaykgPT4ge1xuICBjb25zb2xlLmxvZyhjbGljay50YXJnZXQpO1xuICBsZXQgbXlEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgbXlEaXYuY2xhc3NMaXN0LmFkZCgnaGl0Jyk7XG4gIG15RGl2LmNsYXNzTGlzdC5hZGQoJ2FuaW1hdGUnKTtcbiAgbXlEaXYudGV4dENvbnRlbnQgPSAnaGl0JztcbiAgY2xpY2sudGFyZ2V0LmFwcGVuZENoaWxkKG15RGl2KTtcbn1cblxuY29uc3Qgdmlld0NvbnRyb2xsZXIgPSAoKSA9PiB7XG4gIGxldCBzaGlwZ3JpZERpc3BsYXk7XG4gIGxldCBtc2dPbmU7XG4gIGxldCBtc2dUd287XG5cbiAgY29uc3Qgc2V0VXBNc2dEaXNwbGF5ID0gKHBhcmVudCkgPT4ge1xuXG4gICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdtc2dEaXNwbGF5Jyk7XG4gICAgY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ2NvbnRhaW5lcicpO1xuXG4gICAgbXNnT25lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgIG1zZ09uZS5jbGFzc0xpc3QuYWRkKCdtc2dPbmUnKTtcbiAgICBtc2dPbmUudGV4dENvbnRlbnQgPSAnQmVnaW4gdGhlIGdhbWUgYnkgY2xpY2tpbmcgb24gdGhlIHJpZ2h0IGJvYXJkIHRvIHNlbGVjdCBjb29yZGluYXRlcyB0byBmaXJlIGF0JztcblxuICAgIG1zZ1R3byA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcbiAgICBtc2dUd28uY2xhc3NMaXN0LmFkZCgnbXNnVHdvJyk7XG4gICAgbXNnVHdvLnRleHRDb250ZW50ID0gJ0hhdmUgZnVuISdcblxuICAgIHBhcmVudC5hcHBlbmRDaGlsZChjb250YWluZXIpO1xuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChtc2dPbmUpO1xuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChtc2dUd28pO1xuICB9XG5cbiAgY29uc3QgdXBkYXRlTXNnT25lID0gKHJvdywgY29sLCByZXN1bHQpID0+IHtcbiAgICBsZXQgbXNnO1xuICAgIGlmKHJlc3VsdCA9PT0gJ21pc3MnKXtcbiAgICAgIG1zZyA9IGBZb3UgZmlyZSBhdCAoJHtyb3d9LCAke2NvbH0pIGJ1dCBoaXQgbm90aGluZy5gO1xuICAgIH0gZWxzZSBpZiAocmVzdWx0ID09PSAnaGl0Jyl7XG4gICAgICBtc2cgPSBgWW91IGZpcmUgYXQgKCR7cm93fSwgJHtjb2x9KSBhbmQgc2NvcmUgYSBoaXQuYDtcbiAgICB9IGVsc2UgaWYgKHJlc3VsdCA9PT0gJ3N1bmsnKXtcbiAgICAgIG1zZyA9IGBZb3UgZmlyZSBhdCAoJHtyb3d9LCAke2NvbH0pLCBzY29yZSBhIGhpdCwgYW5kIHNpbmsgYSBzaGlwLmA7XG4gICAgfSBlbHNlIGlmIChyZXN1bHQgPT09ICdsb3NzJyl7XG4gICAgICBtc2cgPSBgWW91ciBvcHBvbmVudCBoYXMgc3VuayBhbGwgeW91ciBzaGlwcy4gWW91IGxvc2UgdGhlIG1hdGNoLmA7XG4gICAgfVxuICAgIG1zZ09uZS50ZXh0Q29udGVudCA9IG1zZztcbiAgfVxuXG4gIGNvbnN0IHVwZGF0ZU1zZ1R3byA9IChyb3csIGNvbCwgcmVzdWx0KSA9PiB7XG4gICAgbGV0IG1zZztcbiAgICBpZihyZXN1bHQgPT09ICdtaXNzJyl7XG4gICAgICBtc2cgPSBgWW91ciBvcHBvbmVudCBmaXJlcyBhdCAoJHtyb3d9LCAke2NvbH0gYnV0IGhpdHMgbm90aGluZy4pYDtcbiAgICB9IGVsc2UgaWYgKHJlc3VsdCA9PT0gJ2hpdCcpe1xuICAgICAgbXNnID0gYFlvdXIgb3Bwb25lbnQgZmlyZXMgYXQgKCR7cm93fSwgJHtjb2x9KSBhbmQgc2NvcmVzIGEgaGl0LmA7XG4gICAgfSBlbHNlIGlmIChyZXN1bHQgPT09ICdzdW5rJyl7XG4gICAgICBtc2cgPSBgWW91ciBvcHBvbmVudCBmaXJlcyBhdCAoJHtyb3d9LCAke2NvbH0pLCBzY29yZXMgYSBoaXQsIGFuZCBzaW5rcyBhIHNoaXAuYDtcbiAgICB9IGVsc2UgaWYgKHJlc3VsdCA9PT0gJ3dpbicpe1xuICAgICAgbXNnID0gYFlvdSBoYXZlIHN1bmsgYWxsIHlvdXIgb3Bwb25lbnQncyBzaGlwcyBhbmQgd29uIWA7XG4gICAgfVxuICAgIG1zZ1R3by50ZXh0Q29udGVudCA9IG1zZztcbiAgfVxuXG4gIGNvbnN0IHNldFVwVmlldyA9IChnYW1lLCBwcm9jZXNzVXNlcklucHV0KSA9PiB7XG4gICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNjb250ZW50XCIpO1xuICAgIHNoaXBncmlkRGlzcGxheSA9IGNyZWF0ZVRhYmxlKCk7XG4gICAgLy9jb25zb2xlLmxvZyhzaGlwZ3JpZERpc3BsYXkuY2hpbGRyZW4pO1xuICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChzaGlwZ3JpZERpc3BsYXkpO1xuICAgIGRpc3BsYXlTaGlwcyhnYW1lLmdldFNoaXBHcmlkKCksIHNoaXBncmlkRGlzcGxheSk7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGF0dGFja0dyaWRGYWN0b3J5KHByb2Nlc3NVc2VySW5wdXQpKTtcbiAgICBzZXRVcE1zZ0Rpc3BsYXkoY29udGFpbmVyKTtcbiAgfVxuICBjb25zdCBnZXRTaGlwR3JpZENlbGwgPSAocm93LCBjb2wpID0+IHtcbiAgICBsZXQgdGFibGVSb3cgPSBzaGlwZ3JpZERpc3BsYXkuY2hpbGRyZW5bcm93ICsgMV07XG4gICAgbGV0IGNlbGwgPSB0YWJsZVJvdy5jaGlsZHJlbltjb2wgKyAxXTtcbiAgICByZXR1cm4gY2VsbDtcbiAgfVxuICBjb25zdCBtYXJrQ29tcHV0ZXJBdHRhY2sgPSAocm93LCBjb2wpID0+IHtcbiAgICBsZXQgY2VsbCA9IGdldFNoaXBHcmlkQ2VsbChyb3csIGNvbCk7XG4gICAgY2VsbC50ZXh0Q29udGVudCA9ICdwY2gnO1xuICB9XG4gIHJldHVybiB7IHNldFVwVmlldywgbWFya0NvbXB1dGVyQXR0YWNrLCB1cGRhdGVNc2dPbmUsIHVwZGF0ZU1zZ1R3byB9O1xufVxuXG5leHBvcnQgeyBcbiAgICB2aWV3Q29udHJvbGxlcixcbiAgICBzZXRVcFZpZXcsXG4gICAgbWFya0F0dGFjayxcbn07IiwiY29uc3Qgc2hpcEZhY3RvcnkgPSAobGVuLCBzaGlwSUQgPSdub0lEJywgZGlyID0gJ3NvdXRoJykgPT4ge1xuICAgIGNvbnN0IGlkID0gc2hpcElEO1xuICAgIGNvbnN0IGxlbmd0aCA9IGxlbjtcbiAgICBjb25zdCBkaXJlY3Rpb24gPSBkaXI7XG4gICAgbGV0IGhpdHNTdXN0YWluZWQgPSAwO1xuICAgIGxldCBzdW5rID0gZmFsc2U7XG5cbiAgICBjb25zdCBnZXRIaXRzU3VzdGFpbmVkID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gaGl0c1N1c3RhaW5lZDtcbiAgICB9XG4gICAgY29uc3QgaGl0ID0gKCkgPT4ge1xuICAgICAgICAvL2NvbnNvbGUubG9nKCdoaXQnKTtcbiAgICAgICAgaGl0c1N1c3RhaW5lZCsrO1xuICAgICAgICBpZihoaXRzU3VzdGFpbmVkID09PSBsZW5ndGgpe1xuICAgICAgICAgICAgc3VuayA9IHRydWU7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdzdW5rJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgaXNTdW5rID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gc3VuaztcbiAgICB9XG4gICAgY29uc3QgZ2V0TGVuZ3RoID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gbGVuZ3RoO1xuICAgIH1cbiAgICBjb25zdCBnZXREaXJlY3Rpb24gPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBkaXJlY3Rpb247XG4gICAgfVxuICAgIGNvbnN0IGdldElEID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gaWQ7XG4gICAgfVxuICAgIHJldHVybiB7IFxuICAgICAgICBnZXRIaXRzU3VzdGFpbmVkLFxuICAgICAgICBoaXQsXG4gICAgICAgIGlzU3VuayxcbiAgICAgICAgZ2V0TGVuZ3RoLFxuICAgICAgICBnZXREaXJlY3Rpb24sXG4gICAgICAgIGdldElEIFxuICAgIH07XG59XG5cbmV4cG9ydCB7XG4gICAgc2hpcEZhY3Rvcnlcbn0iLCJpbXBvcnQge1xuICAgIHNoaXBGYWN0b3J5XG59IGZyb20gJy4vc2hpcEZhY3RvcnknO1xuXG5jb25zdCBzaGlwR3JpZEZhY3RvcnkgPSAoKSA9PiB7XG4gICAgY29uc3Qgc2hpcEdyaWQgPSBBcnJheSgxMCkuZmlsbCgpLm1hcCgoKSA9PiBBcnJheSgxMCkuZmlsbChudWxsKSk7XG4gICAgY29uc3Qgc2hpcEFyciA9IFtdO1xuICAgIGxldCBvdXRjb21lID0gJyc7XG5cbiAgICBjb25zdCBpbkJvdW5kcyA9IChyb3csIGNvbCkgPT4ge1xuICAgICAgICByZXR1cm4gcm93ID49IDAgJiYgcm93IDwgMTAgJiYgY29sID49IDAgJiYgY29sIDwgMTA7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IGlzVmFsaWRTaGlwUGxhY2VtZW50ID0gKHNoaXAsIHJvdywgY29sKSA9PiB7XG4gICAgICAgIGxldCByb3dNb2QgPSBzaGlwLmdldERpcmVjdGlvbigpID09PSAnc291dGgnID8gMSA6IDA7XG4gICAgICAgIGxldCBjb2xNb2QgPSBzaGlwLmdldERpcmVjdGlvbigpID09PSAnZWFzdCcgPyAxIDogMDtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHNoaXAuZ2V0TGVuZ3RoKCk7IGkrKyl7XG4gICAgICAgICAgICBpZighaW5Cb3VuZHMocm93LCBjb2wpKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2hpcEdyaWRbcm93XVtjb2xdICE9IG51bGwpe1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJvdyA9IHJvdyArIChyb3dNb2QpO1xuICAgICAgICAgICAgY29sID0gY29sICsgKGNvbE1vZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IHBsYWNlU2hpcCA9IChzaGlwLCByb3csIGNvbCkgPT4ge1xuXG4gICAgICAgIGlmKCFpc1ZhbGlkU2hpcFBsYWNlbWVudChzaGlwLCByb3csIGNvbCkpe1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gcGxhY2Ugc2hpcCAke3NoaXAuZ2V0SUQoKX0gYXQgcm93OiAke3Jvd30sIGNvbDogJHtjb2x9YCk7XG4gICAgICAgIH1cblxuICAgICAgICBzaGlwQXJyLnB1c2goc2hpcCk7XG4gICAgICAgIGxldCByb3dNb2QgPSBzaGlwLmdldERpcmVjdGlvbigpID09PSAnc291dGgnID8gMSA6IDA7XG4gICAgICAgIGxldCBjb2xNb2QgPSBzaGlwLmdldERpcmVjdGlvbigpID09PSAnZWFzdCcgPyAxIDogMDtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHNoaXAuZ2V0TGVuZ3RoKCk7IGkrKyl7XG4gICAgICAgICAgICBzaGlwR3JpZFtyb3ddW2NvbF0gPSBzaGlwO1xuICAgICAgICAgICAgcm93ID0gcm93ICsgKHJvd01vZCk7XG4gICAgICAgICAgICBjb2wgPSBjb2wgKyAoY29sTW9kKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgY29uc3QgcmVjZWl2ZUF0dGFjayA9IChyb3csIGNvbCkgPT4ge1xuICAgICAgICBvdXRjb21lID0gJyc7XG4gICAgICAgIGlmKHNoaXBHcmlkW3Jvd11bY29sXSl7XG4gICAgICAgICAgICBzaGlwR3JpZFtyb3ddW2NvbF0uaGl0KCk7XG4gICAgICAgICAgICBvdXRjb21lID0gJ2hpdCc7XG4gICAgICAgICAgICBpZihzaGlwR3JpZFtyb3ddW2NvbF0uaXNTdW5rKCkpe1xuICAgICAgICAgICAgICAgIG91dGNvbWUgPSAnc3Vuayc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvdXRjb21lID0gJ21pc3MnXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBnZXRPdXRjb21lID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gb3V0Y29tZTtcbiAgICB9XG5cbiAgICBjb25zdCBpc0RlZmVhdGVkID0gKCkgPT4ge1xuICAgICAgICBmb3IobGV0IHNoaXAgb2Ygc2hpcEFycil7XG4gICAgICAgICAgICBpZighc2hpcC5pc1N1bmsoKSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGNvbnN0IGluaXREZWZhdWx0U2hpcHMgPSAoKSA9PiB7XG4gICAgICAgIGxldCBzaGlwXzEgPSBzaGlwRmFjdG9yeSggNCwnYScsICdlYXN0Jyk7XG4gICAgICAgIHBsYWNlU2hpcChzaGlwXzEsIDAsIDQpO1xuICAgICAgICBzaGlwQXJyLnB1c2goc2hpcF8xKTtcblxuICAgICAgICBsZXQgc2hpcF8yID0gc2hpcEZhY3RvcnkoIDIsJ2InLCAnc291dGgnKTtcbiAgICAgICAgcGxhY2VTaGlwKHNoaXBfMiwgMCwgOSk7XG4gICAgICAgIHNoaXBBcnIucHVzaChzaGlwXzIpO1xuXG4gICAgICAgIGxldCBzaGlwXzMgPSBzaGlwRmFjdG9yeSggMiwnYycsICdlYXN0Jyk7XG4gICAgICAgIHBsYWNlU2hpcChzaGlwXzMsIDIsIDApO1xuICAgICAgICBzaGlwQXJyLnB1c2goc2hpcF8zKTtcblxuICAgICAgICBsZXQgc2hpcF80ID0gc2hpcEZhY3RvcnkoIDMsJ2QnLCAnc291dGgnKTtcbiAgICAgICAgcGxhY2VTaGlwKHNoaXBfNCwgMywgNCk7XG4gICAgICAgIHNoaXBBcnIucHVzaChzaGlwXzQpO1xuXG4gICAgICAgIGxldCBzaGlwXzUgPSBzaGlwRmFjdG9yeSggMSwnZScsICdzb3V0aCcpO1xuICAgICAgICBwbGFjZVNoaXAoc2hpcF81LCAzLCA2KTtcbiAgICAgICAgc2hpcEFyci5wdXNoKHNoaXBfNSk7XG5cbiAgICAgICAgbGV0IHNoaXBfNiA9IHNoaXBGYWN0b3J5KCAzLCdmJywgJ3NvdXRoJyk7XG4gICAgICAgIHBsYWNlU2hpcChzaGlwXzYsIDQsIDkpO1xuICAgICAgICBzaGlwQXJyLnB1c2goc2hpcF82KTtcblxuICAgICAgICBsZXQgc2hpcF83ID0gc2hpcEZhY3RvcnkoIDIsJ2cnLCAnZWFzdCcpO1xuICAgICAgICBwbGFjZVNoaXAoc2hpcF83LCA1LCAwKTtcbiAgICAgICAgc2hpcEFyci5wdXNoKHNoaXBfNyk7XG5cbiAgICAgICAgbGV0IHNoaXBfOCA9IHNoaXBGYWN0b3J5KDEsICdoJyk7XG4gICAgICAgIHBsYWNlU2hpcChzaGlwXzgsIDgsIDApO1xuICAgICAgICBzaGlwQXJyLnB1c2goc2hpcF84KTtcblxuICAgICAgICBsZXQgc2hpcF85ID0gc2hpcEZhY3RvcnkoMSwgJ2knKTtcbiAgICAgICAgcGxhY2VTaGlwKHNoaXBfOSwgOSwgNSk7XG4gICAgICAgIHNoaXBBcnIucHVzaChzaGlwXzkpO1xuXG4gICAgICAgIGxldCBzaGlwXzEwID0gc2hpcEZhY3RvcnkoMSwgJ2onKTtcbiAgICAgICAgcGxhY2VTaGlwKHNoaXBfMTAsIDksIDkpO1xuICAgICAgICBzaGlwQXJyLnB1c2goc2hpcF8xMCk7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IGdldFNoaXBHcmlkID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gc2hpcEdyaWQ7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IGlzU2hpcFByZXNlbnRBdCA9IChyb3csIGNvbCkgPT4ge1xuICAgICAgICByZXR1cm4gc2hpcEdyaWRbcm93XVtjb2xdICE9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgXG4gICAgICAgIHBsYWNlU2hpcCwgXG4gICAgICAgIHJlY2VpdmVBdHRhY2ssXG4gICAgICAgIGdldE91dGNvbWUsXG4gICAgICAgIGlzRGVmZWF0ZWQsIFxuICAgICAgICBpbml0RGVmYXVsdFNoaXBzLCBcbiAgICAgICAgZ2V0U2hpcEdyaWQsXG4gICAgICAgIGlzU2hpcFByZXNlbnRBdFxuICAgIH07XG59XG5cbmV4cG9ydCB7XG4gICAgc2hpcEdyaWRGYWN0b3J5XG59IiwiY29uc3QgYXR0YWNrR3JpZEZhY3RvcnkgPSAoKSA9PiB7XG4gICAgY29uc3QgYXR0YWNrcyA9IEFycmF5KDEwKS5maWxsKCkubWFwKCgpID0+IEFycmF5KDEwKS5maWxsKG51bGwpKTtcblxuICAgIGNvbnN0IGluQm91bmRzID0gKHJvdywgY29sKSA9PiB7XG4gICAgICAgIHJldHVybiByb3cgPj0gMCAmJiByb3cgPCAxMCAmJiBjb2wgPj0gMCAmJiBjb2wgPCAxMDtcbiAgICB9XG5cbiAgICBjb25zdCBpc1ZhbGlkQXR0YWNrID0gKHJvdywgY29sKSA9PiB7XG4gICAgICAgIHJldHVybiBpbkJvdW5kcyhyb3csIGNvbCkgJiYgYXR0YWNrc1tyb3ddW2NvbF0gPT09IG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgcmVjb3JkQXR0YWNrID0gKHJvdywgY29sKSA9PiB7XG4gICAgICAgIGF0dGFja3Nbcm93XVtjb2xdID0gJ2hpdCc7XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgaXNWYWxpZEF0dGFjaywgcmVjb3JkQXR0YWNrIH07XG59XG5cbmV4cG9ydHtcbiAgICBhdHRhY2tHcmlkRmFjdG9yeVxufSIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCB7IFxuICAgIHZpZXdDb250cm9sbGVyLFxuICAgIHNldFVwVmlldyxcbiAgICBtYXJrQXR0YWNrXG59IGZyb20gJy4vdmlld0NvbnRyb2xsZXInO1xuXG5pbXBvcnQgeyBcbiAgICBnYW1lTWFzdGVyRmFjdG9yeSxcbn0gZnJvbSAnLi9nYW1lTWFzdGVyJztcblxuLy9tYW5hZ2VzIHRoZSBnYW1lIGFuZCB0aGUgdmlld2NvbnRyb2xsZXJcbmNvbnN0IHdlYnNpdGVNYW5hZ2VyRmFjdG9yeSA9ICgpID0+IHtcbiAgICBsZXQgZ2FtZSA9IGdhbWVNYXN0ZXJGYWN0b3J5KCk7XG4gICAgbGV0IG15Vmlld0NvbnRyb2xsZXIgPSB2aWV3Q29udHJvbGxlcigpO1xuICAgIGNvbnN0IGdldFNoaXBHcmlkID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gZ2FtZS5nZXRTaGlwR3JpZCgpO1xuICAgIH1cbiAgICBjb25zdCBwcm9jZXNzVXNlcklucHV0ID0gKHJvdywgY29sLCBjbGljaykgPT4ge1xuICAgICAgICBcbiAgICAgICAgaWYoIWdhbWUuaXNBdHRhY2thYmxlQnlQbGF5ZXIocm93LCBjb2wpKXtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIG1hcmtBdHRhY2soY2xpY2spO1xuLyogXG4gICAgICAgIGlmKGdhbWUuaXNTaGlwUHJlc2VudEF0KHJvdywgY29sLCAnY29tcHV0ZXInKSl7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnU0NVQ0VTUycpO1xuICAgICAgICAgICAgLy91cGRhdGUgY29uc29sZVxuICAgICAgICB9ICovXG5cbiAgICAgICAgZ2FtZS5wcm9jZXNzVXNlcklucHV0KHJvdywgY29sKTtcblxuICAgICAgICAvL2Rpc3BsYXkgb3V0Y29tZVxuICAgICAgICAvL2NvbnNvbGUubG9nKGBZb3UgZmlyZSBhdCAoJHtyb3d9LCAke2NvbH0pIGFuZCAke2dhbWUuZ2V0UGxheWVyVHVyblJlc3VsdCgpfWApO1xuICAgICAgICBteVZpZXdDb250cm9sbGVyLnVwZGF0ZU1zZ09uZShyb3csIGNvbCwgZ2FtZS5nZXRQbGF5ZXJUdXJuUmVzdWx0KCkpO1xuXG4gICAgICAgIC8vY29uc29sZS5sb2coZ2FtZS53aW5DaGVja1BsYXllcigpKTtcbiAgICAgICAgaWYoZ2FtZS53aW5DaGVja1BsYXllcigpKXtcbiAgICAgICAgICAgIC8vZGlzcGxheSB2aWN0b3J5IG1lc3NhZ2VcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdwbGF5ZXIgd2lucycpO1xuICAgICAgICAgICAgbXlWaWV3Q29udHJvbGxlci51cGRhdGVNc2dUd28oMCwgMCwgJ3dpbicpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9nZXQgYWkgdGFyZ2V0XG4gICAgICAgIC8vZXhlY3V0ZSBhaSBhdHRhY2tcbiAgICAgICAgbGV0IHRhcmdldCA9IGdhbWUucHJvY2Vzc0NvbXB1dGVyQXR0YWNrKCk7XG4gICAgICAgIC8vY29uc29sZS5sb2codGFyZ2V0KTtcbiAgICAgICAgLy91cGRhdGUgcGxheWVyIHNoaXAgZ3JpZCB0byBzaG93IGF0dGFja1xuICAgICAgICBteVZpZXdDb250cm9sbGVyLm1hcmtDb21wdXRlckF0dGFjayh0YXJnZXQucm93LCB0YXJnZXQuY29sKTtcblxuICAgICAgICAvL2Rpc3BsYXkgb3V0Y29tZVxuICAgICAgICBjb25zb2xlLmxvZyhgWW91ciBvcHBvbmVudCBmaXJlcyBhdCAoJHt0YXJnZXQucm93fSwgJHt0YXJnZXQuY29sfSkgYW5kICR7Z2FtZS5nZXRDb21wdXRlclR1cm5SZXN1bHQoKX1gKTtcbiAgICAgICAgbXlWaWV3Q29udHJvbGxlci51cGRhdGVNc2dUd28odGFyZ2V0LnJvdywgdGFyZ2V0LmNvbCwgZ2FtZS5nZXRDb21wdXRlclR1cm5SZXN1bHQoKSk7XG5cbiAgICAgICAgLy93aW4gY2hlY2tcbiAgICAgICAgaWYoZ2FtZS53aW5DaGVja0NvbXB1dGVyKCkpe1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2NvbXB1dGVyIHdpbnMnKTtcbiAgICAgICAgICAgIG15Vmlld0NvbnRyb2xsZXIudXBkYXRlTXNnVHdvKDAsIDAsICdsb3NzJyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfVxuICAgIGNvbnN0IGluaXRpYXRlID0gKCkgPT4ge1xuICAgICAgICBteVZpZXdDb250cm9sbGVyLnNldFVwVmlldyhnYW1lLCBwcm9jZXNzVXNlcklucHV0KTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHsgaW5pdGlhdGUsIHByb2Nlc3NVc2VySW5wdXQsIGdldFNoaXBHcmlkIH07XG59XG5cbmV4cG9ydCB7IFxuICAgIHdlYnNpdGVNYW5hZ2VyRmFjdG9yeVxufTsiLCJpbXBvcnQgeyBcbiAgICBzaGlwR3JpZEZhY3Rvcnlcbn0gZnJvbSAnLi9zaGlwR3JpZEZhY3RvcnknO1xuXG5pbXBvcnQgeyBcbiAgICBhdHRhY2tHcmlkRmFjdG9yeVxufSBmcm9tICcuL2F0dGFja0dyaWRGYWN0b3J5JztcblxuaW1wb3J0IHsgXG4gICAgY29tcHV0ZXJUYXJnZXRpbmdBSUZhY3Rvcnlcbn0gZnJvbSAnLi9jb21wdXRlclRhcmdldGluZyc7XG5cbmNvbnN0IGdhbWVNYXN0ZXJGYWN0b3J5ID0gKCkgPT4ge1xuXG4gICAgY29uc3QgYm9hcmRfcGxheWVyX3NoaXBzID0gc2hpcEdyaWRGYWN0b3J5KCk7XG4gICAgY29uc3QgYm9hcmRfY29tcHV0ZXJfc2hpcHMgPSBzaGlwR3JpZEZhY3RvcnkoKTtcblxuICAgIGNvbnN0IGJvYXJkX3BsYXllcl9hdHRhY2tzID0gYXR0YWNrR3JpZEZhY3RvcnkoKTtcbiAgICBjb25zdCBib2FyZF9jb21wdXRlcl9hdHRhY2tzID0gYXR0YWNrR3JpZEZhY3RvcnkoKTtcblxuICAgIGxldCBwbGF5ZXJUdXJuUmVzdWx0ID0gJyc7XG4gICAgbGV0IGNvbXB1dGVyVHVyblJlc3VsdCA9ICcnO1xuXG4gICAgYm9hcmRfcGxheWVyX3NoaXBzLmluaXREZWZhdWx0U2hpcHMoKTtcbiAgICBib2FyZF9jb21wdXRlcl9zaGlwcy5pbml0RGVmYXVsdFNoaXBzKCk7XG4gICAgY29uc3QgY29tcHV0ZXJUYXJnZXRpbmdBSSA9IGNvbXB1dGVyVGFyZ2V0aW5nQUlGYWN0b3J5KGJvYXJkX2NvbXB1dGVyX2F0dGFja3MpO1xuICAgIGxldCBhdHRhY2tMb2NhdGlvbjtcbiAgICBcbiAgICBjb25zdCBnZXRTaGlwR3JpZCA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIGJvYXJkX3BsYXllcl9zaGlwcy5nZXRTaGlwR3JpZCgpO1xuICAgIH1cblxuICAgIGNvbnN0IHByb2Nlc3NVc2VySW5wdXQgPSAocm93ICwgY29sKSA9PiB7XG4gICAgICAgIC8vY29uc29sZS5sb2coYFZhbGlkIHBsYXllciBhdHRhY2sgKCR7cm93fSwgJHtjb2x9KTogJHtib2FyZF9wbGF5ZXJfYXR0YWNrcy5pc1ZhbGlkQXR0YWNrKHJvdywgY29sKX1gKTtcbiAgICAgICAgaWYoIWJvYXJkX3BsYXllcl9hdHRhY2tzLmlzVmFsaWRBdHRhY2socm93LCBjb2wpKXtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBib2FyZF9jb21wdXRlcl9zaGlwcy5yZWNlaXZlQXR0YWNrKHJvdywgY29sKTtcbiAgICAgICAgcGxheWVyVHVyblJlc3VsdCA9IGJvYXJkX2NvbXB1dGVyX3NoaXBzLmdldE91dGNvbWUoKTtcbiAgICAgICAgYm9hcmRfcGxheWVyX2F0dGFja3MucmVjb3JkQXR0YWNrKHJvdywgY29sKTtcbiAgICB9XG5cbiAgICBjb25zdCBpc0F0dGFja2FibGVCeVBsYXllciA9IChyb3csIGNvbCkgPT4ge1xuICAgICAgICByZXR1cm4gYm9hcmRfcGxheWVyX2F0dGFja3MuaXNWYWxpZEF0dGFjayhyb3csIGNvbCk7XG4gICAgfVxuXG4gICAgY29uc3Qgd2luQ2hlY2tQbGF5ZXIgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBib2FyZF9jb21wdXRlcl9zaGlwcy5pc0RlZmVhdGVkKCk7XG4gICAgfVxuXG4gICAgY29uc3Qgd2luQ2hlY2tDb21wdXRlciA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIGJvYXJkX3BsYXllcl9zaGlwcy5pc0RlZmVhdGVkKCk7XG4gICAgfVxuXG4gICAgY29uc3QgaXNTaGlwUHJlc2VudEF0ID0gKHJvdywgY29sLCB0YXJnZXQpID0+IHtcbiAgICAgICAgbGV0IGJvYXJkID0gdGFyZ2V0ID09PSAnY29tcHV0ZXInID8gYm9hcmRfY29tcHV0ZXJfc2hpcHMgOiBib2FyZF9wbGF5ZXJfc2hpcHM7XG4gICAgICAgIHJldHVybiBib2FyZC5pc1NoaXBQcmVzZW50QXQocm93LCBjb2wpO1xuICAgIH1cblxuICAgIGNvbnN0IHByb2Nlc3NDb21wdXRlckF0dGFjayA9ICgpID0+IHtcbiAgICAgICAgbGV0IHRhcmdldCA9IGNvbXB1dGVyVGFyZ2V0aW5nQUkucGlja1RhcmdldFNpbXBsZSgpO1xuICAgICAgICAvL2NvbnNvbGUubG9nKGBWYWxpZCBjb21wdXRlciBhdHRhY2sgKCR7dGFyZ2V0LnJvd30sICR7dGFyZ2V0LmNvbH0pOiAke2JvYXJkX2NvbXB1dGVyX2F0dGFja3MuaXNWYWxpZEF0dGFjayh0YXJnZXQucm93LCB0YXJnZXQuY29sKX1gKTtcbiAgICAgICAgaWYoIWJvYXJkX2NvbXB1dGVyX2F0dGFja3MuaXNWYWxpZEF0dGFjayh0YXJnZXQucm93LCB0YXJnZXQuY29sKSl7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnZ2FtZSBtYXN0ZXI6IHByb2Nlc3NDb21wdXRlckF0dGFja0Vycm9yJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgYm9hcmRfcGxheWVyX3NoaXBzLnJlY2VpdmVBdHRhY2sodGFyZ2V0LnJvdywgdGFyZ2V0LmNvbCk7XG4gICAgICAgIGNvbXB1dGVyVHVyblJlc3VsdCA9IGJvYXJkX3BsYXllcl9zaGlwcy5nZXRPdXRjb21lKCk7XG4gICAgICAgIGJvYXJkX2NvbXB1dGVyX2F0dGFja3MucmVjb3JkQXR0YWNrKHRhcmdldC5yb3csIHRhcmdldC5jb2wpO1xuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cblxuICAgIGNvbnN0IGdldFBsYXllclR1cm5SZXN1bHQgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBwbGF5ZXJUdXJuUmVzdWx0O1xuICAgIH1cblxuICAgIGNvbnN0IGdldENvbXB1dGVyVHVyblJlc3VsdCA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIGNvbXB1dGVyVHVyblJlc3VsdDtcbiAgICB9XG5cbiAgICByZXR1cm4geyBcbiAgICAgICAgZ2V0U2hpcEdyaWQsIFxuICAgICAgICBwcm9jZXNzVXNlcklucHV0LCBcbiAgICAgICAgaXNBdHRhY2thYmxlQnlQbGF5ZXIsIFxuICAgICAgICB3aW5DaGVja1BsYXllciwgXG4gICAgICAgIHdpbkNoZWNrQ29tcHV0ZXIsIFxuICAgICAgICBpc1NoaXBQcmVzZW50QXQsXG4gICAgICAgIHByb2Nlc3NDb21wdXRlckF0dGFjayxcbiAgICAgICAgZ2V0UGxheWVyVHVyblJlc3VsdCxcbiAgICAgICAgZ2V0Q29tcHV0ZXJUdXJuUmVzdWx0XG4gICAgfTtcbn1cblxuXG5leHBvcnQgeyBcbiAgICBnYW1lTWFzdGVyRmFjdG9yeVxufTsiLCJjb25zdCBjb21wdXRlclRhcmdldGluZ0FJRmFjdG9yeSA9IChib2FyZCkgPT4ge1xuICAgIGxldCBsYXN0Q29vcmRpbmF0ZXNIaXQ7XG4gICAgbGV0IGhpdFNoaXAgPSBmYWxzZTtcbiAgICBsZXQgZ2V0UmFuZCA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDEwKTtcbiAgICB9XG4gICAgbGV0IHBpY2tUYXJnZXRTaW1wbGUgPSAoKSA9PiB7XG4gICAgICAgIGxldCByb3cgPSBnZXRSYW5kKCk7XG4gICAgICAgIGxldCBjb2wgPSBnZXRSYW5kKCk7XG4gICAgICAgIHdoaWxlKCFib2FyZC5pc1ZhbGlkQXR0YWNrKHJvdywgY29sKSl7XG4gICAgICAgICAgICByb3cgPSBnZXRSYW5kKCk7XG4gICAgICAgICAgICBjb2wgPSBnZXRSYW5kKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtyb3csIGNvbH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgcGlja1RhcmdldFNpbXBsZSB9O1xufVxuXG5leHBvcnQgeyBcbiAgICBjb21wdXRlclRhcmdldGluZ0FJRmFjdG9yeVxufTsiLCJpbXBvcnQgeyBcbiAgICB3ZWJzaXRlTWFuYWdlckZhY3Rvcnlcbn0gZnJvbSAnLi93ZWJzaXRlTWFuYWdlcic7XG5pbXBvcnQgJy4vc3R5bGUuY3NzJztcblxuY29uc3Qgc2l0ZU1hbmFnZXIgPSB3ZWJzaXRlTWFuYWdlckZhY3RvcnkoKTtcbnNpdGVNYW5hZ2VyLmluaXRpYXRlKCk7Il0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJuYyIsImNvbnRhaW5lciIsImhlYWRlciIsIm1haW4iLCJmb290ZXIiLCJjcmVhdGVDZWxsIiwibXlSb3ciLCJteUNvbCIsIm91dHB1dCIsImNsYXNzTGlzdCIsImFkZCIsImRhdGFzZXQiLCJyb3ciLCJjb2wiLCJjcmVhdGVUYWJsZUhlYWRlciIsInRleHRDb250ZW50IiwiY3JlYXRlUm93Iiwicm93TnVtYmVyIiwiY3JlYXRlVGFibGUiLCJteVRhYmxlIiwiY3JlYXRlVG9wUm93Iiwidmlld0NvbnRyb2xsZXIiLCJzaGlwZ3JpZERpc3BsYXkiLCJtc2dPbmUiLCJtc2dUd28iLCJzZXRVcFZpZXciLCJnYW1lIiwicHJvY2Vzc1VzZXJJbnB1dCIsInNoaXBHcmlkIiwidGFibGUiLCJjZWxsIiwiY2hpbGRyZW4iLCJteURpdiIsImRpc3BsYXlTaGlwcyIsImdldFNoaXBHcmlkIiwiYXR0YWNrR3JpZCIsIm9uY2xpY2siLCJjbGljayIsImF0dGFja0dyaWRGYWN0b3J5IiwicGFyZW50Iiwic2V0VXBNc2dEaXNwbGF5IiwibWFya0NvbXB1dGVyQXR0YWNrIiwiZ2V0U2hpcEdyaWRDZWxsIiwidXBkYXRlTXNnT25lIiwibXNnIiwidXBkYXRlTXNnVHdvIiwic2hpcEZhY3RvcnkiLCJsZW4iLCJzaGlwSUQiLCJkaXIiLCJkaXJlY3Rpb24iLCJoaXRzU3VzdGFpbmVkIiwic3VuayIsImdldEhpdHNTdXN0YWluZWQiLCJoaXQiLCJpc1N1bmsiLCJnZXRMZW5ndGgiLCJnZXREaXJlY3Rpb24iLCJnZXRJRCIsInNoaXBHcmlkRmFjdG9yeSIsIkFycmF5IiwiZmlsbCIsInNoaXBBcnIiLCJvdXRjb21lIiwiaW5Cb3VuZHMiLCJwbGFjZVNoaXAiLCJzaGlwIiwicm93TW9kIiwiY29sTW9kIiwiaXNWYWxpZFNoaXBQbGFjZW1lbnQiLCJyZWNlaXZlQXR0YWNrIiwiZ2V0T3V0Y29tZSIsImlzRGVmZWF0ZWQiLCJpbml0RGVmYXVsdFNoaXBzIiwic2hpcF8xIiwic2hpcF8yIiwic2hpcF8zIiwic2hpcF80Iiwic2hpcF81Iiwic2hpcF82Iiwic2hpcF83Iiwic2hpcF84Iiwic2hpcF85Iiwic2hpcF8xMCIsImlzU2hpcFByZXNlbnRBdCIsImF0dGFja3MiLCJpc1ZhbGlkQXR0YWNrIiwicmVjb3JkQXR0YWNrIiwibG9jYWxzIiwiYm9hcmRfcGxheWVyX3NoaXBzIiwiYm9hcmRfY29tcHV0ZXJfc2hpcHMiLCJib2FyZF9wbGF5ZXJfYXR0YWNrcyIsImJvYXJkX2NvbXB1dGVyX2F0dGFja3MiLCJwbGF5ZXJUdXJuUmVzdWx0IiwiY29tcHV0ZXJUdXJuUmVzdWx0IiwiY29tcHV0ZXJUYXJnZXRpbmdBSSIsImJvYXJkIiwiZ2V0UmFuZCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInBpY2tUYXJnZXRTaW1wbGUiLCJjb21wdXRlclRhcmdldGluZ0FJRmFjdG9yeSIsImlzQXR0YWNrYWJsZUJ5UGxheWVyIiwid2luQ2hlY2tQbGF5ZXIiLCJ3aW5DaGVja0NvbXB1dGVyIiwicHJvY2Vzc0NvbXB1dGVyQXR0YWNrIiwiY29uc29sZSIsImxvZyIsImdldFBsYXllclR1cm5SZXN1bHQiLCJnZXRDb21wdXRlclR1cm5SZXN1bHQiLCJnYW1lTWFzdGVyRmFjdG9yeSIsIm15Vmlld0NvbnRyb2xsZXIiLCJtYXJrQXR0YWNrIiwiaW5pdGlhdGUiLCJ3ZWJzaXRlTWFuYWdlckZhY3RvcnkiXSwic291cmNlUm9vdCI6IiJ9