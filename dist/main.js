(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>a});var o=n(537),r=n.n(o),i=n(645),s=n.n(i)()(r());s.push([e.id,"body {\n    background-color: lightgray;\n}\n\n.animate {\n    /* animation: 0.7s slide-in 0.7s 3 linear; */\n    animation-name: slide-in;\n    animation-duration: 0.3s;\n    animation-iteration-count: 3;\n}\n  \n@keyframes slide-in {\n    0% {\n        transform: scale(0.25);\n        transform: translateY(-1000px);\n    }\n    80%{\n        transform: scale(0.25);\n    }\n    100% {\n        transform: translateY(0);\n        transform: scale(1);\n    }\n}\n\nth, td{\n    margin: 0;\n    padding: 0;\n    height: 32px;\n    width: 32px;\n}\n\ntd {\n    border: 1px solid black;\n}\n\ndiv.hit, div.ship {\n    margin: 0;\n    padding: 0;\n    \n    height: 100%;\n    width: 100%;\n}\n\ndiv.ship {\n    background-color: blue;\n}\n\ndiv.hit {\n    background-color: red;\n}\n\ndiv.hit.ship {\n    border: 5px solid blue;\n}\n\ntd.ship {\n    background-color: blue;\n}\n\ntd.miss, td.hit {\n    background-color: red;\n}\n\ntd.hit {\n    border: 5px solid blue;\n    box-sizing: border-box;\n}\n\ntd.selected {\n    background-color: turquoise;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,2BAA2B;AAC/B;;AAEA;IACI,4CAA4C;IAC5C,wBAAwB;IACxB,wBAAwB;IACxB,4BAA4B;AAChC;;AAEA;IACI;QACI,sBAAsB;QACtB,8BAA8B;IAClC;IACA;QACI,sBAAsB;IAC1B;IACA;QACI,wBAAwB;QACxB,mBAAmB;IACvB;AACJ;;AAEA;IACI,SAAS;IACT,UAAU;IACV,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,SAAS;IACT,UAAU;;IAEV,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,sBAAsB;IACtB,sBAAsB;AAC1B;;AAEA;IACI,2BAA2B;AAC/B",sourcesContent:["body {\n    background-color: lightgray;\n}\n\n.animate {\n    /* animation: 0.7s slide-in 0.7s 3 linear; */\n    animation-name: slide-in;\n    animation-duration: 0.3s;\n    animation-iteration-count: 3;\n}\n  \n@keyframes slide-in {\n    0% {\n        transform: scale(0.25);\n        transform: translateY(-1000px);\n    }\n    80%{\n        transform: scale(0.25);\n    }\n    100% {\n        transform: translateY(0);\n        transform: scale(1);\n    }\n}\n\nth, td{\n    margin: 0;\n    padding: 0;\n    height: 32px;\n    width: 32px;\n}\n\ntd {\n    border: 1px solid black;\n}\n\ndiv.hit, div.ship {\n    margin: 0;\n    padding: 0;\n    \n    height: 100%;\n    width: 100%;\n}\n\ndiv.ship {\n    background-color: blue;\n}\n\ndiv.hit {\n    background-color: red;\n}\n\ndiv.hit.ship {\n    border: 5px solid blue;\n}\n\ntd.ship {\n    background-color: blue;\n}\n\ntd.miss, td.hit {\n    background-color: red;\n}\n\ntd.hit {\n    border: 5px solid blue;\n    box-sizing: border-box;\n}\n\ntd.selected {\n    background-color: turquoise;\n}"],sourceRoot:""}]);const a=s},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,i){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(o)for(var a=0;a<this.length;a++){var l=this[a][0];null!=l&&(s[l]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);o&&s[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),r&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=r):u[4]="".concat(r)),t.push(u))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var i={},s=[],a=0;a<e.length;a++){var l=e[a],c=o.base?l[0]+o.base:l[0],u=i[c]||0,d="".concat(c," ").concat(u);i[c]=u+1;var p=n(d),A={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)t[p].references++,t[p].updater(A);else{var h=r(A,o);o.byIndex=a,t.splice(a,0,{identifier:d,updater:h,references:1})}s.push(d)}return s}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var i=o(e=e||[],r=r||{});return function(e){e=e||[];for(var s=0;s<i.length;s++){var a=n(i[s]);t[a].references--}for(var l=o(e,r),c=0;c<i.length;c++){var u=n(i[c]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}i=l}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={id:o,exports:{}};return e[o](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{const e=()=>{let e,t,n,o,r,i,s,a;const l=e=>{i.onchange=t=>{(()=>{for(let e=0;e<10;e++)for(let t=0;t<10;t++)p(e,t).classList.remove("selected")})();let n=i.value,o=e.getShipLocation(n);for(let e of o){console.log("coords:"),console.log(e);let t=p(e.row,e.col);console.log("myTD"),console.log(t),t.classList.add("selected")}}},c=()=>{if(!a.getPossibleMove())return void console.log("no move exectued- exiting out of update ship view");let e=a.getLocationChange();console.log("marker: view controller, update ship view"),console.log(e);for(let t of e.oldLocations){let e=p(t.row,t.col);e.classList.remove("ship"),e.classList.remove("selected")}for(let t of e.newLocations){let e=p(t.row,t.col);e.classList.add("ship"),e.classList.add("selected")}},u=()=>{let e=a.getErrorMsg();console.log(e),n.textContent="outOfBounds"===e?"Cannot move ships out of bounds.":"spaceViolation"===e?"Cannot move ships to close. A minimum of one empty space between ships is required.":""},d=(t,n)=>{document.querySelector("#content"),((t,n,o)=>{((e,t)=>{for(let n=0;n<10;n++)for(let o=0;o<10;o++)e[n][o]&&t.children[n+1].children[o+1].classList.add("ship")})(n.getShipGrid(),e)})(0,t)},p=(t,n)=>e.children[t+1].children[n+1];return{setUp:(p,A)=>{e=document.querySelector(".shipGrid"),t=document.querySelector(".attackGrid"),n=document.querySelector(".errorText"),o=document.querySelector(".msgOne"),r=document.querySelector(".msgTwo"),i=document.querySelector("#ship-selector"),s={},s.up=document.querySelector(".up"),s.left=document.querySelector(".left"),s.down=document.querySelector(".down"),s.right=document.querySelector(".right"),s.rotate=document.querySelector(".rotate"),s.randomize=document.querySelector(".randomize"),s.start=document.querySelector(".start"),l(),(e=>{a=e})(p),((e,n)=>{s.start.onclick=()=>{((e,t)=>{for(let n=0;n<10;n++)for(let o=0;o<10;o++)e.children[n+1].children[o+1].onclick=e=>{t(n,o,e)}})(t,e),disableMovementBtns()},l(n)})(A,p.getShipGridWrapper()),s.up.onclick=()=>{a.moveShip(i.value,"up"),c(),u()},s.down.onclick=()=>{a.moveShip(i.value,"down"),c(),u()},s.right.onclick=()=>{a.moveShip(i.value,"right"),c(),u()},s.left.onclick=()=>{a.moveShip(i.value,"left"),c(),u()},s.rotate.onclick=()=>{a.rotateShip(i.value),c(),u()},d(p)},setUpView:d,markComputerAttack:(e,t)=>{let n=p(e,t);a.isShipPresentAt(e,t,"player")?n.classList.add("hit"):n.classList.add("miss"),n.classList.add("animate")},updateMsgOne:(e,t,n)=>{let r;"miss"===n?r=`You fire at (${e}, ${t}) but hit nothing.`:"hit"===n?r=`You fire at (${e}, ${t}) and score a hit.`:"sunk"===n?r=`You fire at (${e}, ${t}), score a hit, and sink a ship.`:"loss"===n&&(r="Your opponent has sunk all your ships. You lose the match."),o.textContent=r},updateMsgTwo:(e,t,n)=>{let o;"miss"===n?o=`Your opponent fires at (${e}, ${t}) but hits nothing.`:"hit"===n?o=`Your opponent fires at (${e}, ${t}) and scores a hit.`:"sunk"===n?o=`Your opponent fires at (${e}, ${t}), scores a hit, and sinks a ship.`:"win"===n&&(o="You have sunk all your opponent's ships and won!"),r.textContent=o},updateShipView:c}},t=(e,t="noID",n="south")=>{const o=t,r=e;let i=n,s=0,a=!1;return{getHitsSustained:()=>s,hit:()=>{s++,s===r&&(a=!0)},setDirection:e=>{i=e},isSunk:()=>a,getLength:()=>r,getDirection:()=>i,getID:()=>o}},o=()=>{const e=Array(10).fill().map((()=>Array(10).fill(null))),n=[],o={},r=((e,t,n)=>{let o=e,r=t,i=n,s="none",a={},l=!1;const c=(e,t)=>e<0||e>=10||t<0||t>=10,u=e=>{for(let t of e)if(c(t.row,t.col))return!0;return!1},d=()=>{a={}},p=(e,t,n)=>!c(e,t)&&null!==o[e][t]&&void 0!==o[e][t]&&o[e][t].getID()!==n,A=(e,t)=>{console.log("inside isSpaceViolation"),console.log(t);for(let n of t){let t=n.row,o=n.col;if(p(t-1,o+1,e))return!0;if(p(t,o+1,e))return!0;if(p(t+1,o+1,e))return!0;if(p(t+1,o,e))return!0;if(p(t+1,o-1,e))return!0;if(p(t,o-1,e))return!0;if(p(t-1,o-1,e))return!0;if(p(t-1,o,e))return!0}return!1},h=(e,t)=>{for(let e of t)o[e.row][e.col]=null;r[e]=[]},g=(e,t)=>{for(let n of t)o[n.row][n.col]=i[e-1],r[e].push(structuredClone(n))};return{moveShip:(e,t)=>{let n=structuredClone(r[e]),o=structuredClone(((e,t)=>{let n=[],o=0,r=0;switch(t){case"up":o=-1;break;case"down":o=1;break;case"left":r=-1;break;case"right":r=1}for(let t of e){let e=t.row+o,i=t.col+r;n.push({row:e,col:i})}return n})(n,t));return u(o)?(s="outOfBounds",d(),void(l=!1)):A(e,o)?(s="spaceViolation",d(),void(l=!1)):(s="",l=!0,a={oldLocations:n,newLocations:o},h(e,n),void g(e,o))},rotateShip:e=>{let t=i[e-1];console.log("REACHED"),console.log(e),console.log(t.getID()),console.log(r);let n="south"===t.getDirection()?"east":"south",o=r[e],c=((e,t)=>{let n=e[0],o=[],r=0,i=0,s=n.row,a=n.col;switch(t){case"south":r=1;break;case"east":i=1}o.push({row:s,col:a});for(let t=1;t<e.length;t++)s+=r,a+=i,o.push({row:s,col:a});return console.log(e),console.log(o),o})(o,n);return u(c)?(s="outOfBounds",d(),void(l=!1)):A(e,c)?(s="spaceViolation",d(),void(l=!1)):(s="",l=!0,a={oldLocations:o,newLocations:c},t.setDirection(n),h(e,o),void g(e,c))},getError:()=>s,getPossibleMove:()=>l,getLocationChange:()=>a}})(e,o,n);let i="";const s=(e,t)=>e>=0&&e<10&&t>=0&&t<10,a=(t,r,i)=>{if(!((t,n,o)=>{let r="south"===t.getDirection()?1:0,i="east"===t.getDirection()?1:0;for(let a=0;a<t.getLength();a++){if(!s(n,o))return!1;if(null!=e[n][o])return!1;n+=r,o+=i}return!0})(t,r,i))throw new Error(`Failed to place ship ${t.getID()} at row: ${r}, col: ${i}`);n.push(t),o[t.getID()]=[];let a="south"===t.getDirection()?1:0,l="east"===t.getDirection()?1:0;for(let n=0;n<t.getLength();n++)e[r][i]=t,o[t.getID()].push({row:r,col:i}),r+=a,i+=l};return{placeShip:a,getShipLocation:e=>o[e],receiveAttack:(t,n)=>{i="",e[t][n]?(e[t][n].hit(),i="hit",e[t][n].isSunk()&&(i="sunk")):i="miss"},getOutcome:()=>i,isDefeated:()=>{for(let e of n)if(!e.isSunk())return!1;return!0},initDefaultShips:()=>{let e=t(4,"1","east");a(e,0,4);let n=t(2,"2","south");a(n,0,9);let o=t(2,"3","east");a(o,2,0);let r=t(3,"4","south");a(r,3,4);let i=t(1,"5","south");a(i,3,6);let s=t(3,"6","south");a(s,4,9);let l=t(2,"7","east");a(l,5,0);let c=t(1,"8");a(c,8,0);let u=t(1,"9");a(u,9,5);let d=t(1,"10");a(d,9,9)},getShipGrid:()=>e,getShipArr:()=>n,getShipLocations:()=>o,isShipPresentAt:(t,n)=>null!=e[t][n],moveShip:(e,t)=>{r.moveShip(e,t)},rotateShip:e=>{r.rotateShip(e)},getLocationChange:()=>r.getLocationChange(),getErrorMsg:()=>r.getError(),getPossibleMove:()=>r.getPossibleMove()}},r=()=>{const e=Array(10).fill().map((()=>Array(10).fill(null)));return{isValidAttack:(t,n)=>((e,t)=>e>=0&&e<10&&t>=0&&t<10)(t,n)&&null===e[t][n],recordAttack:(t,n)=>{e[t][n]="hit"}}};var i=n(379),s=n.n(i),a=n(795),l=n.n(a),c=n(569),u=n.n(c),d=n(565),p=n.n(d),A=n(216),h=n.n(A),g=n(589),f=n.n(g),m=n(426),v={};v.styleTagTransform=f(),v.setAttributes=p(),v.insert=u().bind(null,"head"),v.domAPI=l(),v.insertStyleElement=h(),s()(m.Z,v),m.Z&&m.Z.locals&&m.Z.locals,(()=>{let t=(()=>{const e=o(),t=o(),n=r(),i=r();let s="",a="";e.initDefaultShips(),t.initDefaultShips();const l=(e=>{let t=()=>Math.floor(10*Math.random());return{pickTargetSimple:()=>{let n=t(),o=t();for(;!e.isValidAttack(n,o);)console.log(`(${n}, ${o}) is invalid. Rerolling`),n=t(),o=t();return console.log(`AI final target (${n}, ${o})`),{row:n,col:o}}}})(i);return{getShipGrid:()=>e.getShipGrid(),getShipGridWrapper:()=>e,processUserInput:(e,o)=>{n.isValidAttack(e,o)&&(t.receiveAttack(e,o),s=t.getOutcome(),n.recordAttack(e,o))},isAttackableByPlayer:(e,t)=>n.isValidAttack(e,t),winCheckPlayer:()=>t.isDefeated(),winCheckComputer:()=>e.isDefeated(),isShipPresentAt:(n,o,r)=>("computer"===r?t:e).isShipPresentAt(n,o),processComputerAttack:()=>{let t=l.pickTargetSimple();if(i.isValidAttack(t.row,t.col))return e.receiveAttack(t.row,t.col),a=e.getOutcome(),i.recordAttack(t.row,t.col),t;console.log("game master: processComputerAttackError")},getPlayerTurnResult:()=>s,getComputerTurnResult:()=>a,moveShip:(t,n)=>{e.moveShip(t,n)},rotateShip:(t,n)=>{e.rotateShip(t)},getLocationChange:()=>e.getLocationChange(),getErrorMsg:()=>e.getErrorMsg(),getPossibleMove:()=>e.getPossibleMove()}})(),n=e();const i=(e,o,r)=>{if(!t.isAttackableByPlayer(e,o))return;if(((e,t)=>{console.log(e.target);let n=e.target;n.classList.add("animate"),t?n.classList.add("hit"):n.classList.add("miss")})(r,t.isShipPresentAt(r.target.dataset.row,r.target.dataset.col,"computer")),t.processUserInput(e,o),n.updateMsgOne(e,o,t.getPlayerTurnResult()),t.winCheckPlayer())return console.log("player wins"),void n.updateMsgTwo(0,0,"win");let i=t.processComputerAttack();n.markComputerAttack(i.row,i.col),console.log(`Your opponent fires at (${i.row}, ${i.col}) and ${t.getComputerTurnResult()}`),n.updateMsgTwo(i.row,i.col,t.getComputerTurnResult()),t.winCheckComputer()&&(console.log("computer wins"),n.updateMsgTwo(0,0,"loss"))};return{initiate:()=>{n.setUp(t,i)},processUserInput:i,getShipGrid:()=>t.getShipGrid()}})().initiate()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RUFBSzRCLGdCQUNEUixFQUFNL0csT0FBT3FOLFFBQVFySixJQUNyQitDLEVBQU0vRyxPQUFPcU4sUUFBUXBKLElBQ3JCLGFBU1IwQixFQUFLQyxpQkFBaUI1QixFQUFLQyxHQUkzQmlKLEVBQWlCMUYsYUFBYXhELEVBQUtDLEVBQUswQixFQUFLb0gsdUJBRzFDcEgsRUFBS2lILGlCQUlKLE9BRkFsSSxRQUFRQyxJQUFJLG9CQUNadUksRUFBaUJ4RixhQUFhLEVBQUcsRUFBRyxPQU14QyxJQUFJMUgsRUFBUzJGLEVBQUttSCx3QkFHbEJJLEVBQWlCNUYsbUJBQW1CdEgsRUFBT2dFLElBQUtoRSxFQUFPaUUsS0FHdkRTLFFBQVFDLElBQUksMkJBQTJCM0UsRUFBT2dFLFFBQVFoRSxFQUFPaUUsWUFBWTBCLEVBQUtxSCwyQkFDOUVFLEVBQWlCeEYsYUFBYTFILEVBQU9nRSxJQUFLaEUsRUFBT2lFLElBQUswQixFQUFLcUgseUJBR3hEckgsRUFBS2tILHFCQUNKbkksUUFBUUMsSUFBSSxpQkFDWnVJLEVBQWlCeEYsYUFBYSxFQUFHLEVBQUcsUUFDeEMsRUFRSixNQUFPLENBQUU0RixTQUpRLEtBQ2JKLEVBQWlCOUcsTUFBTVQsRUFBTUMsRUFBaUIsRUFHL0JBLG1CQUFrQk0sWUE1RGpCLElBQ1RQLEVBQUtPLGNBMkRrQyxFR3JFbENxSCxHQUNSRCxVIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL3ZpZXdDb250cm9sbGVyLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc2hpcEZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zaGlwR3JpZEZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy90cmFmZmljQ29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2F0dGFja0dyaWRGYWN0b3J5LmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc3R5bGUuY3NzPzcxNjMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy93ZWJzaXRlTWFuYWdlci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2dhbWVNYXN0ZXIuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9jb21wdXRlclRhcmdldGluZy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGBib2R5IHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBsaWdodGdyYXk7XG59XG5cbi5hbmltYXRlIHtcbiAgICAvKiBhbmltYXRpb246IDAuN3Mgc2xpZGUtaW4gMC43cyAzIGxpbmVhcjsgKi9cbiAgICBhbmltYXRpb24tbmFtZTogc2xpZGUtaW47XG4gICAgYW5pbWF0aW9uLWR1cmF0aW9uOiAwLjNzO1xuICAgIGFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6IDM7XG59XG4gIFxuQGtleWZyYW1lcyBzbGlkZS1pbiB7XG4gICAgMCUge1xuICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDAuMjUpO1xuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTEwMDBweCk7XG4gICAgfVxuICAgIDgwJXtcbiAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgwLjI1KTtcbiAgICB9XG4gICAgMTAwJSB7XG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwKTtcbiAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcbiAgICB9XG59XG5cbnRoLCB0ZHtcbiAgICBtYXJnaW46IDA7XG4gICAgcGFkZGluZzogMDtcbiAgICBoZWlnaHQ6IDMycHg7XG4gICAgd2lkdGg6IDMycHg7XG59XG5cbnRkIHtcbiAgICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcbn1cblxuZGl2LmhpdCwgZGl2LnNoaXAge1xuICAgIG1hcmdpbjogMDtcbiAgICBwYWRkaW5nOiAwO1xuICAgIFxuICAgIGhlaWdodDogMTAwJTtcbiAgICB3aWR0aDogMTAwJTtcbn1cblxuZGl2LnNoaXAge1xuICAgIGJhY2tncm91bmQtY29sb3I6IGJsdWU7XG59XG5cbmRpdi5oaXQge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHJlZDtcbn1cblxuZGl2LmhpdC5zaGlwIHtcbiAgICBib3JkZXI6IDVweCBzb2xpZCBibHVlO1xufVxuXG50ZC5zaGlwIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBibHVlO1xufVxuXG50ZC5taXNzLCB0ZC5oaXQge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHJlZDtcbn1cblxudGQuaGl0IHtcbiAgICBib3JkZXI6IDVweCBzb2xpZCBibHVlO1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG59XG5cbnRkLnNlbGVjdGVkIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0dXJxdW9pc2U7XG59YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksMkJBQTJCO0FBQy9COztBQUVBO0lBQ0ksNENBQTRDO0lBQzVDLHdCQUF3QjtJQUN4Qix3QkFBd0I7SUFDeEIsNEJBQTRCO0FBQ2hDOztBQUVBO0lBQ0k7UUFDSSxzQkFBc0I7UUFDdEIsOEJBQThCO0lBQ2xDO0lBQ0E7UUFDSSxzQkFBc0I7SUFDMUI7SUFDQTtRQUNJLHdCQUF3QjtRQUN4QixtQkFBbUI7SUFDdkI7QUFDSjs7QUFFQTtJQUNJLFNBQVM7SUFDVCxVQUFVO0lBQ1YsWUFBWTtJQUNaLFdBQVc7QUFDZjs7QUFFQTtJQUNJLHVCQUF1QjtBQUMzQjs7QUFFQTtJQUNJLFNBQVM7SUFDVCxVQUFVOztJQUVWLFlBQVk7SUFDWixXQUFXO0FBQ2Y7O0FBRUE7SUFDSSxzQkFBc0I7QUFDMUI7O0FBRUE7SUFDSSxxQkFBcUI7QUFDekI7O0FBRUE7SUFDSSxzQkFBc0I7QUFDMUI7O0FBRUE7SUFDSSxzQkFBc0I7QUFDMUI7O0FBRUE7SUFDSSxxQkFBcUI7QUFDekI7O0FBRUE7SUFDSSxzQkFBc0I7SUFDdEIsc0JBQXNCO0FBQzFCOztBQUVBO0lBQ0ksMkJBQTJCO0FBQy9CXCIsXCJzb3VyY2VzQ29udGVudFwiOltcImJvZHkge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBsaWdodGdyYXk7XFxufVxcblxcbi5hbmltYXRlIHtcXG4gICAgLyogYW5pbWF0aW9uOiAwLjdzIHNsaWRlLWluIDAuN3MgMyBsaW5lYXI7ICovXFxuICAgIGFuaW1hdGlvbi1uYW1lOiBzbGlkZS1pbjtcXG4gICAgYW5pbWF0aW9uLWR1cmF0aW9uOiAwLjNzO1xcbiAgICBhbmltYXRpb24taXRlcmF0aW9uLWNvdW50OiAzO1xcbn1cXG4gIFxcbkBrZXlmcmFtZXMgc2xpZGUtaW4ge1xcbiAgICAwJSB7XFxuICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDAuMjUpO1xcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0xMDAwcHgpO1xcbiAgICB9XFxuICAgIDgwJXtcXG4gICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMC4yNSk7XFxuICAgIH1cXG4gICAgMTAwJSB7XFxuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMCk7XFxuICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEpO1xcbiAgICB9XFxufVxcblxcbnRoLCB0ZHtcXG4gICAgbWFyZ2luOiAwO1xcbiAgICBwYWRkaW5nOiAwO1xcbiAgICBoZWlnaHQ6IDMycHg7XFxuICAgIHdpZHRoOiAzMnB4O1xcbn1cXG5cXG50ZCB7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xcbn1cXG5cXG5kaXYuaGl0LCBkaXYuc2hpcCB7XFxuICAgIG1hcmdpbjogMDtcXG4gICAgcGFkZGluZzogMDtcXG4gICAgXFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgd2lkdGg6IDEwMCU7XFxufVxcblxcbmRpdi5zaGlwIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogYmx1ZTtcXG59XFxuXFxuZGl2LmhpdCB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJlZDtcXG59XFxuXFxuZGl2LmhpdC5zaGlwIHtcXG4gICAgYm9yZGVyOiA1cHggc29saWQgYmx1ZTtcXG59XFxuXFxudGQuc2hpcCB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IGJsdWU7XFxufVxcblxcbnRkLm1pc3MsIHRkLmhpdCB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJlZDtcXG59XFxuXFxudGQuaGl0IHtcXG4gICAgYm9yZGVyOiA1cHggc29saWQgYmx1ZTtcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuXFxudGQuc2VsZWN0ZWQge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0dXJxdW9pc2U7XFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTtcblxuICAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG5cbiAgICAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cbiAgY3NzICs9IG9iai5jc3M7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH1cblxuICAvLyBGb3Igb2xkIElFXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoKSB7fSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5uYyA9IHVuZGVmaW5lZDsiLCJjb25zdCBkaXNwbGF5U2hpcHMgPSAoc2hpcEdyaWQsIHRhYmxlKSA9PiB7XG4gICAgZm9yKGxldCByb3cgPSAwOyByb3cgPCAxMDsgcm93Kyspe1xuICAgICAgICBmb3IobGV0IGNvbCA9IDA7IGNvbCA8IDEwOyBjb2wrKyl7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKHNoaXBHcmlkW3Jvd11bY29sXSk7XG4gICAgICAgICAgICBpZihzaGlwR3JpZFtyb3ddW2NvbF0pe1xuICAgICAgICAgICAgICAgIGxldCB0YWJsZVJvdyA9IHRhYmxlLmNoaWxkcmVuW3JvdyArIDFdO1xuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ2hlbGxvJyk7XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyh0YWJsZVJvdyk7XG4gICAgICAgICAgICAgICAgbGV0IGNlbGwgPSB0YWJsZVJvdy5jaGlsZHJlbltjb2wgKyAxXTtcbiAgICAgICAgICAgICAgICAvL2NlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZChcInNoaXBcIilcbiAgICAgICAgICAgICAgICAvL215RGl2LnRleHRDb250ZW50ID0gXCJzXCI7XG4gICAgICAgICAgICAgICAgLy9jZWxsLnRleHRDb250ZW50ID0gXCJhc2RmYXNcIjtcbiAgICAgICAgICAgICAgICAvL2NlbGwuYXBwZW5kQ2hpbGQobXlEaXYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5jb25zdCBtYWtlQXR0YWNrR3JpZENsaWNrYWJsZSA9ICh0Ym9keSwgcHJvY2Vzc1VzZXJJbnB1dCkgPT4ge1xuICBmb3IobGV0IHJvdyA9IDA7IHJvdyA8IDEwOyByb3crKyl7XG4gICAgICBmb3IobGV0IGNvbCA9IDA7IGNvbCA8IDEwOyBjb2wrKyl7XG4gICAgICAgICAgbGV0IHRhYmxlUm93ID0gdGJvZHkuY2hpbGRyZW5bcm93ICsgMV07XG4gICAgICAgICAgbGV0IGNlbGwgPSB0YWJsZVJvdy5jaGlsZHJlbltjb2wgKyAxXTtcbiAgICAgICAgICBjZWxsLm9uY2xpY2sgPSAoY2xpY2spID0+IHtcbiAgICAgICAgICAgIHByb2Nlc3NVc2VySW5wdXQocm93LCBjb2wsIGNsaWNrKTtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coYG1hcmtpbmcgdGhpcyBmcm9tIG9uY2xpY2sgJHt0aGlzfWApO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgfVxufVxuXG5jb25zdCBtYXJrQXR0YWNrID0gKGNsaWNrLCBzaGlwUHJlc2VudCkgPT4ge1xuICBjb25zb2xlLmxvZyhjbGljay50YXJnZXQpO1xuICBsZXQgbXlURCA9IGNsaWNrLnRhcmdldDtcbiAgLyogbGV0IG15RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7ICovXG4gIG15VEQuY2xhc3NMaXN0LmFkZCgnYW5pbWF0ZScpO1xuICBpZihzaGlwUHJlc2VudCl7XG4gICAgbXlURC5jbGFzc0xpc3QuYWRkKCdoaXQnKTtcbiAgfSBlbHNlIHtcbiAgICBteVRELmNsYXNzTGlzdC5hZGQoJ21pc3MnKTtcbiAgfVxuICAvKiBjbGljay50YXJnZXQuYXBwZW5kQ2hpbGQobXlEaXYpOyAqL1xufVxuXG5jb25zdCB2aWV3Q29udHJvbGxlciA9ICgpID0+IHtcbiAgbGV0IHNoaXBUQm9keTtcbiAgbGV0IGF0dGFja0dyaWQ7XG4gIGxldCBlcnJvck1lc3NhZ2U7XG4gIGxldCBtc2dPbmU7XG4gIGxldCBtc2dUd287XG4gIGxldCBzaGlwU2VsZWN0b3I7XG4gIGxldCBidXR0b25TdWl0ZTtcbiAgbGV0IGdhbWVNYXN0ZXI7XG5cbiAgY29uc3QgY2xlYXJFeGlzdGluZ0hpZ2hsaWdodHMgPSAoKSA9PiB7XG4gICAgZm9yKGxldCByb3cgPSAwOyByb3cgPCAxMDsgcm93Kyspe1xuICAgICAgZm9yKGxldCBjb2wgPSAwOyBjb2wgPCAxMDsgY29sKyspe1xuICAgICAgICBnZXRUYWJsZUNlbGwocm93LCBjb2wpLmNsYXNzTGlzdC5yZW1vdmUoJ3NlbGVjdGVkJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY29uc3QgY3JlYXRlSGlnaGxpZ2h0aW5nID0gKHNoaXBHcmlkV3JhcHBlcikgPT4ge1xuICAgIHNoaXBTZWxlY3Rvci5vbmNoYW5nZSA9IChldmVudCkgPT4ge1xuICAgICAgY2xlYXJFeGlzdGluZ0hpZ2hsaWdodHMoKTtcblxuXG4gICAgICBsZXQgc2hpcElEID0gc2hpcFNlbGVjdG9yLnZhbHVlO1xuICAgICAgbGV0IGNvb3JkaW5hdGVzID0gc2hpcEdyaWRXcmFwcGVyLmdldFNoaXBMb2NhdGlvbihzaGlwSUQpO1xuICAgICAgZm9yKGxldCBjb29yZCBvZiBjb29yZGluYXRlcyl7XG4gICAgICAgIGNvbnNvbGUubG9nKCdjb29yZHM6Jyk7XG4gICAgICAgIGNvbnNvbGUubG9nKGNvb3JkKTsvLy8vLy8vLy9cbiAgICAgICAgbGV0IG15VEQgPSBnZXRUYWJsZUNlbGwoY29vcmQucm93LCBjb29yZC5jb2wpO1xuICAgICAgICBjb25zb2xlLmxvZygnbXlURCcpO1xuICAgICAgICBjb25zb2xlLmxvZyhteVREKTsvLy8vLy8vLy9cbiAgICAgICAgbXlURC5jbGFzc0xpc3QuYWRkKCdzZWxlY3RlZCcpXG4gICAgICB9XG4gICAgICBnZXRUYWJsZUNlbGxcbiAgICB9XG4gIH1cblxuICBjb25zdCBsb2FkQnV0dG9uRnVuY3Rpb25hbGl0eSA9IChwcm9jZXNzVXNlcklucHV0LCBzaGlwR3JpZCkgPT4ge1xuICAgIGJ1dHRvblN1aXRlLnN0YXJ0Lm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgICBtYWtlQXR0YWNrR3JpZENsaWNrYWJsZShhdHRhY2tHcmlkLCBwcm9jZXNzVXNlcklucHV0KTtcbiAgICAgIGRpc2FibGVNb3ZlbWVudEJ0bnMoKTtcbiAgICB9XG4gICAgY3JlYXRlSGlnaGxpZ2h0aW5nKHNoaXBHcmlkKTtcbiAgfVxuXG4gIGNvbnN0IHVwZGF0ZVNoaXBWaWV3ID0gKCkgPT4ge1xuXG4gICAgaWYoIWdhbWVNYXN0ZXIuZ2V0UG9zc2libGVNb3ZlKCkpe1xuICAgICAgY29uc29sZS5sb2coJ25vIG1vdmUgZXhlY3R1ZWQtIGV4aXRpbmcgb3V0IG9mIHVwZGF0ZSBzaGlwIHZpZXcnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IGxvY2F0aW9uQ2hhbmdlID0gZ2FtZU1hc3Rlci5nZXRMb2NhdGlvbkNoYW5nZSgpO1xuICAgIGNvbnNvbGUubG9nKCdtYXJrZXI6IHZpZXcgY29udHJvbGxlciwgdXBkYXRlIHNoaXAgdmlldycpO1xuICAgIGNvbnNvbGUubG9nKGxvY2F0aW9uQ2hhbmdlKTtcbiAgICBmb3IobGV0IGxvY2F0aW9uIG9mIGxvY2F0aW9uQ2hhbmdlLm9sZExvY2F0aW9ucyl7XG4gICAgICBsZXQgY2VsbCA9IGdldFRhYmxlQ2VsbChsb2NhdGlvbi5yb3csIGxvY2F0aW9uLmNvbCk7XG4gICAgICBjZWxsLmNsYXNzTGlzdC5yZW1vdmUoJ3NoaXAnKTtcbiAgICAgIGNlbGwuY2xhc3NMaXN0LnJlbW92ZSgnc2VsZWN0ZWQnKTtcbiAgICB9XG4gICAgXG4gICAgZm9yKGxldCBsb2NhdGlvbiBvZiBsb2NhdGlvbkNoYW5nZS5uZXdMb2NhdGlvbnMpe1xuICAgICAgbGV0IGNlbGwgPSBnZXRUYWJsZUNlbGwobG9jYXRpb24ucm93LCBsb2NhdGlvbi5jb2wpO1xuICAgICAgY2VsbC5jbGFzc0xpc3QuYWRkKCdzaGlwJyk7XG4gICAgICBjZWxsLmNsYXNzTGlzdC5hZGQoJ3NlbGVjdGVkJyk7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgdXBkYXRlRXJyb3JNc2cgPSAoKSA9PiB7XG4gICAgbGV0IGVycm9yQ29kZSA9IGdhbWVNYXN0ZXIuZ2V0RXJyb3JNc2coKTtcbiAgICBjb25zb2xlLmxvZyhlcnJvckNvZGUpO1xuICAgIGlmKGVycm9yQ29kZSA9PT0gJ291dE9mQm91bmRzJyl7XG4gICAgICBlcnJvck1lc3NhZ2UudGV4dENvbnRlbnQgPSAnQ2Fubm90IG1vdmUgc2hpcHMgb3V0IG9mIGJvdW5kcy4nO1xuICAgIH0gZWxzZSBpZihlcnJvckNvZGUgPT09ICdzcGFjZVZpb2xhdGlvbicpe1xuICAgICAgZXJyb3JNZXNzYWdlLnRleHRDb250ZW50ID0gJ0Nhbm5vdCBtb3ZlIHNoaXBzIHRvIGNsb3NlLiBBIG1pbmltdW0gb2Ygb25lIGVtcHR5IHNwYWNlIGJldHdlZW4gc2hpcHMgaXMgcmVxdWlyZWQuJztcbiAgICB9IGVsc2Uge1xuICAgICAgZXJyb3JNZXNzYWdlLnRleHRDb250ZW50ID0gJyc7XG4gICAgfVxuICAgIFxuICB9XG5cbiAgY29uc3QgbG9hZE1vdmVtZW50QnV0dG9uRnVuY3Rpb25hbGl0eSA9ICgpID0+IHtcbiAgICBidXR0b25TdWl0ZS51cC5vbmNsaWNrID0gKCkgPT4ge1xuICAgICAgZ2FtZU1hc3Rlci5tb3ZlU2hpcChzaGlwU2VsZWN0b3IudmFsdWUsICd1cCcpO1xuICAgICAgdXBkYXRlU2hpcFZpZXcoKTtcbiAgICAgIHVwZGF0ZUVycm9yTXNnKCk7XG4gICAgfVxuICAgIGJ1dHRvblN1aXRlLmRvd24ub25jbGljayA9ICgpID0+IHtcbiAgICAgIGdhbWVNYXN0ZXIubW92ZVNoaXAoc2hpcFNlbGVjdG9yLnZhbHVlLCAnZG93bicpO1xuICAgICAgdXBkYXRlU2hpcFZpZXcoKTtcbiAgICAgIHVwZGF0ZUVycm9yTXNnKCk7XG4gICAgfVxuICAgIGJ1dHRvblN1aXRlLnJpZ2h0Lm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgICBnYW1lTWFzdGVyLm1vdmVTaGlwKHNoaXBTZWxlY3Rvci52YWx1ZSwgJ3JpZ2h0Jyk7XG4gICAgICB1cGRhdGVTaGlwVmlldygpO1xuICAgICAgdXBkYXRlRXJyb3JNc2coKTtcbiAgICB9XG4gICAgYnV0dG9uU3VpdGUubGVmdC5vbmNsaWNrID0gKCkgPT4ge1xuICAgICAgZ2FtZU1hc3Rlci5tb3ZlU2hpcChzaGlwU2VsZWN0b3IudmFsdWUsICdsZWZ0Jyk7XG4gICAgICB1cGRhdGVTaGlwVmlldygpO1xuICAgICAgdXBkYXRlRXJyb3JNc2coKTtcbiAgICB9XG4gICAgYnV0dG9uU3VpdGUucm90YXRlLm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgICBnYW1lTWFzdGVyLnJvdGF0ZVNoaXAoc2hpcFNlbGVjdG9yLnZhbHVlKTtcbiAgICAgIHVwZGF0ZVNoaXBWaWV3KCk7XG4gICAgICB1cGRhdGVFcnJvck1zZygpO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGxvYWRCdXR0b25TdWl0ZSA9ICgpID0+IHtcbiAgICBidXR0b25TdWl0ZSA9IHt9O1xuICAgIGJ1dHRvblN1aXRlLnVwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnVwJyk7XG4gICAgYnV0dG9uU3VpdGUubGVmdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5sZWZ0Jyk7XG4gICAgYnV0dG9uU3VpdGUuZG93biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5kb3duJyk7XG4gICAgYnV0dG9uU3VpdGUucmlnaHQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucmlnaHQnKTtcbiAgICBidXR0b25TdWl0ZS5yb3RhdGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucm90YXRlJyk7XG4gICAgYnV0dG9uU3VpdGUucmFuZG9taXplID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnJhbmRvbWl6ZScpO1xuICAgIGJ1dHRvblN1aXRlLnN0YXJ0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnN0YXJ0Jyk7XG4gIH1cblxuICBjb25zdCBsb2FkRWxlbWVudHMgPSAoKSA9PiB7XG4gICAgc2hpcFRCb2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNoaXBHcmlkJyk7XG4gICAgYXR0YWNrR3JpZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hdHRhY2tHcmlkJyk7XG4gICAgZXJyb3JNZXNzYWdlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmVycm9yVGV4dCcpO1xuICAgIG1zZ09uZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tc2dPbmUnKTtcbiAgICBtc2dUd28gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubXNnVHdvJyk7XG4gICAgc2hpcFNlbGVjdG9yID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3NoaXAtc2VsZWN0b3InKTtcbiAgICBsb2FkQnV0dG9uU3VpdGUoKTtcbiAgICBjcmVhdGVIaWdobGlnaHRpbmcoKTtcbiAgfVxuXG4gIGNvbnN0IGxvYWRHYW1lTWFzdGVyID0gKGdhbWUpID0+IHtcbiAgICBnYW1lTWFzdGVyID0gZ2FtZTtcbiAgfVxuXG4gIGNvbnN0IHVwZGF0ZU1zZ09uZSA9IChyb3csIGNvbCwgcmVzdWx0KSA9PiB7XG4gICAgbGV0IG1zZztcbiAgICBpZihyZXN1bHQgPT09ICdtaXNzJyl7XG4gICAgICBtc2cgPSBgWW91IGZpcmUgYXQgKCR7cm93fSwgJHtjb2x9KSBidXQgaGl0IG5vdGhpbmcuYDtcbiAgICB9IGVsc2UgaWYgKHJlc3VsdCA9PT0gJ2hpdCcpe1xuICAgICAgbXNnID0gYFlvdSBmaXJlIGF0ICgke3Jvd30sICR7Y29sfSkgYW5kIHNjb3JlIGEgaGl0LmA7XG4gICAgfSBlbHNlIGlmIChyZXN1bHQgPT09ICdzdW5rJyl7XG4gICAgICBtc2cgPSBgWW91IGZpcmUgYXQgKCR7cm93fSwgJHtjb2x9KSwgc2NvcmUgYSBoaXQsIGFuZCBzaW5rIGEgc2hpcC5gO1xuICAgIH0gZWxzZSBpZiAocmVzdWx0ID09PSAnbG9zcycpe1xuICAgICAgbXNnID0gYFlvdXIgb3Bwb25lbnQgaGFzIHN1bmsgYWxsIHlvdXIgc2hpcHMuIFlvdSBsb3NlIHRoZSBtYXRjaC5gO1xuICAgIH1cbiAgICBtc2dPbmUudGV4dENvbnRlbnQgPSBtc2c7XG4gIH1cblxuICBjb25zdCB1cGRhdGVNc2dUd28gPSAocm93LCBjb2wsIHJlc3VsdCkgPT4ge1xuICAgIGxldCBtc2c7XG4gICAgaWYocmVzdWx0ID09PSAnbWlzcycpe1xuICAgICAgbXNnID0gYFlvdXIgb3Bwb25lbnQgZmlyZXMgYXQgKCR7cm93fSwgJHtjb2x9KSBidXQgaGl0cyBub3RoaW5nLmA7XG4gICAgfSBlbHNlIGlmIChyZXN1bHQgPT09ICdoaXQnKXtcbiAgICAgIG1zZyA9IGBZb3VyIG9wcG9uZW50IGZpcmVzIGF0ICgke3Jvd30sICR7Y29sfSkgYW5kIHNjb3JlcyBhIGhpdC5gO1xuICAgIH0gZWxzZSBpZiAocmVzdWx0ID09PSAnc3Vuaycpe1xuICAgICAgbXNnID0gYFlvdXIgb3Bwb25lbnQgZmlyZXMgYXQgKCR7cm93fSwgJHtjb2x9KSwgc2NvcmVzIGEgaGl0LCBhbmQgc2lua3MgYSBzaGlwLmA7XG4gICAgfSBlbHNlIGlmIChyZXN1bHQgPT09ICd3aW4nKXtcbiAgICAgIG1zZyA9IGBZb3UgaGF2ZSBzdW5rIGFsbCB5b3VyIG9wcG9uZW50J3Mgc2hpcHMgYW5kIHdvbiFgO1xuICAgIH1cbiAgICBtc2dUd28udGV4dENvbnRlbnQgPSBtc2c7XG4gIH1cblxuICBjb25zdCBzZXRVcE1haW4gPSAoY29udGFpbmVyLCBnYW1lLCBwcm9jZXNzVXNlcklucHV0KSA9PiB7XG4gICAgLyogc2hpcFRCb2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNoaXBHcmlkJyk7XG4gICAgYXR0YWNrR3JpZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hdHRhY2tHcmlkJyk7ICovXG4gICAgZGlzcGxheVNoaXBzKGdhbWUuZ2V0U2hpcEdyaWQoKSwgc2hpcFRCb2R5KVxuICAgIC8qIG1ha2VBdHRhY2tHcmlkQ2xpY2thYmxlKGF0dGFja0dyaWQsIHByb2Nlc3NVc2VySW5wdXQpOyAqL1xuICB9XG5cbiAgY29uc3Qgc2V0VXBWaWV3ID0gKGdhbWUsIHByb2Nlc3NVc2VySW5wdXQpID0+IHtcbiAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2NvbnRlbnRcIik7XG4gICAgXG4gICAgc2V0VXBNYWluKGNvbnRhaW5lciwgZ2FtZSwgcHJvY2Vzc1VzZXJJbnB1dCk7XG4gIH1cblxuICBjb25zdCBzZXRVcCA9IChnYW1lLCBwcm9jZXNzVXNlcklucHV0KSA9PiB7XG4gICAgbG9hZEVsZW1lbnRzKCk7XG4gICAgbG9hZEdhbWVNYXN0ZXIoZ2FtZSk7XG4gICAgbG9hZEJ1dHRvbkZ1bmN0aW9uYWxpdHkocHJvY2Vzc1VzZXJJbnB1dCwgZ2FtZS5nZXRTaGlwR3JpZFdyYXBwZXIoKSk7XG4gICAgbG9hZE1vdmVtZW50QnV0dG9uRnVuY3Rpb25hbGl0eSgpO1xuICAgIHNldFVwVmlldyhnYW1lLCBwcm9jZXNzVXNlcklucHV0KTtcbiAgfVxuICBjb25zdCBnZXRUYWJsZUNlbGwgPSAocm93LCBjb2wpID0+IHtcbiAgICBsZXQgdGFibGVSb3cgPSBzaGlwVEJvZHkuY2hpbGRyZW5bcm93ICsgMV07XG4gICAgbGV0IGNlbGwgPSB0YWJsZVJvdy5jaGlsZHJlbltjb2wgKyAxXTtcbiAgICByZXR1cm4gY2VsbDtcbiAgfVxuICBjb25zdCBtYXJrQ29tcHV0ZXJBdHRhY2sgPSAocm93LCBjb2wpID0+IHtcbiAgICBsZXQgbXlURCA9IGdldFRhYmxlQ2VsbChyb3csIGNvbCk7XG5cbiAgICBpZihnYW1lTWFzdGVyLmlzU2hpcFByZXNlbnRBdChyb3csIGNvbCwgJ3BsYXllcicpKXtcbiAgICAgIG15VEQuY2xhc3NMaXN0LmFkZCgnaGl0Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG15VEQuY2xhc3NMaXN0LmFkZCgnbWlzcycpO1xuICAgIH1cbiAgICBteVRELmNsYXNzTGlzdC5hZGQoJ2FuaW1hdGUnKVxuICB9XG5cbiAgcmV0dXJuIHsgXG4gICAgc2V0VXAsIFxuICAgIHNldFVwVmlldywgXG4gICAgbWFya0NvbXB1dGVyQXR0YWNrLCBcbiAgICB1cGRhdGVNc2dPbmUsIFxuICAgIHVwZGF0ZU1zZ1R3byxcbiAgICB1cGRhdGVTaGlwVmlld1xuICAgfTtcbn1cblxuZXhwb3J0IHsgXG4gICAgdmlld0NvbnRyb2xsZXIsXG4gICAgbWFya0F0dGFjayxcbn07XG4iLCJjb25zdCBzaGlwRmFjdG9yeSA9IChsZW4sIHNoaXBJRCA9J25vSUQnLCBkaXIgPSAnc291dGgnKSA9PiB7XG4gICAgY29uc3QgaWQgPSBzaGlwSUQ7XG4gICAgY29uc3QgbGVuZ3RoID0gbGVuO1xuICAgIGxldCBkaXJlY3Rpb24gPSBkaXI7XG4gICAgbGV0IGhpdHNTdXN0YWluZWQgPSAwO1xuICAgIGxldCBzdW5rID0gZmFsc2U7XG5cbiAgICBjb25zdCBnZXRIaXRzU3VzdGFpbmVkID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gaGl0c1N1c3RhaW5lZDtcbiAgICB9XG4gICAgY29uc3QgaGl0ID0gKCkgPT4ge1xuICAgICAgICAvL2NvbnNvbGUubG9nKCdoaXQnKTtcbiAgICAgICAgaGl0c1N1c3RhaW5lZCsrO1xuICAgICAgICBpZihoaXRzU3VzdGFpbmVkID09PSBsZW5ndGgpe1xuICAgICAgICAgICAgc3VuayA9IHRydWU7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdzdW5rJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3Qgc2V0RGlyZWN0aW9uID0gKG5ld0RpcmVjdGlvbikgPT4ge1xuICAgICAgICBkaXJlY3Rpb24gPSBuZXdEaXJlY3Rpb247XG4gICAgfVxuICAgIGNvbnN0IGlzU3VuayA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHN1bms7XG4gICAgfVxuICAgIGNvbnN0IGdldExlbmd0aCA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICB9XG4gICAgY29uc3QgZ2V0RGlyZWN0aW9uID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gZGlyZWN0aW9uO1xuICAgIH1cbiAgICBjb25zdCBnZXRJRCA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIGlkO1xuICAgIH1cbiAgICByZXR1cm4geyBcbiAgICAgICAgZ2V0SGl0c1N1c3RhaW5lZCxcbiAgICAgICAgaGl0LFxuICAgICAgICBzZXREaXJlY3Rpb24sXG4gICAgICAgIGlzU3VuayxcbiAgICAgICAgZ2V0TGVuZ3RoLFxuICAgICAgICBnZXREaXJlY3Rpb24sXG4gICAgICAgIGdldElEIFxuICAgIH07XG59XG5cbmV4cG9ydCB7XG4gICAgc2hpcEZhY3Rvcnlcbn0iLCJpbXBvcnQge1xuICAgIHNoaXBGYWN0b3J5XG59IGZyb20gJy4vc2hpcEZhY3RvcnknO1xuaW1wb3J0IHtcbiAgICB0cmFmZmljQ29udHJvbGxlckZhY3Rvcnlcbn0gZnJvbSAnLi90cmFmZmljQ29udHJvbGxlcic7XG5cbmNvbnN0IHNoaXBHcmlkRmFjdG9yeSA9ICgpID0+IHtcbiAgICBjb25zdCBzaGlwR3JpZCA9IEFycmF5KDEwKS5maWxsKCkubWFwKCgpID0+IEFycmF5KDEwKS5maWxsKG51bGwpKTtcbiAgICBjb25zdCBzaGlwQXJyID0gW107XG4gICAgY29uc3Qgc2hpcExvY2F0aW9ucyA9IHt9O1xuICAgIGNvbnN0IHRyYWZmaWNDb250cm9sbGVyID0gdHJhZmZpY0NvbnRyb2xsZXJGYWN0b3J5KHNoaXBHcmlkLCBzaGlwTG9jYXRpb25zLCBzaGlwQXJyKTtcbiAgICBsZXQgb3V0Y29tZSA9ICcnO1xuXG4gICAgY29uc3QgaW5Cb3VuZHMgPSAocm93LCBjb2wpID0+IHtcbiAgICAgICAgcmV0dXJuIHJvdyA+PSAwICYmIHJvdyA8IDEwICYmIGNvbCA+PSAwICYmIGNvbCA8IDEwO1xuICAgIH1cbiAgICBcbiAgICBjb25zdCBpc1ZhbGlkU2hpcFBsYWNlbWVudCA9IChzaGlwLCByb3csIGNvbCkgPT4ge1xuICAgICAgICBsZXQgcm93TW9kID0gc2hpcC5nZXREaXJlY3Rpb24oKSA9PT0gJ3NvdXRoJyA/IDEgOiAwO1xuICAgICAgICBsZXQgY29sTW9kID0gc2hpcC5nZXREaXJlY3Rpb24oKSA9PT0gJ2Vhc3QnID8gMSA6IDA7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBzaGlwLmdldExlbmd0aCgpOyBpKyspe1xuICAgICAgICAgICAgaWYoIWluQm91bmRzKHJvdywgY29sKSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNoaXBHcmlkW3Jvd11bY29sXSAhPSBudWxsKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByb3cgPSByb3cgKyAocm93TW9kKTtcbiAgICAgICAgICAgIGNvbCA9IGNvbCArIChjb2xNb2QpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBcbiAgICBjb25zdCBwbGFjZVNoaXAgPSAoc2hpcCwgcm93LCBjb2wpID0+IHtcblxuICAgICAgICBpZighaXNWYWxpZFNoaXBQbGFjZW1lbnQoc2hpcCwgcm93LCBjb2wpKXtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIHBsYWNlIHNoaXAgJHtzaGlwLmdldElEKCl9IGF0IHJvdzogJHtyb3d9LCBjb2w6ICR7Y29sfWApO1xuICAgICAgICB9XG5cbiAgICAgICAgc2hpcEFyci5wdXNoKHNoaXApO1xuICAgICAgICBzaGlwTG9jYXRpb25zW3NoaXAuZ2V0SUQoKV0gPSBbXTtcblxuICAgICAgICBsZXQgcm93TW9kID0gc2hpcC5nZXREaXJlY3Rpb24oKSA9PT0gJ3NvdXRoJyA/IDEgOiAwO1xuICAgICAgICBsZXQgY29sTW9kID0gc2hpcC5nZXREaXJlY3Rpb24oKSA9PT0gJ2Vhc3QnID8gMSA6IDA7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBzaGlwLmdldExlbmd0aCgpOyBpKyspe1xuICAgICAgICAgICAgc2hpcEdyaWRbcm93XVtjb2xdID0gc2hpcDtcbiAgICAgICAgICAgIHNoaXBMb2NhdGlvbnNbc2hpcC5nZXRJRCgpXS5wdXNoKHtyb3csIGNvbH0pO1xuICAgICAgICAgICAgcm93ID0gcm93ICsgKHJvd01vZCk7XG4gICAgICAgICAgICBjb2wgPSBjb2wgKyAoY29sTW9kKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBjb25zdCBnZXRTaGlwTG9jYXRpb24gPSAoc2hpcElEKSA9PiB7XG4gICAgICAgIHJldHVybiBzaGlwTG9jYXRpb25zW3NoaXBJRF07XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IHJlY2VpdmVBdHRhY2sgPSAocm93LCBjb2wpID0+IHtcbiAgICAgICAgb3V0Y29tZSA9ICcnO1xuICAgICAgICBpZihzaGlwR3JpZFtyb3ddW2NvbF0pe1xuICAgICAgICAgICAgc2hpcEdyaWRbcm93XVtjb2xdLmhpdCgpO1xuICAgICAgICAgICAgb3V0Y29tZSA9ICdoaXQnO1xuICAgICAgICAgICAgaWYoc2hpcEdyaWRbcm93XVtjb2xdLmlzU3VuaygpKXtcbiAgICAgICAgICAgICAgICBvdXRjb21lID0gJ3N1bmsnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3V0Y29tZSA9ICdtaXNzJ1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgZ2V0T3V0Y29tZSA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIG91dGNvbWU7XG4gICAgfVxuXG4gICAgY29uc3QgaXNEZWZlYXRlZCA9ICgpID0+IHtcbiAgICAgICAgZm9yKGxldCBzaGlwIG9mIHNoaXBBcnIpe1xuICAgICAgICAgICAgaWYoIXNoaXAuaXNTdW5rKCkpe1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBjb25zdCBpbml0RGVmYXVsdFNoaXBzID0gKCkgPT4ge1xuICAgICAgICBsZXQgc2hpcF8xID0gc2hpcEZhY3RvcnkoIDQsJzEnLCAnZWFzdCcpO1xuICAgICAgICBwbGFjZVNoaXAoc2hpcF8xLCAwLCA0KTtcbiAgICAgICAgLy9zaGlwQXJyLnB1c2goc2hpcF8xKTtcblxuICAgICAgICBsZXQgc2hpcF8yID0gc2hpcEZhY3RvcnkoIDIsJzInLCAnc291dGgnKTtcbiAgICAgICAgcGxhY2VTaGlwKHNoaXBfMiwgMCwgOSk7XG4gICAgICAgIC8vc2hpcEFyci5wdXNoKHNoaXBfMik7XG5cbiAgICAgICAgbGV0IHNoaXBfMyA9IHNoaXBGYWN0b3J5KCAyLCczJywgJ2Vhc3QnKTtcbiAgICAgICAgcGxhY2VTaGlwKHNoaXBfMywgMiwgMCk7XG4gICAgICAgIC8vc2hpcEFyci5wdXNoKHNoaXBfMyk7XG5cbiAgICAgICAgbGV0IHNoaXBfNCA9IHNoaXBGYWN0b3J5KCAzLCc0JywgJ3NvdXRoJyk7XG4gICAgICAgIHBsYWNlU2hpcChzaGlwXzQsIDMsIDQpO1xuICAgICAgICAvL3NoaXBBcnIucHVzaChzaGlwXzQpO1xuXG4gICAgICAgIGxldCBzaGlwXzUgPSBzaGlwRmFjdG9yeSggMSwnNScsICdzb3V0aCcpO1xuICAgICAgICBwbGFjZVNoaXAoc2hpcF81LCAzLCA2KTtcbiAgICAgICAgLy9zaGlwQXJyLnB1c2goc2hpcF81KTtcblxuICAgICAgICBsZXQgc2hpcF82ID0gc2hpcEZhY3RvcnkoIDMsJzYnLCAnc291dGgnKTtcbiAgICAgICAgcGxhY2VTaGlwKHNoaXBfNiwgNCwgOSk7XG4gICAgICAgIC8vc2hpcEFyci5wdXNoKHNoaXBfNik7XG5cbiAgICAgICAgbGV0IHNoaXBfNyA9IHNoaXBGYWN0b3J5KCAyLCc3JywgJ2Vhc3QnKTtcbiAgICAgICAgcGxhY2VTaGlwKHNoaXBfNywgNSwgMCk7XG4gICAgICAgIC8vc2hpcEFyci5wdXNoKHNoaXBfNyk7XG5cbiAgICAgICAgbGV0IHNoaXBfOCA9IHNoaXBGYWN0b3J5KDEsICc4Jyk7XG4gICAgICAgIHBsYWNlU2hpcChzaGlwXzgsIDgsIDApO1xuICAgICAgICAvL3NoaXBBcnIucHVzaChzaGlwXzgpO1xuXG4gICAgICAgIGxldCBzaGlwXzkgPSBzaGlwRmFjdG9yeSgxLCAnOScpO1xuICAgICAgICBwbGFjZVNoaXAoc2hpcF85LCA5LCA1KTtcbiAgICAgICAgLy9zaGlwQXJyLnB1c2goc2hpcF85KTtcblxuICAgICAgICBsZXQgc2hpcF8xMCA9IHNoaXBGYWN0b3J5KDEsICcxMCcpO1xuICAgICAgICBwbGFjZVNoaXAoc2hpcF8xMCwgOSwgOSk7XG4gICAgICAgIC8vc2hpcEFyci5wdXNoKHNoaXBfMTApO1xuICAgIH1cbiAgICBcbiAgICBjb25zdCBnZXRTaGlwR3JpZCA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHNoaXBHcmlkO1xuICAgIH1cblxuICAgIGNvbnN0IGdldFNoaXBBcnIgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBzaGlwQXJyO1xuICAgIH1cblxuICAgIGNvbnN0IGdldFNoaXBMb2NhdGlvbnMgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBzaGlwTG9jYXRpb25zO1xuICAgIH1cbiAgICBcbiAgICBjb25zdCBpc1NoaXBQcmVzZW50QXQgPSAocm93LCBjb2wpID0+IHtcbiAgICAgICAgcmV0dXJuIHNoaXBHcmlkW3Jvd11bY29sXSAhPSBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IG1vdmVTaGlwID0gKHNoaXBJRCwgZGlyZWN0aW9uKSA9PiB7XG4gICAgICAgIHRyYWZmaWNDb250cm9sbGVyLm1vdmVTaGlwKHNoaXBJRCwgZGlyZWN0aW9uKTtcbiAgICB9XG5cbiAgICBjb25zdCByb3RhdGVTaGlwID0gKHNoaXBJRCkgPT4ge1xuICAgICAgICB0cmFmZmljQ29udHJvbGxlci5yb3RhdGVTaGlwKHNoaXBJRCk7XG4gICAgfVxuXG4gICAgY29uc3QgZ2V0TG9jYXRpb25DaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiB0cmFmZmljQ29udHJvbGxlci5nZXRMb2NhdGlvbkNoYW5nZSgpO1xuICAgIH1cblxuICAgIGNvbnN0IGdldEVycm9yTXNnID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gdHJhZmZpY0NvbnRyb2xsZXIuZ2V0RXJyb3IoKTtcbiAgICB9XG5cbiAgICBjb25zdCBnZXRQb3NzaWJsZU1vdmUgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiB0cmFmZmljQ29udHJvbGxlci5nZXRQb3NzaWJsZU1vdmUoKTtcbiAgICB9XG5cbiAgICByZXR1cm4geyBcbiAgICAgICAgcGxhY2VTaGlwLCBcbiAgICAgICAgZ2V0U2hpcExvY2F0aW9uLFxuICAgICAgICByZWNlaXZlQXR0YWNrLFxuICAgICAgICBnZXRPdXRjb21lLFxuICAgICAgICBpc0RlZmVhdGVkLCBcbiAgICAgICAgaW5pdERlZmF1bHRTaGlwcywgXG4gICAgICAgIGdldFNoaXBHcmlkLFxuICAgICAgICBnZXRTaGlwQXJyLFxuICAgICAgICBnZXRTaGlwTG9jYXRpb25zLFxuICAgICAgICBpc1NoaXBQcmVzZW50QXQsXG4gICAgICAgIG1vdmVTaGlwLFxuICAgICAgICByb3RhdGVTaGlwLFxuICAgICAgICBnZXRMb2NhdGlvbkNoYW5nZSxcbiAgICAgICAgZ2V0RXJyb3JNc2csXG4gICAgICAgIGdldFBvc3NpYmxlTW92ZVxuICAgIH07XG59XG5cbmV4cG9ydCB7XG4gICAgc2hpcEdyaWRGYWN0b3J5XG59IiwiY29uc3QgdHJhZmZpY0NvbnRyb2xsZXJGYWN0b3J5ID0gKHNoaXBHcmlkSW4sIHNoaXBMb2NhdGlvbnNJbiwgc2hpcEFyckluKSA9PiB7XG4gICAgbGV0IHNoaXBHcmlkID0gc2hpcEdyaWRJbjtcbiAgICBsZXQgc2hpcExvY2F0aW9ucyA9IHNoaXBMb2NhdGlvbnNJbjtcbiAgICBsZXQgc2hpcEFyciA9IHNoaXBBcnJJbjtcblxuICAgIGxldCBlcnJvciA9ICdub25lJztcbiAgICBsZXQgbG9jYXRpb25DaGFuZ2UgPSB7fTtcbiAgICBsZXQgcG9zc2libGVNb3ZlID0gZmFsc2U7XG5cbiAgICBjb25zdCBnZXROZXdMb2NhdGlvbnMgPSAob2xkTG9jYXRpb25zLCBkaXJlY3Rpb24pID0+IHtcbiAgICAgICAgbGV0IG5ld0xvY2F0aW9ucyA9IFtdO1xuICAgICAgICBsZXQgcm93TW9kID0gMDtcbiAgICAgICAgbGV0IGNvbE1vZCA9IDA7XG4gICAgICAgIHN3aXRjaChkaXJlY3Rpb24pe1xuICAgICAgICAgICAgY2FzZSAndXAnOlxuICAgICAgICAgICAgICAgIHJvd01vZCA9IC0xO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZG93bic6XG4gICAgICAgICAgICAgICAgcm93TW9kID0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICAgICAgICAgIGNvbE1vZCA9IC0xO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgICAgICAgIGNvbE1vZCA9IDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZm9yKGxldCBsb2NhdGlvbiBvZiBvbGRMb2NhdGlvbnMpe1xuICAgICAgICAgICAgbGV0IHJvdyA9IGxvY2F0aW9uLnJvdyArIHJvd01vZDtcbiAgICAgICAgICAgIGxldCBjb2wgPSBsb2NhdGlvbi5jb2wgKyBjb2xNb2Q7XG4gICAgICAgICAgICBuZXdMb2NhdGlvbnMucHVzaCh7cm93LCBjb2x9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3TG9jYXRpb25zO1xuICAgIH1cblxuICAgIGNvbnN0IGdldE5ld1JvdGF0aW9uTG9jYXRpb25zID0gKG9sZExvY2F0aW9ucywgbmV3RGlyZWN0aW9uKSA9PiB7XG4gICAgICAgIGxldCBhbmNob3JMb2NhdGlvbiA9IG9sZExvY2F0aW9uc1swXTtcbiAgICAgICAgbGV0IG5ld0xvY2F0aW9ucyA9IFtdO1xuICAgICAgICBsZXQgcm93TW9kID0gMDtcbiAgICAgICAgbGV0IGNvbE1vZCA9IDA7XG4gICAgICAgIGxldCByb3cgPSBhbmNob3JMb2NhdGlvbi5yb3c7XG4gICAgICAgIGxldCBjb2wgPSBhbmNob3JMb2NhdGlvbi5jb2w7XG4gICAgICAgIHN3aXRjaChuZXdEaXJlY3Rpb24pe1xuICAgICAgICAgICAgY2FzZSAnc291dGgnOlxuICAgICAgICAgICAgICAgIHJvd01vZCA9IDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdlYXN0JzpcbiAgICAgICAgICAgICAgICBjb2xNb2QgPSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG5ld0xvY2F0aW9ucy5wdXNoKHtyb3csIGNvbH0pO1xuICAgICAgICBmb3IobGV0IGxlbiA9IDE7IGxlbiA8IG9sZExvY2F0aW9ucy5sZW5ndGg7IGxlbisrKXtcbiAgICAgICAgICAgIHJvdyA9IHJvdyArIHJvd01vZDtcbiAgICAgICAgICAgIGNvbCA9IGNvbCArIGNvbE1vZDtcbiAgICAgICAgICAgIG5ld0xvY2F0aW9ucy5wdXNoKHtyb3csIGNvbH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUubG9nKG9sZExvY2F0aW9ucyk7XG4gICAgICAgIGNvbnNvbGUubG9nKG5ld0xvY2F0aW9ucyk7XG4gICAgICAgIHJldHVybiBuZXdMb2NhdGlvbnM7XG4gICAgfVxuXG4gICAgY29uc3QgaXNPdXRPZkJvdW5kc0Nvb3JkID0gKHJvdywgY29sKSA9PiB7XG4gICAgICAgIHJldHVybiByb3cgPCAwIHx8IHJvdyA+PSAxMCB8fCBjb2wgPCAwIHx8IGNvbCA+PSAxMDtcbiAgICB9XG5cbiAgICBjb25zdCBpc091dE9mQm91bmRzID0gKG5ld0xvY2F0aW9ucykgPT4ge1xuICAgICAgICBmb3IobGV0IGxvY2F0aW9uIG9mIG5ld0xvY2F0aW9ucyl7XG4gICAgICAgICAgICBpZihpc091dE9mQm91bmRzQ29vcmQobG9jYXRpb24ucm93LCBsb2NhdGlvbi5jb2wpKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3QgcmVzZXRMb2NhdGlvbkNoYW5nZSA9ICgpID0+IHtcbiAgICAgICAgbG9jYXRpb25DaGFuZ2UgPSB7fTtcbiAgICB9XG5cbiAgICBjb25zdCBwcmludEdyaWQgPSAoc2hpcEdyaWQpID0+IHtcbiAgICAgICAgZm9yKGxldCByb3cgPSAwOyByb3cgPCAxMDsgcm93Kyspe1xuICAgICAgICAgICAgbGV0IHJvd1N0ciA9ICcnO1xuICAgICAgICAgICAgZm9yKGxldCBjb2wgPSAwOyBjb2wgPCAxMDsgY29sKyspe1xuICAgICAgICAgICAgICAgIGlmKHNoaXBHcmlkW3Jvd11bY29sXSl7XG4gICAgICAgICAgICAgICAgICAgIHJvd1N0ciArPSBzaGlwR3JpZFtyb3ddW2NvbF0uZ2V0SUQoKVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJvd1N0ciArPSAnXyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJvd1N0ciArPSBcIiBcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHJvd1N0cik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvL2NoZWNrIGlmIGFub3RoZXIgc2hpcCBpcyB0b28gY2xvc2UgdG8gdGhlIHByb3Bvc2VkIGxvY2F0aW9uXG4gICAgLy9hIHNoaXAgaXMgdG9vIGNsb3NlIGlmIGl0IGlzIGFkamFjZW50LCB0aGVyZSBzaG91bGQgYmUgb25lIHNwYWNlXG4gICAgY29uc3QgaXNTcGFjZVZpb2xhdGlvbkNlbGwgPSAocm93LCBjb2wsIHNoaXBJRCkgPT4ge1xuICAgICAgICAvL2NvbnNvbGUubG9nKGByb3c6ICR7cm93fSwgY29sOiAke2NvbH0sIHNoaXBJRDogJHtzaGlwSUR9YCk7XG4gICAgICAgIGlmKCBpc091dE9mQm91bmRzQ29vcmQocm93LCBjb2wpIHx8XG4gICAgICAgICAgICBzaGlwR3JpZFtyb3ddW2NvbF0gPT09IG51bGwgfHxcbiAgICAgICAgICAgIHNoaXBHcmlkW3Jvd11bY29sXSA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICApe1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vcHJpbnRHcmlkKHNoaXBHcmlkKTsvLy8vLy8vLy8vXG4gICAgICAgIHJldHVybiBzaGlwR3JpZFtyb3ddW2NvbF0uZ2V0SUQoKSAhPT0gc2hpcElEO1xuICAgIH1cblxuICAgIGNvbnN0IGlzU3BhY2VWaW9sYXRpb24gPSAoc2hpcElELCBuZXdMb2NhdGlvbnMpID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coJ2luc2lkZSBpc1NwYWNlVmlvbGF0aW9uJyk7XG4gICAgICAgIGNvbnNvbGUubG9nKG5ld0xvY2F0aW9ucyk7XG4gICAgICAgIGZvcihsZXQgbG9jYXRpb24gb2YgbmV3TG9jYXRpb25zKXtcbiAgICAgICAgICAgIGxldCByb3cgPSBsb2NhdGlvbi5yb3c7XG4gICAgICAgICAgICBsZXQgY29sID0gbG9jYXRpb24uY29sO1xuICAgICAgICAgICAgaWYoaXNTcGFjZVZpb2xhdGlvbkNlbGwocm93IC0gMSwgY29sICsgMSwgc2hpcElEKSkgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICBpZihpc1NwYWNlVmlvbGF0aW9uQ2VsbChyb3cgICAgLCBjb2wgKyAxLCBzaGlwSUQpKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIGlmKGlzU3BhY2VWaW9sYXRpb25DZWxsKHJvdyArIDEsIGNvbCArIDEsIHNoaXBJRCkpIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgaWYoaXNTcGFjZVZpb2xhdGlvbkNlbGwocm93ICsgMSwgY29sICAgICwgc2hpcElEKSkgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICBpZihpc1NwYWNlVmlvbGF0aW9uQ2VsbChyb3cgKyAxLCBjb2wgLSAxLCBzaGlwSUQpKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIGlmKGlzU3BhY2VWaW9sYXRpb25DZWxsKHJvdyAgICAsIGNvbCAtIDEsIHNoaXBJRCkpIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgaWYoaXNTcGFjZVZpb2xhdGlvbkNlbGwocm93IC0gMSwgY29sIC0gMSwgc2hpcElEKSkgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICBpZihpc1NwYWNlVmlvbGF0aW9uQ2VsbChyb3cgLSAxLCBjb2wgICAgLCBzaGlwSUQpKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3QgcmVtb3ZlT2xkTG9jYXRpb24gPSAoc2hpcElELCBvbGRMb2NhdGlvbnMpID0+IHtcbiAgICAgICAgZm9yKGxldCBsb2NhdGlvbiBvZiBvbGRMb2NhdGlvbnMpe1xuICAgICAgICAgICAgc2hpcEdyaWRbbG9jYXRpb24ucm93XVtsb2NhdGlvbi5jb2xdID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBzaGlwTG9jYXRpb25zW3NoaXBJRF0gPSBbXTtcbiAgICB9XG5cbiAgICBjb25zdCBtYXJrTmV3TG9jYXRpb24gPSAoc2hpcElELCBuZXdMb2NhdGlvbnMpID0+IHtcbiAgICAgICAgLyogY29uc29sZS5sb2coJ2hlcmUgaW4gbWFyayBuZXcgbG9jYXRpb24nKVxuICAgICAgICBmb3IobGV0IGkgPSAwOyBpIDwgc2hpcEFyci5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgaW5kZXg6ICR7aX0sIHNoaXBJRDogJHtzaGlwQXJyW2ldLmdldElEKCl9YCk7XG4gICAgICAgIH0gKi9cbiAgICAgICAgZm9yKGxldCBsb2NhdGlvbiBvZiBuZXdMb2NhdGlvbnMpe1xuICAgICAgICAgICAgc2hpcEdyaWRbbG9jYXRpb24ucm93XVtsb2NhdGlvbi5jb2xdID0gc2hpcEFycltzaGlwSUQgLSAxXTtcblxuICAgICAgICAgICAgc2hpcExvY2F0aW9uc1tzaGlwSURdLnB1c2goc3RydWN0dXJlZENsb25lKGxvY2F0aW9uKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBtb3ZlU2hpcCA9IChzaGlwSUQsIGRpcmVjdGlvbikgPT4ge1xuXG4gICAgICAgIGxldCBvbGRMb2NhdGlvbnMgPSBzdHJ1Y3R1cmVkQ2xvbmUoc2hpcExvY2F0aW9uc1tzaGlwSURdKTtcbiAgICAgICAgbGV0IG5ld0xvY2F0aW9ucyA9IHN0cnVjdHVyZWRDbG9uZShnZXROZXdMb2NhdGlvbnMob2xkTG9jYXRpb25zLCBkaXJlY3Rpb24pKTtcblxuICAgICAgICBpZihpc091dE9mQm91bmRzKG5ld0xvY2F0aW9ucykpe1xuICAgICAgICAgICAgZXJyb3IgPSAnb3V0T2ZCb3VuZHMnO1xuICAgICAgICAgICAgcmVzZXRMb2NhdGlvbkNoYW5nZSgpO1xuICAgICAgICAgICAgcG9zc2libGVNb3ZlID0gZmFsc2U7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy9jb25zb2xlLmxvZyhpc1NwYWNlVmlvbGF0aW9uKHNoaXBJRCwgbmV3TG9jYXRpb25zKSk7XG4gICAgICAgIGlmKGlzU3BhY2VWaW9sYXRpb24oc2hpcElELCBuZXdMb2NhdGlvbnMpKXtcbiAgICAgICAgICAgIGVycm9yID0gJ3NwYWNlVmlvbGF0aW9uJztcbiAgICAgICAgICAgIHJlc2V0TG9jYXRpb25DaGFuZ2UoKTtcbiAgICAgICAgICAgIHBvc3NpYmxlTW92ZSA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZXJyb3IgPSAnJztcbiAgICAgICAgcG9zc2libGVNb3ZlID0gdHJ1ZTtcbiAgICAgICAgbG9jYXRpb25DaGFuZ2UgPSB7b2xkTG9jYXRpb25zLCBuZXdMb2NhdGlvbnN9O1xuICAgICAgICByZW1vdmVPbGRMb2NhdGlvbihzaGlwSUQsIG9sZExvY2F0aW9ucyk7XG4gICAgICAgIG1hcmtOZXdMb2NhdGlvbihzaGlwSUQsIG5ld0xvY2F0aW9ucyk7XG4gICAgfVxuXG4gICAgLyogY29uc3QgZ2V0TmV3Um90YXRpb25Mb2NhdGlvbnMgPSAoYW5jaG9yTG9jYXRpb24sIG5ld0RpcmVjdGlvbikgPT4ge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfSAqL1xuICAgIFxuICAgIGNvbnN0IHJvdGF0ZVNoaXAgPSAoc2hpcElEKSA9PiB7XG4gICAgICAgIGxldCBzaGlwID0gc2hpcEFycltzaGlwSUQgLSAxXTtcbiAgICAgICAgY29uc29sZS5sb2coJ1JFQUNIRUQnKTtcbiAgICAgICAgY29uc29sZS5sb2coc2hpcElEKTtcbiAgICAgICAgY29uc29sZS5sb2coc2hpcC5nZXRJRCgpKTtcbiAgICAgICAgY29uc29sZS5sb2coc2hpcExvY2F0aW9ucylcbiAgICAgICAgbGV0IG9sZERpcmVjdGlvbiA9IHNoaXAuZ2V0RGlyZWN0aW9uKCk7XG4gICAgICAgIGxldCBuZXdEaXJlY3Rpb24gPSBvbGREaXJlY3Rpb24gPT09ICdzb3V0aCcgPyAnZWFzdCcgOiAnc291dGgnO1xuICAgICAgICBsZXQgb2xkTG9jYXRpb25zID0gc2hpcExvY2F0aW9uc1tzaGlwSURdO1xuICAgICAgICBsZXQgbmV3TG9jYXRpb25zID0gZ2V0TmV3Um90YXRpb25Mb2NhdGlvbnMob2xkTG9jYXRpb25zLCBuZXdEaXJlY3Rpb24pO1xuICAgICAgICBcbiAgICAgICAgaWYoaXNPdXRPZkJvdW5kcyhuZXdMb2NhdGlvbnMpKXtcbiAgICAgICAgICAgIGVycm9yID0gJ291dE9mQm91bmRzJztcbiAgICAgICAgICAgIHJlc2V0TG9jYXRpb25DaGFuZ2UoKTtcbiAgICAgICAgICAgIHBvc3NpYmxlTW92ZSA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmKGlzU3BhY2VWaW9sYXRpb24oc2hpcElELCBuZXdMb2NhdGlvbnMpKXtcbiAgICAgICAgICAgIGVycm9yID0gJ3NwYWNlVmlvbGF0aW9uJztcbiAgICAgICAgICAgIHJlc2V0TG9jYXRpb25DaGFuZ2UoKTtcbiAgICAgICAgICAgIHBvc3NpYmxlTW92ZSA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZXJyb3IgPSAnJztcbiAgICAgICAgcG9zc2libGVNb3ZlID0gdHJ1ZTtcbiAgICAgICAgbG9jYXRpb25DaGFuZ2UgPSB7b2xkTG9jYXRpb25zLCBuZXdMb2NhdGlvbnN9O1xuICAgICAgICBzaGlwLnNldERpcmVjdGlvbihuZXdEaXJlY3Rpb24pO1xuICAgICAgICByZW1vdmVPbGRMb2NhdGlvbihzaGlwSUQsIG9sZExvY2F0aW9ucyk7XG4gICAgICAgIG1hcmtOZXdMb2NhdGlvbihzaGlwSUQsIG5ld0xvY2F0aW9ucyk7XG4gICAgfVxuXG4gICAgY29uc3QgZ2V0RXJyb3IgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBlcnJvcjtcbiAgICB9XG5cbiAgICBjb25zdCBnZXRQb3NzaWJsZU1vdmUgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBwb3NzaWJsZU1vdmU7XG4gICAgfVxuXG4gICAgY29uc3QgZ2V0TG9jYXRpb25DaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBsb2NhdGlvbkNoYW5nZTtcbiAgICB9XG5cbiAgICByZXR1cm4geyBcbiAgICAgICAgbW92ZVNoaXAsXG4gICAgICAgIHJvdGF0ZVNoaXAsXG4gICAgICAgIGdldEVycm9yLFxuICAgICAgICBnZXRQb3NzaWJsZU1vdmUsIFxuICAgICAgICBnZXRMb2NhdGlvbkNoYW5nZSBcbiAgICB9XG59XG5cbmV4cG9ydCB7XG4gICAgdHJhZmZpY0NvbnRyb2xsZXJGYWN0b3J5XG59IiwiY29uc3QgYXR0YWNrR3JpZEZhY3RvcnkgPSAoKSA9PiB7XG4gICAgY29uc3QgYXR0YWNrcyA9IEFycmF5KDEwKS5maWxsKCkubWFwKCgpID0+IEFycmF5KDEwKS5maWxsKG51bGwpKTtcblxuICAgIGNvbnN0IGluQm91bmRzID0gKHJvdywgY29sKSA9PiB7XG4gICAgICAgIHJldHVybiByb3cgPj0gMCAmJiByb3cgPCAxMCAmJiBjb2wgPj0gMCAmJiBjb2wgPCAxMDtcbiAgICB9XG5cbiAgICBjb25zdCBpc1ZhbGlkQXR0YWNrID0gKHJvdywgY29sKSA9PiB7XG4gICAgICAgIHJldHVybiBpbkJvdW5kcyhyb3csIGNvbCkgJiYgYXR0YWNrc1tyb3ddW2NvbF0gPT09IG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgcmVjb3JkQXR0YWNrID0gKHJvdywgY29sKSA9PiB7XG4gICAgICAgIGF0dGFja3Nbcm93XVtjb2xdID0gJ2hpdCc7XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgaXNWYWxpZEF0dGFjaywgcmVjb3JkQXR0YWNrIH07XG59XG5cbmV4cG9ydHtcbiAgICBhdHRhY2tHcmlkRmFjdG9yeVxufSIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zdHlsZS5jc3NcIjtcbiAgICAgIFxuICAgICAgXG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0gPSBzdHlsZVRhZ1RyYW5zZm9ybUZuO1xub3B0aW9ucy5zZXRBdHRyaWJ1dGVzID0gc2V0QXR0cmlidXRlcztcblxuICAgICAgb3B0aW9ucy5pbnNlcnQgPSBpbnNlcnRGbi5iaW5kKG51bGwsIFwiaGVhZFwiKTtcbiAgICBcbm9wdGlvbnMuZG9tQVBJID0gZG9tQVBJO1xub3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7XG5cbnZhciB1cGRhdGUgPSBBUEkoY29udGVudCwgb3B0aW9ucyk7XG5cblxuXG5leHBvcnQgKiBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgIGV4cG9ydCBkZWZhdWx0IGNvbnRlbnQgJiYgY29udGVudC5sb2NhbHMgPyBjb250ZW50LmxvY2FscyA6IHVuZGVmaW5lZDtcbiIsImltcG9ydCB7IFxuICAgIHZpZXdDb250cm9sbGVyLFxuICAgIC8qIHNldFVwVmlldywgKi9cbiAgICBtYXJrQXR0YWNrXG59IGZyb20gJy4vdmlld0NvbnRyb2xsZXInO1xuXG5pbXBvcnQgeyBcbiAgICBnYW1lTWFzdGVyRmFjdG9yeSxcbn0gZnJvbSAnLi9nYW1lTWFzdGVyJztcblxuLy9tYW5hZ2VzIHRoZSBnYW1lIGFuZCB0aGUgdmlld2NvbnRyb2xsZXJcbmNvbnN0IHdlYnNpdGVNYW5hZ2VyRmFjdG9yeSA9ICgpID0+IHtcbiAgICBsZXQgZ2FtZSA9IGdhbWVNYXN0ZXJGYWN0b3J5KCk7XG4gICAgbGV0IG15Vmlld0NvbnRyb2xsZXIgPSB2aWV3Q29udHJvbGxlcigpO1xuICAgIGNvbnN0IGdldFNoaXBHcmlkID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gZ2FtZS5nZXRTaGlwR3JpZCgpO1xuICAgIH1cbiAgICBjb25zdCBwcm9jZXNzVXNlcklucHV0ID0gKHJvdywgY29sLCBjbGljaykgPT4ge1xuICAgICAgICBcbiAgICAgICAgaWYoIWdhbWUuaXNBdHRhY2thYmxlQnlQbGF5ZXIocm93LCBjb2wpKXtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIG1hcmtBdHRhY2soXG4gICAgICAgICAgICBjbGljaywgXG4gICAgICAgICAgICBnYW1lLmlzU2hpcFByZXNlbnRBdChcbiAgICAgICAgICAgICAgICBjbGljay50YXJnZXQuZGF0YXNldC5yb3csIFxuICAgICAgICAgICAgICAgIGNsaWNrLnRhcmdldC5kYXRhc2V0LmNvbCwgXG4gICAgICAgICAgICAgICAgJ2NvbXB1dGVyJykpO1xuICAgICAgICAvL2NvbnNvbGUubG9nKGNsaWNrKTtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhjbGljay50YXJnZXQuZGF0YXNldC5yb3cpO1xuLyogXG4gICAgICAgIGlmKGdhbWUuaXNTaGlwUHJlc2VudEF0KHJvdywgY29sLCAnY29tcHV0ZXInKSl7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnU0NVQ0VTUycpO1xuICAgICAgICAgICAgLy91cGRhdGUgY29uc29sZVxuICAgICAgICB9ICovXG5cbiAgICAgICAgZ2FtZS5wcm9jZXNzVXNlcklucHV0KHJvdywgY29sKTtcblxuICAgICAgICAvL2Rpc3BsYXkgb3V0Y29tZVxuICAgICAgICAvL2NvbnNvbGUubG9nKGBZb3UgZmlyZSBhdCAoJHtyb3d9LCAke2NvbH0pIGFuZCAke2dhbWUuZ2V0UGxheWVyVHVyblJlc3VsdCgpfWApO1xuICAgICAgICBteVZpZXdDb250cm9sbGVyLnVwZGF0ZU1zZ09uZShyb3csIGNvbCwgZ2FtZS5nZXRQbGF5ZXJUdXJuUmVzdWx0KCkpO1xuXG4gICAgICAgIC8vY29uc29sZS5sb2coZ2FtZS53aW5DaGVja1BsYXllcigpKTtcbiAgICAgICAgaWYoZ2FtZS53aW5DaGVja1BsYXllcigpKXtcbiAgICAgICAgICAgIC8vZGlzcGxheSB2aWN0b3J5IG1lc3NhZ2VcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdwbGF5ZXIgd2lucycpO1xuICAgICAgICAgICAgbXlWaWV3Q29udHJvbGxlci51cGRhdGVNc2dUd28oMCwgMCwgJ3dpbicpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9nZXQgYWkgdGFyZ2V0XG4gICAgICAgIC8vZXhlY3V0ZSBhaSBhdHRhY2tcbiAgICAgICAgbGV0IHRhcmdldCA9IGdhbWUucHJvY2Vzc0NvbXB1dGVyQXR0YWNrKCk7XG4gICAgICAgIC8vY29uc29sZS5sb2codGFyZ2V0KTtcbiAgICAgICAgLy91cGRhdGUgcGxheWVyIHNoaXAgZ3JpZCB0byBzaG93IGF0dGFja1xuICAgICAgICBteVZpZXdDb250cm9sbGVyLm1hcmtDb21wdXRlckF0dGFjayh0YXJnZXQucm93LCB0YXJnZXQuY29sKTtcblxuICAgICAgICAvL2Rpc3BsYXkgb3V0Y29tZVxuICAgICAgICBjb25zb2xlLmxvZyhgWW91ciBvcHBvbmVudCBmaXJlcyBhdCAoJHt0YXJnZXQucm93fSwgJHt0YXJnZXQuY29sfSkgYW5kICR7Z2FtZS5nZXRDb21wdXRlclR1cm5SZXN1bHQoKX1gKTtcbiAgICAgICAgbXlWaWV3Q29udHJvbGxlci51cGRhdGVNc2dUd28odGFyZ2V0LnJvdywgdGFyZ2V0LmNvbCwgZ2FtZS5nZXRDb21wdXRlclR1cm5SZXN1bHQoKSk7XG5cbiAgICAgICAgLy93aW4gY2hlY2tcbiAgICAgICAgaWYoZ2FtZS53aW5DaGVja0NvbXB1dGVyKCkpe1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2NvbXB1dGVyIHdpbnMnKTtcbiAgICAgICAgICAgIG15Vmlld0NvbnRyb2xsZXIudXBkYXRlTXNnVHdvKDAsIDAsICdsb3NzJyk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgfVxuXG4gICAgY29uc3QgaW5pdGlhdGUgPSAoKSA9PiB7XG4gICAgICAgIG15Vmlld0NvbnRyb2xsZXIuc2V0VXAoZ2FtZSwgcHJvY2Vzc1VzZXJJbnB1dCk7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiB7IGluaXRpYXRlLCBwcm9jZXNzVXNlcklucHV0LCBnZXRTaGlwR3JpZCB9O1xufVxuXG5leHBvcnQgeyBcbiAgICB3ZWJzaXRlTWFuYWdlckZhY3Rvcnlcbn07IiwiaW1wb3J0IHsgXG4gICAgc2hpcEdyaWRGYWN0b3J5XG59IGZyb20gJy4vc2hpcEdyaWRGYWN0b3J5JztcblxuaW1wb3J0IHsgXG4gICAgYXR0YWNrR3JpZEZhY3Rvcnlcbn0gZnJvbSAnLi9hdHRhY2tHcmlkRmFjdG9yeSc7XG5cbmltcG9ydCB7IFxuICAgIGNvbXB1dGVyVGFyZ2V0aW5nQUlGYWN0b3J5XG59IGZyb20gJy4vY29tcHV0ZXJUYXJnZXRpbmcnO1xuXG5jb25zdCBnYW1lTWFzdGVyRmFjdG9yeSA9ICgpID0+IHtcblxuICAgIGNvbnN0IGJvYXJkX3BsYXllcl9zaGlwcyA9IHNoaXBHcmlkRmFjdG9yeSgpO1xuICAgIGNvbnN0IGJvYXJkX2NvbXB1dGVyX3NoaXBzID0gc2hpcEdyaWRGYWN0b3J5KCk7XG5cbiAgICBjb25zdCBib2FyZF9wbGF5ZXJfYXR0YWNrcyA9IGF0dGFja0dyaWRGYWN0b3J5KCk7XG4gICAgY29uc3QgYm9hcmRfY29tcHV0ZXJfYXR0YWNrcyA9IGF0dGFja0dyaWRGYWN0b3J5KCk7XG5cbiAgICBsZXQgcGxheWVyVHVyblJlc3VsdCA9ICcnO1xuICAgIGxldCBjb21wdXRlclR1cm5SZXN1bHQgPSAnJztcblxuICAgIGJvYXJkX3BsYXllcl9zaGlwcy5pbml0RGVmYXVsdFNoaXBzKCk7XG4gICAgYm9hcmRfY29tcHV0ZXJfc2hpcHMuaW5pdERlZmF1bHRTaGlwcygpO1xuICAgIGNvbnN0IGNvbXB1dGVyVGFyZ2V0aW5nQUkgPSBjb21wdXRlclRhcmdldGluZ0FJRmFjdG9yeShib2FyZF9jb21wdXRlcl9hdHRhY2tzKTtcbiAgICBsZXQgYXR0YWNrTG9jYXRpb247XG4gICAgXG4gICAgY29uc3QgZ2V0U2hpcEdyaWQgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBib2FyZF9wbGF5ZXJfc2hpcHMuZ2V0U2hpcEdyaWQoKTtcbiAgICB9XG5cbiAgICBjb25zdCBnZXRTaGlwR3JpZFdyYXBwZXIgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBib2FyZF9wbGF5ZXJfc2hpcHM7XG4gICAgfVxuXG4gICAgY29uc3QgcHJvY2Vzc1VzZXJJbnB1dCA9IChyb3cgLCBjb2wpID0+IHtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhgVmFsaWQgcGxheWVyIGF0dGFjayAoJHtyb3d9LCAke2NvbH0pOiAke2JvYXJkX3BsYXllcl9hdHRhY2tzLmlzVmFsaWRBdHRhY2socm93LCBjb2wpfWApO1xuICAgICAgICBpZighYm9hcmRfcGxheWVyX2F0dGFja3MuaXNWYWxpZEF0dGFjayhyb3csIGNvbCkpe1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGJvYXJkX2NvbXB1dGVyX3NoaXBzLnJlY2VpdmVBdHRhY2socm93LCBjb2wpO1xuICAgICAgICBwbGF5ZXJUdXJuUmVzdWx0ID0gYm9hcmRfY29tcHV0ZXJfc2hpcHMuZ2V0T3V0Y29tZSgpO1xuICAgICAgICBib2FyZF9wbGF5ZXJfYXR0YWNrcy5yZWNvcmRBdHRhY2socm93LCBjb2wpO1xuICAgIH1cblxuICAgIGNvbnN0IGlzQXR0YWNrYWJsZUJ5UGxheWVyID0gKHJvdywgY29sKSA9PiB7XG4gICAgICAgIHJldHVybiBib2FyZF9wbGF5ZXJfYXR0YWNrcy5pc1ZhbGlkQXR0YWNrKHJvdywgY29sKTtcbiAgICB9XG5cbiAgICBjb25zdCB3aW5DaGVja1BsYXllciA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIGJvYXJkX2NvbXB1dGVyX3NoaXBzLmlzRGVmZWF0ZWQoKTtcbiAgICB9XG5cbiAgICBjb25zdCB3aW5DaGVja0NvbXB1dGVyID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gYm9hcmRfcGxheWVyX3NoaXBzLmlzRGVmZWF0ZWQoKTtcbiAgICB9XG5cbiAgICBjb25zdCBpc1NoaXBQcmVzZW50QXQgPSAocm93LCBjb2wsIHRhcmdldCkgPT4ge1xuICAgICAgICBsZXQgYm9hcmQgPSB0YXJnZXQgPT09ICdjb21wdXRlcicgPyBib2FyZF9jb21wdXRlcl9zaGlwcyA6IGJvYXJkX3BsYXllcl9zaGlwcztcbiAgICAgICAgcmV0dXJuIGJvYXJkLmlzU2hpcFByZXNlbnRBdChyb3csIGNvbCk7XG4gICAgfVxuXG4gICAgY29uc3QgcHJvY2Vzc0NvbXB1dGVyQXR0YWNrID0gKCkgPT4ge1xuICAgICAgICBsZXQgdGFyZ2V0ID0gY29tcHV0ZXJUYXJnZXRpbmdBSS5waWNrVGFyZ2V0U2ltcGxlKCk7XG4gICAgICAgIC8vY29uc29sZS5sb2coYFZhbGlkIGNvbXB1dGVyIGF0dGFjayAoJHt0YXJnZXQucm93fSwgJHt0YXJnZXQuY29sfSk6ICR7Ym9hcmRfY29tcHV0ZXJfYXR0YWNrcy5pc1ZhbGlkQXR0YWNrKHRhcmdldC5yb3csIHRhcmdldC5jb2wpfWApO1xuICAgICAgICBpZighYm9hcmRfY29tcHV0ZXJfYXR0YWNrcy5pc1ZhbGlkQXR0YWNrKHRhcmdldC5yb3csIHRhcmdldC5jb2wpKXtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdnYW1lIG1hc3RlcjogcHJvY2Vzc0NvbXB1dGVyQXR0YWNrRXJyb3InKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBib2FyZF9wbGF5ZXJfc2hpcHMucmVjZWl2ZUF0dGFjayh0YXJnZXQucm93LCB0YXJnZXQuY29sKTtcbiAgICAgICAgY29tcHV0ZXJUdXJuUmVzdWx0ID0gYm9hcmRfcGxheWVyX3NoaXBzLmdldE91dGNvbWUoKTtcbiAgICAgICAgYm9hcmRfY29tcHV0ZXJfYXR0YWNrcy5yZWNvcmRBdHRhY2sodGFyZ2V0LnJvdywgdGFyZ2V0LmNvbCk7XG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfVxuXG4gICAgY29uc3QgZ2V0UGxheWVyVHVyblJlc3VsdCA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHBsYXllclR1cm5SZXN1bHQ7XG4gICAgfVxuXG4gICAgY29uc3QgZ2V0Q29tcHV0ZXJUdXJuUmVzdWx0ID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gY29tcHV0ZXJUdXJuUmVzdWx0O1xuICAgIH1cblxuICAgIGNvbnN0IG1vdmVTaGlwID0gKHNoaXBJRCwgZGlyZWN0aW9uKSA9PiB7XG4gICAgICAgIGJvYXJkX3BsYXllcl9zaGlwcy5tb3ZlU2hpcChzaGlwSUQsIGRpcmVjdGlvbik7XG4gICAgfVxuXG4gICAgY29uc3Qgcm90YXRlU2hpcCA9IChzaGlwSUQsIGRpcmVjdGlvbikgPT4ge1xuICAgICAgICBib2FyZF9wbGF5ZXJfc2hpcHMucm90YXRlU2hpcChzaGlwSUQpO1xuICAgIH1cblxuICAgIGNvbnN0IGdldExvY2F0aW9uQ2hhbmdlID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gYm9hcmRfcGxheWVyX3NoaXBzLmdldExvY2F0aW9uQ2hhbmdlKCk7XG4gICAgfVxuXG4gICAgY29uc3QgZ2V0RXJyb3JNc2cgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBib2FyZF9wbGF5ZXJfc2hpcHMuZ2V0RXJyb3JNc2coKTtcbiAgICB9XG5cbiAgICBjb25zdCBnZXRQb3NzaWJsZU1vdmUgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBib2FyZF9wbGF5ZXJfc2hpcHMuZ2V0UG9zc2libGVNb3ZlKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgXG4gICAgICAgIGdldFNoaXBHcmlkLCBcbiAgICAgICAgZ2V0U2hpcEdyaWRXcmFwcGVyLFxuICAgICAgICBwcm9jZXNzVXNlcklucHV0LCBcbiAgICAgICAgaXNBdHRhY2thYmxlQnlQbGF5ZXIsIFxuICAgICAgICB3aW5DaGVja1BsYXllciwgXG4gICAgICAgIHdpbkNoZWNrQ29tcHV0ZXIsIFxuICAgICAgICBpc1NoaXBQcmVzZW50QXQsXG4gICAgICAgIHByb2Nlc3NDb21wdXRlckF0dGFjayxcbiAgICAgICAgZ2V0UGxheWVyVHVyblJlc3VsdCxcbiAgICAgICAgZ2V0Q29tcHV0ZXJUdXJuUmVzdWx0LFxuICAgICAgICBtb3ZlU2hpcCxcbiAgICAgICAgcm90YXRlU2hpcCxcbiAgICAgICAgZ2V0TG9jYXRpb25DaGFuZ2UsXG4gICAgICAgIGdldEVycm9yTXNnLFxuICAgICAgICBnZXRQb3NzaWJsZU1vdmVcbiAgICB9O1xufVxuXG5cbmV4cG9ydCB7IFxuICAgIGdhbWVNYXN0ZXJGYWN0b3J5XG59OyIsImNvbnN0IGNvbXB1dGVyVGFyZ2V0aW5nQUlGYWN0b3J5ID0gKGJvYXJkKSA9PiB7XG4gICAgbGV0IGxhc3RDb29yZGluYXRlc0hpdDtcbiAgICBsZXQgaGl0U2hpcCA9IGZhbHNlO1xuICAgIGxldCBnZXRSYW5kID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTApO1xuICAgIH1cbiAgICBsZXQgcGlja1RhcmdldFNpbXBsZSA9ICgpID0+IHtcbiAgICAgICAgbGV0IHJvdyA9IGdldFJhbmQoKTtcbiAgICAgICAgbGV0IGNvbCA9IGdldFJhbmQoKTtcbiAgICAgICAgd2hpbGUoIWJvYXJkLmlzVmFsaWRBdHRhY2socm93LCBjb2wpKXtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGAoJHtyb3d9LCAke2NvbH0pIGlzIGludmFsaWQuIFJlcm9sbGluZ2ApXG4gICAgICAgICAgICByb3cgPSBnZXRSYW5kKCk7XG4gICAgICAgICAgICBjb2wgPSBnZXRSYW5kKCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5sb2coYEFJIGZpbmFsIHRhcmdldCAoJHtyb3d9LCAke2NvbH0pYCk7XG4gICAgICAgIHJldHVybiB7cm93LCBjb2x9O1xuICAgIH1cblxuICAgIHJldHVybiB7IHBpY2tUYXJnZXRTaW1wbGUgfTtcbn1cblxuZXhwb3J0IHsgXG4gICAgY29tcHV0ZXJUYXJnZXRpbmdBSUZhY3Rvcnlcbn07IiwiaW1wb3J0IHsgXG4gICAgd2Vic2l0ZU1hbmFnZXJGYWN0b3J5XG59IGZyb20gJy4vd2Vic2l0ZU1hbmFnZXInO1xuaW1wb3J0ICcuL3N0eWxlLmNzcyc7XG5cbmNvbnN0IHNpdGVNYW5hZ2VyID0gd2Vic2l0ZU1hbmFnZXJGYWN0b3J5KCk7XG5zaXRlTWFuYWdlci5pbml0aWF0ZSgpOyJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwiY29uY2F0IiwibGVuZ3RoIiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWEiLCJkZWR1cGUiLCJzdXBwb3J0cyIsImxheWVyIiwidW5kZWZpbmVkIiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImsiLCJfayIsImNzc01hcHBpbmciLCJidG9hIiwiYmFzZTY0IiwidW5lc2NhcGUiLCJlbmNvZGVVUklDb21wb25lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiZGF0YSIsInNvdXJjZU1hcHBpbmciLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsInJlc3VsdCIsIm1vZHVsZXNUb0RvbSIsIm9wdGlvbnMiLCJpZENvdW50TWFwIiwiaWRlbnRpZmllcnMiLCJiYXNlIiwiY291bnQiLCJpbmRleEJ5SWRlbnRpZmllciIsIm9iaiIsImNzcyIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkRWxlbWVudFN0eWxlIiwiYnlJbmRleCIsInNwbGljZSIsImFwaSIsImRvbUFQSSIsInVwZGF0ZSIsIm5ld09iaiIsInJlbW92ZSIsImxhc3RJZGVudGlmaWVycyIsIm5ld0xpc3QiLCJpbmRleCIsIm5ld0xhc3RJZGVudGlmaWVycyIsIl9pIiwiX2luZGV4IiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImVsZW1lbnQiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlVGFnVHJhbnNmb3JtIiwiYXBwbHkiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJuIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImQiLCJhIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwibmMiLCJ2aWV3Q29udHJvbGxlciIsInNoaXBUQm9keSIsImF0dGFja0dyaWQiLCJlcnJvck1lc3NhZ2UiLCJtc2dPbmUiLCJtc2dUd28iLCJzaGlwU2VsZWN0b3IiLCJidXR0b25TdWl0ZSIsImdhbWVNYXN0ZXIiLCJjcmVhdGVIaWdobGlnaHRpbmciLCJzaGlwR3JpZFdyYXBwZXIiLCJvbmNoYW5nZSIsImV2ZW50Iiwicm93IiwiY29sIiwiZ2V0VGFibGVDZWxsIiwiY2xhc3NMaXN0IiwiY2xlYXJFeGlzdGluZ0hpZ2hsaWdodHMiLCJzaGlwSUQiLCJ2YWx1ZSIsImNvb3JkaW5hdGVzIiwiZ2V0U2hpcExvY2F0aW9uIiwiY29vcmQiLCJjb25zb2xlIiwibG9nIiwibXlURCIsImFkZCIsInVwZGF0ZVNoaXBWaWV3IiwiZ2V0UG9zc2libGVNb3ZlIiwibG9jYXRpb25DaGFuZ2UiLCJnZXRMb2NhdGlvbkNoYW5nZSIsImxvY2F0aW9uIiwib2xkTG9jYXRpb25zIiwiY2VsbCIsIm5ld0xvY2F0aW9ucyIsInVwZGF0ZUVycm9yTXNnIiwiZXJyb3JDb2RlIiwiZ2V0RXJyb3JNc2ciLCJ0ZXh0Q29udGVudCIsInNldFVwVmlldyIsImdhbWUiLCJwcm9jZXNzVXNlcklucHV0IiwiY29udGFpbmVyIiwic2hpcEdyaWQiLCJ0YWJsZSIsImNoaWxkcmVuIiwiZGlzcGxheVNoaXBzIiwiZ2V0U2hpcEdyaWQiLCJzZXRVcE1haW4iLCJzZXRVcCIsInVwIiwibGVmdCIsImRvd24iLCJyaWdodCIsInJvdGF0ZSIsInJhbmRvbWl6ZSIsInN0YXJ0IiwibG9hZEdhbWVNYXN0ZXIiLCJvbmNsaWNrIiwidGJvZHkiLCJjbGljayIsIm1ha2VBdHRhY2tHcmlkQ2xpY2thYmxlIiwiZGlzYWJsZU1vdmVtZW50QnRucyIsImxvYWRCdXR0b25GdW5jdGlvbmFsaXR5IiwiZ2V0U2hpcEdyaWRXcmFwcGVyIiwibW92ZVNoaXAiLCJyb3RhdGVTaGlwIiwibWFya0NvbXB1dGVyQXR0YWNrIiwiaXNTaGlwUHJlc2VudEF0IiwidXBkYXRlTXNnT25lIiwibXNnIiwidXBkYXRlTXNnVHdvIiwic2hpcEZhY3RvcnkiLCJsZW4iLCJkaXIiLCJkaXJlY3Rpb24iLCJoaXRzU3VzdGFpbmVkIiwic3VuayIsImdldEhpdHNTdXN0YWluZWQiLCJoaXQiLCJzZXREaXJlY3Rpb24iLCJuZXdEaXJlY3Rpb24iLCJpc1N1bmsiLCJnZXRMZW5ndGgiLCJnZXREaXJlY3Rpb24iLCJnZXRJRCIsInNoaXBHcmlkRmFjdG9yeSIsIkFycmF5IiwiZmlsbCIsInNoaXBBcnIiLCJzaGlwTG9jYXRpb25zIiwidHJhZmZpY0NvbnRyb2xsZXIiLCJzaGlwR3JpZEluIiwic2hpcExvY2F0aW9uc0luIiwic2hpcEFyckluIiwiZXJyb3IiLCJwb3NzaWJsZU1vdmUiLCJpc091dE9mQm91bmRzQ29vcmQiLCJpc091dE9mQm91bmRzIiwicmVzZXRMb2NhdGlvbkNoYW5nZSIsImlzU3BhY2VWaW9sYXRpb25DZWxsIiwiaXNTcGFjZVZpb2xhdGlvbiIsInJlbW92ZU9sZExvY2F0aW9uIiwibWFya05ld0xvY2F0aW9uIiwic3RydWN0dXJlZENsb25lIiwicm93TW9kIiwiY29sTW9kIiwiZ2V0TmV3TG9jYXRpb25zIiwic2hpcCIsImFuY2hvckxvY2F0aW9uIiwiZ2V0TmV3Um90YXRpb25Mb2NhdGlvbnMiLCJnZXRFcnJvciIsInRyYWZmaWNDb250cm9sbGVyRmFjdG9yeSIsIm91dGNvbWUiLCJpbkJvdW5kcyIsInBsYWNlU2hpcCIsImlzVmFsaWRTaGlwUGxhY2VtZW50IiwicmVjZWl2ZUF0dGFjayIsImdldE91dGNvbWUiLCJpc0RlZmVhdGVkIiwiaW5pdERlZmF1bHRTaGlwcyIsInNoaXBfMSIsInNoaXBfMiIsInNoaXBfMyIsInNoaXBfNCIsInNoaXBfNSIsInNoaXBfNiIsInNoaXBfNyIsInNoaXBfOCIsInNoaXBfOSIsInNoaXBfMTAiLCJnZXRTaGlwQXJyIiwiZ2V0U2hpcExvY2F0aW9ucyIsImF0dGFja0dyaWRGYWN0b3J5IiwiYXR0YWNrcyIsImlzVmFsaWRBdHRhY2siLCJyZWNvcmRBdHRhY2siLCJsb2NhbHMiLCJib2FyZF9wbGF5ZXJfc2hpcHMiLCJib2FyZF9jb21wdXRlcl9zaGlwcyIsImJvYXJkX3BsYXllcl9hdHRhY2tzIiwiYm9hcmRfY29tcHV0ZXJfYXR0YWNrcyIsInBsYXllclR1cm5SZXN1bHQiLCJjb21wdXRlclR1cm5SZXN1bHQiLCJjb21wdXRlclRhcmdldGluZ0FJIiwiYm9hcmQiLCJnZXRSYW5kIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwicGlja1RhcmdldFNpbXBsZSIsImNvbXB1dGVyVGFyZ2V0aW5nQUlGYWN0b3J5IiwiaXNBdHRhY2thYmxlQnlQbGF5ZXIiLCJ3aW5DaGVja1BsYXllciIsIndpbkNoZWNrQ29tcHV0ZXIiLCJwcm9jZXNzQ29tcHV0ZXJBdHRhY2siLCJnZXRQbGF5ZXJUdXJuUmVzdWx0IiwiZ2V0Q29tcHV0ZXJUdXJuUmVzdWx0IiwiZ2FtZU1hc3RlckZhY3RvcnkiLCJteVZpZXdDb250cm9sbGVyIiwic2hpcFByZXNlbnQiLCJtYXJrQXR0YWNrIiwiZGF0YXNldCIsImluaXRpYXRlIiwid2Vic2l0ZU1hbmFnZXJGYWN0b3J5Il0sInNvdXJjZVJvb3QiOiIifQ==