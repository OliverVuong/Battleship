(()=>{"use strict";var e={426:(e,t,o)=>{o.d(t,{Z:()=>a});var n=o(537),r=o.n(n),i=o(645),s=o.n(i)()(r());s.push([e.id,"body {\n    background-color: lightgray;\n}\n\n.animate {\n    /* animation: 0.7s slide-in 0.7s 3 linear; */\n    animation-name: slide-in;\n    animation-duration: 0.3s;\n    animation-iteration-count: 3;\n}\n  \n@keyframes slide-in {\n    0% {\n        transform: scale(0.25);\n        transform: translateY(-1000px);\n    }\n    80%{\n        transform: scale(0.25);\n    }\n    100% {\n        transform: translateY(0);\n        transform: scale(1);\n    }\n}\n\nth, td{\n    margin: 0;\n    padding: 0;\n    height: 32px;\n    width: 32px;\n}\n\ntd {\n    border: 1px solid black;\n}\n\ndiv.hit, div.ship {\n    margin: 0;\n    padding: 0;\n    \n    height: 100%;\n    width: 100%;\n}\n\ndiv.ship {\n    background-color: blue;\n}\n\ndiv.hit {\n    background-color: red;\n}\n\ndiv.hit.ship {\n    border: 5px solid blue;\n}\n\ntd.ship {\n    background-color: blue;\n}\n\ntd.miss, td.hit {\n    background-color: red;\n}\n\ntd.hit {\n    border: 5px solid blue;\n    box-sizing: border-box;\n}\n\ntd.selected {\n    background-color: turquoise;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,2BAA2B;AAC/B;;AAEA;IACI,4CAA4C;IAC5C,wBAAwB;IACxB,wBAAwB;IACxB,4BAA4B;AAChC;;AAEA;IACI;QACI,sBAAsB;QACtB,8BAA8B;IAClC;IACA;QACI,sBAAsB;IAC1B;IACA;QACI,wBAAwB;QACxB,mBAAmB;IACvB;AACJ;;AAEA;IACI,SAAS;IACT,UAAU;IACV,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,SAAS;IACT,UAAU;;IAEV,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,sBAAsB;IACtB,sBAAsB;AAC1B;;AAEA;IACI,2BAA2B;AAC/B",sourcesContent:["body {\n    background-color: lightgray;\n}\n\n.animate {\n    /* animation: 0.7s slide-in 0.7s 3 linear; */\n    animation-name: slide-in;\n    animation-duration: 0.3s;\n    animation-iteration-count: 3;\n}\n  \n@keyframes slide-in {\n    0% {\n        transform: scale(0.25);\n        transform: translateY(-1000px);\n    }\n    80%{\n        transform: scale(0.25);\n    }\n    100% {\n        transform: translateY(0);\n        transform: scale(1);\n    }\n}\n\nth, td{\n    margin: 0;\n    padding: 0;\n    height: 32px;\n    width: 32px;\n}\n\ntd {\n    border: 1px solid black;\n}\n\ndiv.hit, div.ship {\n    margin: 0;\n    padding: 0;\n    \n    height: 100%;\n    width: 100%;\n}\n\ndiv.ship {\n    background-color: blue;\n}\n\ndiv.hit {\n    background-color: red;\n}\n\ndiv.hit.ship {\n    border: 5px solid blue;\n}\n\ntd.ship {\n    background-color: blue;\n}\n\ntd.miss, td.hit {\n    background-color: red;\n}\n\ntd.hit {\n    border: 5px solid blue;\n    box-sizing: border-box;\n}\n\ntd.selected {\n    background-color: turquoise;\n}"],sourceRoot:""}]);const a=s},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var o="",n=void 0!==t[5];return t[4]&&(o+="@supports (".concat(t[4],") {")),t[2]&&(o+="@media ".concat(t[2]," {")),n&&(o+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),o+=e(t),n&&(o+="}"),t[2]&&(o+="}"),t[4]&&(o+="}"),o})).join("")},t.i=function(e,o,n,r,i){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(n)for(var a=0;a<this.length;a++){var l=this[a][0];null!=l&&(s[l]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);n&&s[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),o&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=o):u[2]=o),r&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=r):u[4]="".concat(r)),t.push(u))}},t}},537:e=>{e.exports=function(e){var t=e[1],o=e[3];if(!o)return t;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),i="/*# ".concat(r," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function o(e){for(var o=-1,n=0;n<t.length;n++)if(t[n].identifier===e){o=n;break}return o}function n(e,n){for(var i={},s=[],a=0;a<e.length;a++){var l=e[a],c=n.base?l[0]+n.base:l[0],u=i[c]||0,d="".concat(c," ").concat(u);i[c]=u+1;var p=o(d),h={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)t[p].references++,t[p].updater(h);else{var A=r(h,n);n.byIndex=a,t.splice(a,0,{identifier:d,updater:A,references:1})}s.push(d)}return s}function r(e,t){var o=t.domAPI(t);return o.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;o.update(e=t)}else o.remove()}}e.exports=function(e,r){var i=n(e=e||[],r=r||{});return function(e){e=e||[];for(var s=0;s<i.length;s++){var a=o(i[s]);t[a].references--}for(var l=n(e,r),c=0;c<i.length;c++){var u=o(i[c]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}i=l}}},569:e=>{var t={};e.exports=function(e,o){var n=function(e){if(void 0===t[e]){var o=document.querySelector(e);if(window.HTMLIFrameElement&&o instanceof window.HTMLIFrameElement)try{o=o.contentDocument.head}catch(e){o=null}t[e]=o}return t[e]}(e);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(o)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,o)=>{e.exports=function(e){var t=o.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(o){!function(e,t,o){var n="";o.supports&&(n+="@supports (".concat(o.supports,") {")),o.media&&(n+="@media ".concat(o.media," {"));var r=void 0!==o.layer;r&&(n+="@layer".concat(o.layer.length>0?" ".concat(o.layer):""," {")),n+=o.css,r&&(n+="}"),o.media&&(n+="}"),o.supports&&(n+="}");var i=o.sourceMap;i&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(n,e,t.options)}(t,e,o)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function o(n){var r=t[n];if(void 0!==r)return r.exports;var i=t[n]={id:n,exports:{}};return e[n](i,i.exports,o),i.exports}o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.nc=void 0,(()=>{const e=(e,t)=>{for(let o=0;o<10;o++)for(let n=0;n<10;n++)e[o][n]&&t.children[o+1].children[n+1].classList.add("ship")},t=()=>{let t,o,n,r,i,s,a,l;const c=()=>{for(let e=0;e<10;e++)for(let t=0;t<10;t++)A(e,t).classList.remove("selected")},u=e=>{s.onchange=t=>{c();let o=s.value,n=e.getShipLocation(o);for(let e of n){console.log("coords:"),console.log(e);let t=A(e.row,e.col);console.log("myTD"),console.log(t),t.classList.add("selected")}}},d=()=>{if(!l.getPossibleMove())return void console.log("no move exectued- exiting out of update ship view");let e=l.getLocationChange();for(let t of e.oldLocations){let e=A(t.row,t.col);e.classList.remove("ship"),e.classList.remove("selected")}for(let t of e.newLocations){let e=A(t.row,t.col);e.classList.add("ship"),e.classList.add("selected")}},p=()=>{let e=l.getErrorMsg();console.log(e),n.textContent="outOfBounds"===e?"Cannot move ships out of bounds.":"spaceViolation"===e?"Cannot move ships to close. A minimum of one empty space between ships is required.":""},h=(o,n)=>{document.querySelector("#content"),((o,n,r)=>{e(n.getShipGrid(),t)})(0,o)},A=(e,o)=>t.children[e+1].children[o+1];return{setUp:(f,g)=>{t=document.querySelector(".shipGrid"),o=document.querySelector(".attackGrid"),n=document.querySelector(".errorText"),r=document.querySelector(".msgOne"),i=document.querySelector(".msgTwo"),s=document.querySelector("#ship-selector"),a={},a.up=document.querySelector(".up"),a.left=document.querySelector(".left"),a.down=document.querySelector(".down"),a.right=document.querySelector(".right"),a.rotate=document.querySelector(".rotate"),a.randomize=document.querySelector(".randomize"),a.start=document.querySelector(".start"),u(),(e=>{l=e})(f),((n,r)=>{a.start.onclick=()=>{((e,t)=>{for(let o=0;o<10;o++)for(let n=0;n<10;n++)e.children[o+1].children[n+1].onclick=e=>{t(o,n,e)}})(o,n),a.up.disabled=!0,a.left.disabled=!0,a.down.disabled=!0,a.right.disabled=!0,a.rotate.disabled=!0,a.randomize.disabled=!0,a.start.disabled=!0,s.disabled=!0,c()},a.randomize.onclick=()=>{l.randomizePlayerBoard(),(()=>{for(let e=0;e<10;e++)for(let t=0;t<10;t++){let o=A(e,t);o.classList.remove("ship"),o.classList.remove("selected")}})(),s.value="none",e(l.getShipGrid(),t)},u(r)})(g,f.getShipGridWrapper()),a.up.onclick=()=>{l.moveShip(s.value,"up"),d(),p()},a.down.onclick=()=>{l.moveShip(s.value,"down"),d(),p()},a.right.onclick=()=>{l.moveShip(s.value,"right"),d(),p()},a.left.onclick=()=>{l.moveShip(s.value,"left"),d(),p()},a.rotate.onclick=()=>{l.rotateShip(s.value),d(),p()},h(f)},setUpView:h,markComputerAttack:(e,t)=>{let o=A(e,t);l.isShipPresentAt(e,t,"player")?o.classList.add("hit"):o.classList.add("miss"),o.classList.add("animate")},updateMsgOne:(e,t,o)=>{let n;"miss"===o?n=`You fire at (${e}, ${t}) but hit nothing.`:"hit"===o?n=`You fire at (${e}, ${t}) and score a hit.`:"sunk"===o?n=`You fire at (${e}, ${t}), score a hit, and sink a ship.`:"loss"===o&&(n="Your opponent has sunk all your ships. You lose the match."),r.textContent=n},updateMsgTwo:(e,t,o)=>{let n;"miss"===o?n=`Your opponent fires at (${e}, ${t}) but hits nothing.`:"hit"===o?n=`Your opponent fires at (${e}, ${t}) and scores a hit.`:"sunk"===o?n=`Your opponent fires at (${e}, ${t}), scores a hit, and sinks a ship.`:"win"===o&&(n="You have sunk all your opponent's ships and won!"),i.textContent=n},updateShipView:d}},n=(e,t="noID",o="south")=>{const n=t,r=e;let i=o,s=0,a=!1;return{getHitsSustained:()=>s,hit:()=>{s++,s===r&&(a=!0)},setDirection:e=>{i=e},isSunk:()=>a,getLength:()=>r,getDirection:()=>i,getID:()=>n}},r=()=>{const e=Array(10).fill().map((()=>Array(10).fill(null))),t=[],o={},r=((e,t,o)=>{let n=e,r=t,i=o,s="none",a={},l=!1;const c=(e,t)=>e<0||e>=10||t<0||t>=10,u=e=>{for(let t of e)if(c(t.row,t.col))return!0;return!1},d=()=>{a={}},p=(e,t,o)=>!c(e,t)&&null!==n[e][t]&&void 0!==n[e][t]&&n[e][t].getID()!==o,h=(e,t)=>{for(let o of t){let t=o.row,n=o.col;if(p(t-1,n+1,e))return!0;if(p(t,n+1,e))return!0;if(p(t+1,n+1,e))return!0;if(p(t+1,n,e))return!0;if(p(t+1,n-1,e))return!0;if(p(t,n-1,e))return!0;if(p(t-1,n-1,e))return!0;if(p(t-1,n,e))return!0}return!1},A=(e,t)=>{for(let e of t)n[e.row][e.col]=null;r[e]=[]},f=(e,t)=>{for(let o of t)n[o.row][o.col]=i[e-1],r[e].push(structuredClone(o))};return{moveShip:(e,t)=>{let o=structuredClone(r[e]),n=structuredClone(((e,t)=>{let o=[],n=0,r=0;switch(t){case"up":n=-1;break;case"down":n=1;break;case"left":r=-1;break;case"right":r=1}for(let t of e){let e=t.row+n,i=t.col+r;o.push({row:e,col:i})}return o})(o,t));return u(n)?(s="outOfBounds",d(),void(l=!1)):h(e,n)?(s="spaceViolation",d(),void(l=!1)):(s="",l=!0,a={oldLocations:o,newLocations:n},A(e,o),void f(e,n))},rotateShip:e=>{let t=i[e-1],o="south"===t.getDirection()?"east":"south",n=r[e],c=((e,t)=>{let o=e[0],n=[],r=0,i=0,s=o.row,a=o.col;switch(t){case"south":r=1;break;case"east":i=1}n.push({row:s,col:a});for(let t=1;t<e.length;t++)s+=r,a+=i,n.push({row:s,col:a});return n})(n,o);return u(c)?(s="outOfBounds",d(),void(l=!1)):h(e,c)?(s="spaceViolation",d(),void(l=!1)):(s="",l=!0,a={oldLocations:n,newLocations:c},t.setDirection(o),A(e,n),void f(e,c))},getError:()=>s,getPossibleMove:()=>l,getLocationChange:()=>a,hasSpaceConflict:(e,t,o)=>(e=>{for(let t of e)if(!c(t.row,t.col)&&null!==n[t.row][t.col]&&void 0!==n[t.row][t.col])return console.log("conflict "),console.log(n[t.row][t.col]),console.log(n[t.row][t.col].getID()),console.log(t),!0})(((e,t,o)=>{let n=[],r=e.getDirection(),i=e.getLength();if("south"===r){n.push({row:t-1,col:o}),n.push({row:t-1,col:o-1}),n.push({row:t-1,col:o+1});for(let e=0;e<i;e++)n.push({row:t+e,col:o-1}),n.push({row:t+e,col:o+1});n.push({row:t+i,col:o}),n.push({row:t+i,col:o-1}),n.push({row:t+i,col:o+1})}else{n.push({row:t,col:o-1}),n.push({row:t+1,col:o-1}),n.push({row:t-1,col:o-1});for(let e=0;e<i;e++)n.push({row:t-1,col:o+e}),n.push({row:t+1,col:o+e});n.push({row:t,col:o+i}),n.push({row:t-1,col:o+i}),n.push({row:t+1,col:o+i})}return console.log("surroundsing of ship "+e.getID()),console.log(n),n})(e,t,o)),printGrid:e=>{for(let t=0;t<10;t++){let o=t+": ";for(let n=0;n<10;n++)e[t][n]?o+=e[t][n].getID():o+="_",o+=" ";console.log(o)}}}})(e,o,t);let i="";const s=(e,t)=>e>=0&&e<10&&t>=0&&t<10,a=(t,o,n)=>{let r="south"===t.getDirection()?1:0,i="east"===t.getDirection()?1:0;for(let a=0;a<t.getLength();a++){if(!s(o,n))return!1;if(null!=e[o][n])return!1;o+=r,n+=i}return!0},l=(t,n,i)=>{if(!a(t,n,i))throw r.printGrid(e),console.log(`Direction: ${t.getDirection()}`),new Error(`Failed to place ship ${t.getID()} at row: ${n}, col: ${i}`);o[t.getID()]=[];let s="south"===t.getDirection()?1:0,l="east"===t.getDirection()?1:0;for(let r=0;r<t.getLength();r++)e[n][i]=t,o[t.getID()].push({row:n,col:i}),n+=s,i+=l},c=e=>Math.floor(Math.random()*e);return{placeShip:l,getShipLocation:e=>o[e],receiveAttack:(t,o)=>{i="",e[t][o]?(e[t][o].hit(),i="hit",e[t][o].isSunk()&&(i="sunk")):i="miss"},getOutcome:()=>i,isDefeated:()=>{for(let e of t)if(!e.isSunk())return!1;return!0},initDefaultShips:()=>{(()=>{let e=n(4,"1","east"),o=n(2,"2","south"),r=n(2,"3","east"),i=n(3,"4","south"),s=n(1,"5","south"),a=n(3,"6","south"),l=n(2,"7","east"),c=n(1,"8"),u=n(1,"9"),d=n(1,"10");t.push(e),t.push(o),t.push(r),t.push(i),t.push(s),t.push(a),t.push(l),t.push(c),t.push(u),t.push(d)})(),l(t[0],0,4),l(t[1],0,9),l(t[2],2,0),l(t[3],3,4),l(t[4],3,6),l(t[5],4,9),l(t[6],5,0),l(t[7],8,0),l(t[8],9,5),l(t[9],9,9)},randomize:()=>{(()=>{for(let t=0;t<10;t++)for(let o=0;o<10;o++)e[t][o]=null})(),(()=>{for(let e in o)delete o[e]})();for(let e of t){let t,o,n;do{t=c(10),o=c(10),n=0===c(2)?"south":"east",e.setDirection(n)}while(!a(e,t,o)||r.hasSpaceConflict(e,t,o));l(e,t,o)}console.log("reached"),r.printGrid(e)},getShipGrid:()=>e,getShipArr:()=>t,getShipLocations:()=>o,isShipPresentAt:(t,o)=>null!=e[t][o],moveShip:(e,t)=>{r.moveShip(e,t)},rotateShip:e=>{r.rotateShip(e)},getLocationChange:()=>r.getLocationChange(),getErrorMsg:()=>r.getError(),getPossibleMove:()=>r.getPossibleMove()}},i=()=>{const e=Array(10).fill().map((()=>Array(10).fill(null)));return{isValidAttack:(t,o)=>((e,t)=>e>=0&&e<10&&t>=0&&t<10)(t,o)&&null===e[t][o],recordAttack:(t,o)=>{e[t][o]="hit"}}};var s=o(379),a=o.n(s),l=o(795),c=o.n(l),u=o(569),d=o.n(u),p=o(565),h=o.n(p),A=o(216),f=o.n(A),g=o(589),m=o.n(g),v=o(426),w={};w.styleTagTransform=m(),w.setAttributes=h(),w.insert=d().bind(null,"head"),w.domAPI=c(),w.insertStyleElement=f(),a()(v.Z,w),v.Z&&v.Z.locals&&v.Z.locals,(()=>{let e=(()=>{const e=r(),t=r(),o=i(),n=i();let s="",a="";e.initDefaultShips(),t.initDefaultShips();const l=(e=>{let t=()=>Math.floor(10*Math.random());return{pickTargetSimple:()=>{let o=t(),n=t();for(;!e.isValidAttack(o,n);)console.log(`(${o}, ${n}) is invalid. Rerolling`),o=t(),n=t();return console.log(`AI final target (${o}, ${n})`),{row:o,col:n}}}})(n);return{getShipGrid:()=>e.getShipGrid(),getShipGridWrapper:()=>e,processUserInput:(e,n)=>{o.isValidAttack(e,n)&&(t.receiveAttack(e,n),s=t.getOutcome(),o.recordAttack(e,n))},isAttackableByPlayer:(e,t)=>o.isValidAttack(e,t),winCheckPlayer:()=>t.isDefeated(),winCheckComputer:()=>e.isDefeated(),isShipPresentAt:(o,n,r)=>("computer"===r?t:e).isShipPresentAt(o,n),processComputerAttack:()=>{let t=l.pickTargetSimple();if(n.isValidAttack(t.row,t.col))return e.receiveAttack(t.row,t.col),a=e.getOutcome(),n.recordAttack(t.row,t.col),t;console.log("game master: processComputerAttackError")},getPlayerTurnResult:()=>s,getComputerTurnResult:()=>a,moveShip:(t,o)=>{e.moveShip(t,o)},rotateShip:(t,o)=>{e.rotateShip(t)},getLocationChange:()=>e.getLocationChange(),getErrorMsg:()=>e.getErrorMsg(),getPossibleMove:()=>e.getPossibleMove(),randomizePlayerBoard:()=>{e.randomize()},randomizeComputerBoard:()=>{t.randomize()}}})(),o=t();const n=(t,n,r)=>{if(!e.isAttackableByPlayer(t,n))return;if(((e,t)=>{console.log(e.target);let o=e.target;o.classList.add("animate"),t?o.classList.add("hit"):o.classList.add("miss")})(r,e.isShipPresentAt(r.target.dataset.row,r.target.dataset.col,"computer")),e.processUserInput(t,n),o.updateMsgOne(t,n,e.getPlayerTurnResult()),e.winCheckPlayer())return console.log("player wins"),void o.updateMsgTwo(0,0,"win");let i=e.processComputerAttack();o.markComputerAttack(i.row,i.col),console.log(`Your opponent fires at (${i.row}, ${i.col}) and ${e.getComputerTurnResult()}`),o.updateMsgTwo(i.row,i.col,e.getComputerTurnResult()),e.winCheckComputer()&&(console.log("computer wins"),o.updateMsgTwo(0,0,"loss"))};return{initiate:()=>{o.setUp(e,n)},processUserInput:n,getShipGrid:()=>e.getShipGrid()}})().initiate()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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c291cmNlcyI6WyJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL3ZpZXdDb250cm9sbGVyLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc2hpcEZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zaGlwR3JpZEZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy90cmFmZmljQ29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2F0dGFja0dyaWRGYWN0b3J5LmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc3R5bGUuY3NzPzcxNjMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy93ZWJzaXRlTWFuYWdlci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2dhbWVNYXN0ZXIuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9jb21wdXRlclRhcmdldGluZy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGBib2R5IHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBsaWdodGdyYXk7XG59XG5cbi5hbmltYXRlIHtcbiAgICAvKiBhbmltYXRpb246IDAuN3Mgc2xpZGUtaW4gMC43cyAzIGxpbmVhcjsgKi9cbiAgICBhbmltYXRpb24tbmFtZTogc2xpZGUtaW47XG4gICAgYW5pbWF0aW9uLWR1cmF0aW9uOiAwLjNzO1xuICAgIGFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6IDM7XG59XG4gIFxuQGtleWZyYW1lcyBzbGlkZS1pbiB7XG4gICAgMCUge1xuICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDAuMjUpO1xuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTEwMDBweCk7XG4gICAgfVxuICAgIDgwJXtcbiAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgwLjI1KTtcbiAgICB9XG4gICAgMTAwJSB7XG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwKTtcbiAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcbiAgICB9XG59XG5cbnRoLCB0ZHtcbiAgICBtYXJnaW46IDA7XG4gICAgcGFkZGluZzogMDtcbiAgICBoZWlnaHQ6IDMycHg7XG4gICAgd2lkdGg6IDMycHg7XG59XG5cbnRkIHtcbiAgICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcbn1cblxuZGl2LmhpdCwgZGl2LnNoaXAge1xuICAgIG1hcmdpbjogMDtcbiAgICBwYWRkaW5nOiAwO1xuICAgIFxuICAgIGhlaWdodDogMTAwJTtcbiAgICB3aWR0aDogMTAwJTtcbn1cblxuZGl2LnNoaXAge1xuICAgIGJhY2tncm91bmQtY29sb3I6IGJsdWU7XG59XG5cbmRpdi5oaXQge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHJlZDtcbn1cblxuZGl2LmhpdC5zaGlwIHtcbiAgICBib3JkZXI6IDVweCBzb2xpZCBibHVlO1xufVxuXG50ZC5zaGlwIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBibHVlO1xufVxuXG50ZC5taXNzLCB0ZC5oaXQge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHJlZDtcbn1cblxudGQuaGl0IHtcbiAgICBib3JkZXI6IDVweCBzb2xpZCBibHVlO1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG59XG5cbnRkLnNlbGVjdGVkIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0dXJxdW9pc2U7XG59YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksMkJBQTJCO0FBQy9COztBQUVBO0lBQ0ksNENBQTRDO0lBQzVDLHdCQUF3QjtJQUN4Qix3QkFBd0I7SUFDeEIsNEJBQTRCO0FBQ2hDOztBQUVBO0lBQ0k7UUFDSSxzQkFBc0I7UUFDdEIsOEJBQThCO0lBQ2xDO0lBQ0E7UUFDSSxzQkFBc0I7SUFDMUI7SUFDQTtRQUNJLHdCQUF3QjtRQUN4QixtQkFBbUI7SUFDdkI7QUFDSjs7QUFFQTtJQUNJLFNBQVM7SUFDVCxVQUFVO0lBQ1YsWUFBWTtJQUNaLFdBQVc7QUFDZjs7QUFFQTtJQUNJLHVCQUF1QjtBQUMzQjs7QUFFQTtJQUNJLFNBQVM7SUFDVCxVQUFVOztJQUVWLFlBQVk7SUFDWixXQUFXO0FBQ2Y7O0FBRUE7SUFDSSxzQkFBc0I7QUFDMUI7O0FBRUE7SUFDSSxxQkFBcUI7QUFDekI7O0FBRUE7SUFDSSxzQkFBc0I7QUFDMUI7O0FBRUE7SUFDSSxzQkFBc0I7QUFDMUI7O0FBRUE7SUFDSSxxQkFBcUI7QUFDekI7O0FBRUE7SUFDSSxzQkFBc0I7SUFDdEIsc0JBQXNCO0FBQzFCOztBQUVBO0lBQ0ksMkJBQTJCO0FBQy9CXCIsXCJzb3VyY2VzQ29udGVudFwiOltcImJvZHkge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBsaWdodGdyYXk7XFxufVxcblxcbi5hbmltYXRlIHtcXG4gICAgLyogYW5pbWF0aW9uOiAwLjdzIHNsaWRlLWluIDAuN3MgMyBsaW5lYXI7ICovXFxuICAgIGFuaW1hdGlvbi1uYW1lOiBzbGlkZS1pbjtcXG4gICAgYW5pbWF0aW9uLWR1cmF0aW9uOiAwLjNzO1xcbiAgICBhbmltYXRpb24taXRlcmF0aW9uLWNvdW50OiAzO1xcbn1cXG4gIFxcbkBrZXlmcmFtZXMgc2xpZGUtaW4ge1xcbiAgICAwJSB7XFxuICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDAuMjUpO1xcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0xMDAwcHgpO1xcbiAgICB9XFxuICAgIDgwJXtcXG4gICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMC4yNSk7XFxuICAgIH1cXG4gICAgMTAwJSB7XFxuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMCk7XFxuICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEpO1xcbiAgICB9XFxufVxcblxcbnRoLCB0ZHtcXG4gICAgbWFyZ2luOiAwO1xcbiAgICBwYWRkaW5nOiAwO1xcbiAgICBoZWlnaHQ6IDMycHg7XFxuICAgIHdpZHRoOiAzMnB4O1xcbn1cXG5cXG50ZCB7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xcbn1cXG5cXG5kaXYuaGl0LCBkaXYuc2hpcCB7XFxuICAgIG1hcmdpbjogMDtcXG4gICAgcGFkZGluZzogMDtcXG4gICAgXFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgd2lkdGg6IDEwMCU7XFxufVxcblxcbmRpdi5zaGlwIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogYmx1ZTtcXG59XFxuXFxuZGl2LmhpdCB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJlZDtcXG59XFxuXFxuZGl2LmhpdC5zaGlwIHtcXG4gICAgYm9yZGVyOiA1cHggc29saWQgYmx1ZTtcXG59XFxuXFxudGQuc2hpcCB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IGJsdWU7XFxufVxcblxcbnRkLm1pc3MsIHRkLmhpdCB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJlZDtcXG59XFxuXFxudGQuaGl0IHtcXG4gICAgYm9yZGVyOiA1cHggc29saWQgYmx1ZTtcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuXFxudGQuc2VsZWN0ZWQge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0dXJxdW9pc2U7XFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTtcblxuICAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG5cbiAgICAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cbiAgY3NzICs9IG9iai5jc3M7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH1cblxuICAvLyBGb3Igb2xkIElFXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoKSB7fSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5uYyA9IHVuZGVmaW5lZDsiLCJjb25zdCBkaXNwbGF5U2hpcHMgPSAoc2hpcEdyaWQsIHRhYmxlKSA9PiB7XG4gICAgZm9yKGxldCByb3cgPSAwOyByb3cgPCAxMDsgcm93Kyspe1xuICAgICAgICBmb3IobGV0IGNvbCA9IDA7IGNvbCA8IDEwOyBjb2wrKyl7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKHNoaXBHcmlkW3Jvd11bY29sXSk7XG4gICAgICAgICAgICBpZihzaGlwR3JpZFtyb3ddW2NvbF0pe1xuICAgICAgICAgICAgICAgIGxldCB0YWJsZVJvdyA9IHRhYmxlLmNoaWxkcmVuW3JvdyArIDFdO1xuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ2hlbGxvJyk7XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyh0YWJsZVJvdyk7XG4gICAgICAgICAgICAgICAgbGV0IGNlbGwgPSB0YWJsZVJvdy5jaGlsZHJlbltjb2wgKyAxXTtcbiAgICAgICAgICAgICAgICAvL2NlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZChcInNoaXBcIilcbiAgICAgICAgICAgICAgICAvL215RGl2LnRleHRDb250ZW50ID0gXCJzXCI7XG4gICAgICAgICAgICAgICAgLy9jZWxsLnRleHRDb250ZW50ID0gXCJhc2RmYXNcIjtcbiAgICAgICAgICAgICAgICAvL2NlbGwuYXBwZW5kQ2hpbGQobXlEaXYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5jb25zdCBtYWtlQXR0YWNrR3JpZENsaWNrYWJsZSA9ICh0Ym9keSwgcHJvY2Vzc1VzZXJJbnB1dCkgPT4ge1xuICBmb3IobGV0IHJvdyA9IDA7IHJvdyA8IDEwOyByb3crKyl7XG4gICAgICBmb3IobGV0IGNvbCA9IDA7IGNvbCA8IDEwOyBjb2wrKyl7XG4gICAgICAgICAgbGV0IHRhYmxlUm93ID0gdGJvZHkuY2hpbGRyZW5bcm93ICsgMV07XG4gICAgICAgICAgbGV0IGNlbGwgPSB0YWJsZVJvdy5jaGlsZHJlbltjb2wgKyAxXTtcbiAgICAgICAgICBjZWxsLm9uY2xpY2sgPSAoY2xpY2spID0+IHtcbiAgICAgICAgICAgIHByb2Nlc3NVc2VySW5wdXQocm93LCBjb2wsIGNsaWNrKTtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coYG1hcmtpbmcgdGhpcyBmcm9tIG9uY2xpY2sgJHt0aGlzfWApO1xuICAgICAgICAgIH1cbiAgICAgIH1cbiAgfVxufVxuXG5jb25zdCBtYXJrQXR0YWNrID0gKGNsaWNrLCBzaGlwUHJlc2VudCkgPT4ge1xuICBjb25zb2xlLmxvZyhjbGljay50YXJnZXQpO1xuICBsZXQgbXlURCA9IGNsaWNrLnRhcmdldDtcbiAgLyogbGV0IG15RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7ICovXG4gIG15VEQuY2xhc3NMaXN0LmFkZCgnYW5pbWF0ZScpO1xuICBpZihzaGlwUHJlc2VudCl7XG4gICAgbXlURC5jbGFzc0xpc3QuYWRkKCdoaXQnKTtcbiAgfSBlbHNlIHtcbiAgICBteVRELmNsYXNzTGlzdC5hZGQoJ21pc3MnKTtcbiAgfVxuICAvKiBjbGljay50YXJnZXQuYXBwZW5kQ2hpbGQobXlEaXYpOyAqL1xufVxuXG5jb25zdCB2aWV3Q29udHJvbGxlciA9ICgpID0+IHtcbiAgbGV0IHNoaXBUQm9keTtcbiAgbGV0IGF0dGFja0dyaWQ7XG4gIGxldCBlcnJvck1lc3NhZ2U7XG4gIGxldCBtc2dPbmU7XG4gIGxldCBtc2dUd287XG4gIGxldCBzaGlwU2VsZWN0b3I7XG4gIGxldCBidXR0b25TdWl0ZTtcbiAgbGV0IGdhbWVNYXN0ZXI7XG5cbiAgY29uc3QgY2xlYXJFeGlzdGluZ0hpZ2hsaWdodHMgPSAoKSA9PiB7XG4gICAgZm9yKGxldCByb3cgPSAwOyByb3cgPCAxMDsgcm93Kyspe1xuICAgICAgZm9yKGxldCBjb2wgPSAwOyBjb2wgPCAxMDsgY29sKyspe1xuICAgICAgICBnZXRUYWJsZUNlbGwocm93LCBjb2wpLmNsYXNzTGlzdC5yZW1vdmUoJ3NlbGVjdGVkJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY29uc3QgY3JlYXRlSGlnaGxpZ2h0aW5nID0gKHNoaXBHcmlkV3JhcHBlcikgPT4ge1xuICAgIHNoaXBTZWxlY3Rvci5vbmNoYW5nZSA9IChldmVudCkgPT4ge1xuICAgICAgY2xlYXJFeGlzdGluZ0hpZ2hsaWdodHMoKTtcblxuXG4gICAgICBsZXQgc2hpcElEID0gc2hpcFNlbGVjdG9yLnZhbHVlO1xuICAgICAgbGV0IGNvb3JkaW5hdGVzID0gc2hpcEdyaWRXcmFwcGVyLmdldFNoaXBMb2NhdGlvbihzaGlwSUQpO1xuICAgICAgZm9yKGxldCBjb29yZCBvZiBjb29yZGluYXRlcyl7XG4gICAgICAgIGNvbnNvbGUubG9nKCdjb29yZHM6Jyk7XG4gICAgICAgIGNvbnNvbGUubG9nKGNvb3JkKTsvLy8vLy8vLy9cbiAgICAgICAgbGV0IG15VEQgPSBnZXRUYWJsZUNlbGwoY29vcmQucm93LCBjb29yZC5jb2wpO1xuICAgICAgICBjb25zb2xlLmxvZygnbXlURCcpO1xuICAgICAgICBjb25zb2xlLmxvZyhteVREKTsvLy8vLy8vLy9cbiAgICAgICAgbXlURC5jbGFzc0xpc3QuYWRkKCdzZWxlY3RlZCcpXG4gICAgICB9XG4gICAgICBnZXRUYWJsZUNlbGxcbiAgICB9XG4gIH1cblxuICBjb25zdCBkaXNhYmxlTW92ZW1lbnRCdG5zID0gKCkgPT4ge1xuICAgIGJ1dHRvblN1aXRlLnVwLmRpc2FibGVkID0gdHJ1ZTtcbiAgICBidXR0b25TdWl0ZS5sZWZ0LmRpc2FibGVkID0gdHJ1ZTtcbiAgICBidXR0b25TdWl0ZS5kb3duLmRpc2FibGVkID0gdHJ1ZTtcbiAgICBidXR0b25TdWl0ZS5yaWdodC5kaXNhYmxlZCA9IHRydWU7XG4gICAgYnV0dG9uU3VpdGUucm90YXRlLmRpc2FibGVkID0gdHJ1ZTtcbiAgICBidXR0b25TdWl0ZS5yYW5kb21pemUuZGlzYWJsZWQgPSB0cnVlO1xuICAgIGJ1dHRvblN1aXRlLnN0YXJ0LmRpc2FibGVkID0gdHJ1ZTtcbiAgICBzaGlwU2VsZWN0b3IuZGlzYWJsZWQgPSB0cnVlO1xuICB9XG5cbiAgY29uc3QgY2xlYXJTaGlwRGlzcGxheSA9ICgpID0+IHtcbiAgICBmb3IobGV0IHJvdyA9IDA7IHJvdyA8IDEwOyByb3crKyl7XG4gICAgICBmb3IobGV0IGNvbCA9IDA7IGNvbCA8IDEwOyBjb2wrKyl7XG4gICAgICAgIGxldCBjZWxsID0gZ2V0VGFibGVDZWxsKHJvdywgY29sKTtcbiAgICAgICAgY2VsbC5jbGFzc0xpc3QucmVtb3ZlKCdzaGlwJyk7XG4gICAgICAgIGNlbGwuY2xhc3NMaXN0LnJlbW92ZSgnc2VsZWN0ZWQnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjb25zdCBjbGVhclNoaXBTZWxlY3RvciA9ICgpID0+IHtcbiAgICBzaGlwU2VsZWN0b3IudmFsdWUgPSAnbm9uZSc7XG4gIH1cblxuICBjb25zdCBsb2FkQnV0dG9uRnVuY3Rpb25hbGl0eSA9IChwcm9jZXNzVXNlcklucHV0LCBzaGlwR3JpZCkgPT4ge1xuICAgIGJ1dHRvblN1aXRlLnN0YXJ0Lm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgICBtYWtlQXR0YWNrR3JpZENsaWNrYWJsZShhdHRhY2tHcmlkLCBwcm9jZXNzVXNlcklucHV0KTtcbiAgICAgIGRpc2FibGVNb3ZlbWVudEJ0bnMoKTtcbiAgICAgIGNsZWFyRXhpc3RpbmdIaWdobGlnaHRzKCk7XG4gICAgICAvL2hpZGVNb3ZlbWVudEJ0bnMoKTsvL25lZWQgdG8gaW1wbGVtZW50XG4gICAgfVxuICAgIGJ1dHRvblN1aXRlLnJhbmRvbWl6ZS5vbmNsaWNrID0gKCkgPT4ge1xuICAgICAgZ2FtZU1hc3Rlci5yYW5kb21pemVQbGF5ZXJCb2FyZCgpO1xuICAgICAgY2xlYXJTaGlwRGlzcGxheSgpO1xuICAgICAgY2xlYXJTaGlwU2VsZWN0b3IoKTtcbiAgICAgIGRpc3BsYXlTaGlwcyhnYW1lTWFzdGVyLmdldFNoaXBHcmlkKCksIHNoaXBUQm9keSlcbiAgICB9XG4gICAgY3JlYXRlSGlnaGxpZ2h0aW5nKHNoaXBHcmlkKTtcbiAgfVxuXG4gIGNvbnN0IHVwZGF0ZVNoaXBWaWV3ID0gKCkgPT4ge1xuXG4gICAgaWYoIWdhbWVNYXN0ZXIuZ2V0UG9zc2libGVNb3ZlKCkpe1xuICAgICAgY29uc29sZS5sb2coJ25vIG1vdmUgZXhlY3R1ZWQtIGV4aXRpbmcgb3V0IG9mIHVwZGF0ZSBzaGlwIHZpZXcnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IGxvY2F0aW9uQ2hhbmdlID0gZ2FtZU1hc3Rlci5nZXRMb2NhdGlvbkNoYW5nZSgpO1xuICAgIGZvcihsZXQgbG9jYXRpb24gb2YgbG9jYXRpb25DaGFuZ2Uub2xkTG9jYXRpb25zKXtcbiAgICAgIGxldCBjZWxsID0gZ2V0VGFibGVDZWxsKGxvY2F0aW9uLnJvdywgbG9jYXRpb24uY29sKTtcbiAgICAgIGNlbGwuY2xhc3NMaXN0LnJlbW92ZSgnc2hpcCcpO1xuICAgICAgY2VsbC5jbGFzc0xpc3QucmVtb3ZlKCdzZWxlY3RlZCcpO1xuICAgIH1cbiAgICBcbiAgICBmb3IobGV0IGxvY2F0aW9uIG9mIGxvY2F0aW9uQ2hhbmdlLm5ld0xvY2F0aW9ucyl7XG4gICAgICBsZXQgY2VsbCA9IGdldFRhYmxlQ2VsbChsb2NhdGlvbi5yb3csIGxvY2F0aW9uLmNvbCk7XG4gICAgICBjZWxsLmNsYXNzTGlzdC5hZGQoJ3NoaXAnKTtcbiAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCB1cGRhdGVFcnJvck1zZyA9ICgpID0+IHtcbiAgICBsZXQgZXJyb3JDb2RlID0gZ2FtZU1hc3Rlci5nZXRFcnJvck1zZygpO1xuICAgIGNvbnNvbGUubG9nKGVycm9yQ29kZSk7XG4gICAgaWYoZXJyb3JDb2RlID09PSAnb3V0T2ZCb3VuZHMnKXtcbiAgICAgIGVycm9yTWVzc2FnZS50ZXh0Q29udGVudCA9ICdDYW5ub3QgbW92ZSBzaGlwcyBvdXQgb2YgYm91bmRzLic7XG4gICAgfSBlbHNlIGlmKGVycm9yQ29kZSA9PT0gJ3NwYWNlVmlvbGF0aW9uJyl7XG4gICAgICBlcnJvck1lc3NhZ2UudGV4dENvbnRlbnQgPSAnQ2Fubm90IG1vdmUgc2hpcHMgdG8gY2xvc2UuIEEgbWluaW11bSBvZiBvbmUgZW1wdHkgc3BhY2UgYmV0d2VlbiBzaGlwcyBpcyByZXF1aXJlZC4nO1xuICAgIH0gZWxzZSB7XG4gICAgICBlcnJvck1lc3NhZ2UudGV4dENvbnRlbnQgPSAnJztcbiAgICB9XG4gICAgXG4gIH1cblxuICBjb25zdCBsb2FkTW92ZW1lbnRCdXR0b25GdW5jdGlvbmFsaXR5ID0gKCkgPT4ge1xuICAgIGJ1dHRvblN1aXRlLnVwLm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgICBnYW1lTWFzdGVyLm1vdmVTaGlwKHNoaXBTZWxlY3Rvci52YWx1ZSwgJ3VwJyk7XG4gICAgICB1cGRhdGVTaGlwVmlldygpO1xuICAgICAgdXBkYXRlRXJyb3JNc2coKTtcbiAgICB9XG4gICAgYnV0dG9uU3VpdGUuZG93bi5vbmNsaWNrID0gKCkgPT4ge1xuICAgICAgZ2FtZU1hc3Rlci5tb3ZlU2hpcChzaGlwU2VsZWN0b3IudmFsdWUsICdkb3duJyk7XG4gICAgICB1cGRhdGVTaGlwVmlldygpO1xuICAgICAgdXBkYXRlRXJyb3JNc2coKTtcbiAgICB9XG4gICAgYnV0dG9uU3VpdGUucmlnaHQub25jbGljayA9ICgpID0+IHtcbiAgICAgIGdhbWVNYXN0ZXIubW92ZVNoaXAoc2hpcFNlbGVjdG9yLnZhbHVlLCAncmlnaHQnKTtcbiAgICAgIHVwZGF0ZVNoaXBWaWV3KCk7XG4gICAgICB1cGRhdGVFcnJvck1zZygpO1xuICAgIH1cbiAgICBidXR0b25TdWl0ZS5sZWZ0Lm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgICBnYW1lTWFzdGVyLm1vdmVTaGlwKHNoaXBTZWxlY3Rvci52YWx1ZSwgJ2xlZnQnKTtcbiAgICAgIHVwZGF0ZVNoaXBWaWV3KCk7XG4gICAgICB1cGRhdGVFcnJvck1zZygpO1xuICAgIH1cbiAgICBidXR0b25TdWl0ZS5yb3RhdGUub25jbGljayA9ICgpID0+IHtcbiAgICAgIGdhbWVNYXN0ZXIucm90YXRlU2hpcChzaGlwU2VsZWN0b3IudmFsdWUpO1xuICAgICAgdXBkYXRlU2hpcFZpZXcoKTtcbiAgICAgIHVwZGF0ZUVycm9yTXNnKCk7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgbG9hZEJ1dHRvblN1aXRlID0gKCkgPT4ge1xuICAgIGJ1dHRvblN1aXRlID0ge307XG4gICAgYnV0dG9uU3VpdGUudXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudXAnKTtcbiAgICBidXR0b25TdWl0ZS5sZWZ0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxlZnQnKTtcbiAgICBidXR0b25TdWl0ZS5kb3duID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmRvd24nKTtcbiAgICBidXR0b25TdWl0ZS5yaWdodCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5yaWdodCcpO1xuICAgIGJ1dHRvblN1aXRlLnJvdGF0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5yb3RhdGUnKTtcbiAgICBidXR0b25TdWl0ZS5yYW5kb21pemUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucmFuZG9taXplJyk7XG4gICAgYnV0dG9uU3VpdGUuc3RhcnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc3RhcnQnKTtcbiAgfVxuXG4gIGNvbnN0IGxvYWRFbGVtZW50cyA9ICgpID0+IHtcbiAgICBzaGlwVEJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2hpcEdyaWQnKTtcbiAgICBhdHRhY2tHcmlkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmF0dGFja0dyaWQnKTtcbiAgICBlcnJvck1lc3NhZ2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZXJyb3JUZXh0Jyk7XG4gICAgbXNnT25lID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1zZ09uZScpO1xuICAgIG1zZ1R3byA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tc2dUd28nKTtcbiAgICBzaGlwU2VsZWN0b3IgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc2hpcC1zZWxlY3RvcicpO1xuICAgIGxvYWRCdXR0b25TdWl0ZSgpO1xuICAgIGNyZWF0ZUhpZ2hsaWdodGluZygpO1xuICB9XG5cbiAgY29uc3QgbG9hZEdhbWVNYXN0ZXIgPSAoZ2FtZSkgPT4ge1xuICAgIGdhbWVNYXN0ZXIgPSBnYW1lO1xuICB9XG5cbiAgY29uc3QgdXBkYXRlTXNnT25lID0gKHJvdywgY29sLCByZXN1bHQpID0+IHtcbiAgICBsZXQgbXNnO1xuICAgIGlmKHJlc3VsdCA9PT0gJ21pc3MnKXtcbiAgICAgIG1zZyA9IGBZb3UgZmlyZSBhdCAoJHtyb3d9LCAke2NvbH0pIGJ1dCBoaXQgbm90aGluZy5gO1xuICAgIH0gZWxzZSBpZiAocmVzdWx0ID09PSAnaGl0Jyl7XG4gICAgICBtc2cgPSBgWW91IGZpcmUgYXQgKCR7cm93fSwgJHtjb2x9KSBhbmQgc2NvcmUgYSBoaXQuYDtcbiAgICB9IGVsc2UgaWYgKHJlc3VsdCA9PT0gJ3N1bmsnKXtcbiAgICAgIG1zZyA9IGBZb3UgZmlyZSBhdCAoJHtyb3d9LCAke2NvbH0pLCBzY29yZSBhIGhpdCwgYW5kIHNpbmsgYSBzaGlwLmA7XG4gICAgfSBlbHNlIGlmIChyZXN1bHQgPT09ICdsb3NzJyl7XG4gICAgICBtc2cgPSBgWW91ciBvcHBvbmVudCBoYXMgc3VuayBhbGwgeW91ciBzaGlwcy4gWW91IGxvc2UgdGhlIG1hdGNoLmA7XG4gICAgfVxuICAgIG1zZ09uZS50ZXh0Q29udGVudCA9IG1zZztcbiAgfVxuXG4gIGNvbnN0IHVwZGF0ZU1zZ1R3byA9IChyb3csIGNvbCwgcmVzdWx0KSA9PiB7XG4gICAgbGV0IG1zZztcbiAgICBpZihyZXN1bHQgPT09ICdtaXNzJyl7XG4gICAgICBtc2cgPSBgWW91ciBvcHBvbmVudCBmaXJlcyBhdCAoJHtyb3d9LCAke2NvbH0pIGJ1dCBoaXRzIG5vdGhpbmcuYDtcbiAgICB9IGVsc2UgaWYgKHJlc3VsdCA9PT0gJ2hpdCcpe1xuICAgICAgbXNnID0gYFlvdXIgb3Bwb25lbnQgZmlyZXMgYXQgKCR7cm93fSwgJHtjb2x9KSBhbmQgc2NvcmVzIGEgaGl0LmA7XG4gICAgfSBlbHNlIGlmIChyZXN1bHQgPT09ICdzdW5rJyl7XG4gICAgICBtc2cgPSBgWW91ciBvcHBvbmVudCBmaXJlcyBhdCAoJHtyb3d9LCAke2NvbH0pLCBzY29yZXMgYSBoaXQsIGFuZCBzaW5rcyBhIHNoaXAuYDtcbiAgICB9IGVsc2UgaWYgKHJlc3VsdCA9PT0gJ3dpbicpe1xuICAgICAgbXNnID0gYFlvdSBoYXZlIHN1bmsgYWxsIHlvdXIgb3Bwb25lbnQncyBzaGlwcyBhbmQgd29uIWA7XG4gICAgfVxuICAgIG1zZ1R3by50ZXh0Q29udGVudCA9IG1zZztcbiAgfVxuXG4gIGNvbnN0IHNldFVwTWFpbiA9IChjb250YWluZXIsIGdhbWUsIHByb2Nlc3NVc2VySW5wdXQpID0+IHtcbiAgICAvKiBzaGlwVEJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2hpcEdyaWQnKTtcbiAgICBhdHRhY2tHcmlkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmF0dGFja0dyaWQnKTsgKi9cbiAgICBkaXNwbGF5U2hpcHMoZ2FtZS5nZXRTaGlwR3JpZCgpLCBzaGlwVEJvZHkpXG4gICAgLyogbWFrZUF0dGFja0dyaWRDbGlja2FibGUoYXR0YWNrR3JpZCwgcHJvY2Vzc1VzZXJJbnB1dCk7ICovXG4gIH1cblxuICBjb25zdCBzZXRVcFZpZXcgPSAoZ2FtZSwgcHJvY2Vzc1VzZXJJbnB1dCkgPT4ge1xuICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjY29udGVudFwiKTtcbiAgICBcbiAgICBzZXRVcE1haW4oY29udGFpbmVyLCBnYW1lLCBwcm9jZXNzVXNlcklucHV0KTtcbiAgfVxuXG4gIGNvbnN0IHNldFVwID0gKGdhbWUsIHByb2Nlc3NVc2VySW5wdXQpID0+IHtcbiAgICBsb2FkRWxlbWVudHMoKTtcbiAgICBsb2FkR2FtZU1hc3RlcihnYW1lKTtcbiAgICBsb2FkQnV0dG9uRnVuY3Rpb25hbGl0eShwcm9jZXNzVXNlcklucHV0LCBnYW1lLmdldFNoaXBHcmlkV3JhcHBlcigpKTtcbiAgICBsb2FkTW92ZW1lbnRCdXR0b25GdW5jdGlvbmFsaXR5KCk7XG4gICAgc2V0VXBWaWV3KGdhbWUsIHByb2Nlc3NVc2VySW5wdXQpO1xuICB9XG4gIGNvbnN0IGdldFRhYmxlQ2VsbCA9IChyb3csIGNvbCkgPT4ge1xuICAgIGxldCB0YWJsZVJvdyA9IHNoaXBUQm9keS5jaGlsZHJlbltyb3cgKyAxXTtcbiAgICBsZXQgY2VsbCA9IHRhYmxlUm93LmNoaWxkcmVuW2NvbCArIDFdO1xuICAgIHJldHVybiBjZWxsO1xuICB9XG4gIGNvbnN0IG1hcmtDb21wdXRlckF0dGFjayA9IChyb3csIGNvbCkgPT4ge1xuICAgIGxldCBteVREID0gZ2V0VGFibGVDZWxsKHJvdywgY29sKTtcblxuICAgIGlmKGdhbWVNYXN0ZXIuaXNTaGlwUHJlc2VudEF0KHJvdywgY29sLCAncGxheWVyJykpe1xuICAgICAgbXlURC5jbGFzc0xpc3QuYWRkKCdoaXQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbXlURC5jbGFzc0xpc3QuYWRkKCdtaXNzJyk7XG4gICAgfVxuICAgIG15VEQuY2xhc3NMaXN0LmFkZCgnYW5pbWF0ZScpXG4gIH1cblxuICByZXR1cm4geyBcbiAgICBzZXRVcCwgXG4gICAgc2V0VXBWaWV3LCBcbiAgICBtYXJrQ29tcHV0ZXJBdHRhY2ssIFxuICAgIHVwZGF0ZU1zZ09uZSwgXG4gICAgdXBkYXRlTXNnVHdvLFxuICAgIHVwZGF0ZVNoaXBWaWV3XG4gICB9O1xufVxuXG5leHBvcnQgeyBcbiAgICB2aWV3Q29udHJvbGxlcixcbiAgICBtYXJrQXR0YWNrLFxufTtcbiIsImNvbnN0IHNoaXBGYWN0b3J5ID0gKGxlbiwgc2hpcElEID0nbm9JRCcsIGRpciA9ICdzb3V0aCcpID0+IHtcbiAgICBjb25zdCBpZCA9IHNoaXBJRDtcbiAgICBjb25zdCBsZW5ndGggPSBsZW47XG4gICAgbGV0IGRpcmVjdGlvbiA9IGRpcjtcbiAgICBsZXQgaGl0c1N1c3RhaW5lZCA9IDA7XG4gICAgbGV0IHN1bmsgPSBmYWxzZTtcblxuICAgIGNvbnN0IGdldEhpdHNTdXN0YWluZWQgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBoaXRzU3VzdGFpbmVkO1xuICAgIH1cbiAgICBjb25zdCBoaXQgPSAoKSA9PiB7XG4gICAgICAgIC8vY29uc29sZS5sb2coJ2hpdCcpO1xuICAgICAgICBoaXRzU3VzdGFpbmVkKys7XG4gICAgICAgIGlmKGhpdHNTdXN0YWluZWQgPT09IGxlbmd0aCl7XG4gICAgICAgICAgICBzdW5rID0gdHJ1ZTtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ3N1bmsnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCBzZXREaXJlY3Rpb24gPSAobmV3RGlyZWN0aW9uKSA9PiB7XG4gICAgICAgIGRpcmVjdGlvbiA9IG5ld0RpcmVjdGlvbjtcbiAgICB9XG4gICAgY29uc3QgaXNTdW5rID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gc3VuaztcbiAgICB9XG4gICAgY29uc3QgZ2V0TGVuZ3RoID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gbGVuZ3RoO1xuICAgIH1cbiAgICBjb25zdCBnZXREaXJlY3Rpb24gPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBkaXJlY3Rpb247XG4gICAgfVxuICAgIGNvbnN0IGdldElEID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gaWQ7XG4gICAgfVxuICAgIHJldHVybiB7IFxuICAgICAgICBnZXRIaXRzU3VzdGFpbmVkLFxuICAgICAgICBoaXQsXG4gICAgICAgIHNldERpcmVjdGlvbixcbiAgICAgICAgaXNTdW5rLFxuICAgICAgICBnZXRMZW5ndGgsXG4gICAgICAgIGdldERpcmVjdGlvbixcbiAgICAgICAgZ2V0SUQgXG4gICAgfTtcbn1cblxuZXhwb3J0IHtcbiAgICBzaGlwRmFjdG9yeVxufSIsImltcG9ydCB7XG4gICAgc2hpcEZhY3Rvcnlcbn0gZnJvbSAnLi9zaGlwRmFjdG9yeSc7XG5pbXBvcnQge1xuICAgIHRyYWZmaWNDb250cm9sbGVyRmFjdG9yeVxufSBmcm9tICcuL3RyYWZmaWNDb250cm9sbGVyJztcblxuY29uc3Qgc2hpcEdyaWRGYWN0b3J5ID0gKCkgPT4ge1xuICAgIGNvbnN0IHNoaXBHcmlkID0gQXJyYXkoMTApLmZpbGwoKS5tYXAoKCkgPT4gQXJyYXkoMTApLmZpbGwobnVsbCkpO1xuICAgIGNvbnN0IHNoaXBBcnIgPSBbXTtcbiAgICBjb25zdCBzaGlwTG9jYXRpb25zID0ge307XG4gICAgY29uc3QgdHJhZmZpY0NvbnRyb2xsZXIgPSB0cmFmZmljQ29udHJvbGxlckZhY3Rvcnkoc2hpcEdyaWQsIHNoaXBMb2NhdGlvbnMsIHNoaXBBcnIpO1xuICAgIGxldCBvdXRjb21lID0gJyc7XG5cbiAgICBjb25zdCBpbkJvdW5kcyA9IChyb3csIGNvbCkgPT4ge1xuICAgICAgICByZXR1cm4gcm93ID49IDAgJiYgcm93IDwgMTAgJiYgY29sID49IDAgJiYgY29sIDwgMTA7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IGlzVmFsaWRTaGlwUGxhY2VtZW50ID0gKHNoaXAsIHJvdywgY29sKSA9PiB7XG4gICAgICAgIGxldCByb3dNb2QgPSBzaGlwLmdldERpcmVjdGlvbigpID09PSAnc291dGgnID8gMSA6IDA7XG4gICAgICAgIGxldCBjb2xNb2QgPSBzaGlwLmdldERpcmVjdGlvbigpID09PSAnZWFzdCcgPyAxIDogMDtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHNoaXAuZ2V0TGVuZ3RoKCk7IGkrKyl7XG4gICAgICAgICAgICBpZighaW5Cb3VuZHMocm93LCBjb2wpKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2hpcEdyaWRbcm93XVtjb2xdICE9IG51bGwpe1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJvdyA9IHJvdyArIChyb3dNb2QpO1xuICAgICAgICAgICAgY29sID0gY29sICsgKGNvbE1vZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IHBsYWNlU2hpcCA9IChzaGlwLCByb3csIGNvbCkgPT4ge1xuXG4gICAgICAgIGlmKCFpc1ZhbGlkU2hpcFBsYWNlbWVudChzaGlwLCByb3csIGNvbCkpe1xuICAgICAgICAgICAgdHJhZmZpY0NvbnRyb2xsZXIucHJpbnRHcmlkKHNoaXBHcmlkKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBEaXJlY3Rpb246ICR7c2hpcC5nZXREaXJlY3Rpb24oKX1gKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIHBsYWNlIHNoaXAgJHtzaGlwLmdldElEKCl9IGF0IHJvdzogJHtyb3d9LCBjb2w6ICR7Y29sfWApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9zaGlwQXJyLnB1c2goc2hpcCk7XG4gICAgICAgIHNoaXBMb2NhdGlvbnNbc2hpcC5nZXRJRCgpXSA9IFtdO1xuXG4gICAgICAgIGxldCByb3dNb2QgPSBzaGlwLmdldERpcmVjdGlvbigpID09PSAnc291dGgnID8gMSA6IDA7XG4gICAgICAgIGxldCBjb2xNb2QgPSBzaGlwLmdldERpcmVjdGlvbigpID09PSAnZWFzdCcgPyAxIDogMDtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHNoaXAuZ2V0TGVuZ3RoKCk7IGkrKyl7XG4gICAgICAgICAgICBzaGlwR3JpZFtyb3ddW2NvbF0gPSBzaGlwO1xuICAgICAgICAgICAgc2hpcExvY2F0aW9uc1tzaGlwLmdldElEKCldLnB1c2goe3JvdywgY29sfSk7XG4gICAgICAgICAgICByb3cgPSByb3cgKyAocm93TW9kKTtcbiAgICAgICAgICAgIGNvbCA9IGNvbCArIChjb2xNb2QpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IGdldFNoaXBMb2NhdGlvbiA9IChzaGlwSUQpID0+IHtcbiAgICAgICAgcmV0dXJuIHNoaXBMb2NhdGlvbnNbc2hpcElEXTtcbiAgICB9XG4gICAgXG4gICAgY29uc3QgcmVjZWl2ZUF0dGFjayA9IChyb3csIGNvbCkgPT4ge1xuICAgICAgICBvdXRjb21lID0gJyc7XG4gICAgICAgIGlmKHNoaXBHcmlkW3Jvd11bY29sXSl7XG4gICAgICAgICAgICBzaGlwR3JpZFtyb3ddW2NvbF0uaGl0KCk7XG4gICAgICAgICAgICBvdXRjb21lID0gJ2hpdCc7XG4gICAgICAgICAgICBpZihzaGlwR3JpZFtyb3ddW2NvbF0uaXNTdW5rKCkpe1xuICAgICAgICAgICAgICAgIG91dGNvbWUgPSAnc3Vuayc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBvdXRjb21lID0gJ21pc3MnXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBnZXRPdXRjb21lID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gb3V0Y29tZTtcbiAgICB9XG5cbiAgICBjb25zdCBpc0RlZmVhdGVkID0gKCkgPT4ge1xuICAgICAgICBmb3IobGV0IHNoaXAgb2Ygc2hpcEFycil7XG4gICAgICAgICAgICBpZighc2hpcC5pc1N1bmsoKSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGNvbnN0IGNyZWF0ZURlZmF1bHRTaGlwcyA9ICgpID0+IHtcbiAgICAgICAgbGV0IHNoaXBfMSA9IHNoaXBGYWN0b3J5KCA0LCcxJywgJ2Vhc3QnKTtcbiAgICAgICAgbGV0IHNoaXBfMiA9IHNoaXBGYWN0b3J5KCAyLCcyJywgJ3NvdXRoJyk7XG4gICAgICAgIGxldCBzaGlwXzMgPSBzaGlwRmFjdG9yeSggMiwnMycsICdlYXN0Jyk7XG4gICAgICAgIGxldCBzaGlwXzQgPSBzaGlwRmFjdG9yeSggMywnNCcsICdzb3V0aCcpO1xuICAgICAgICBsZXQgc2hpcF81ID0gc2hpcEZhY3RvcnkoIDEsJzUnLCAnc291dGgnKTtcbiAgICAgICAgbGV0IHNoaXBfNiA9IHNoaXBGYWN0b3J5KCAzLCc2JywgJ3NvdXRoJyk7XG4gICAgICAgIGxldCBzaGlwXzcgPSBzaGlwRmFjdG9yeSggMiwnNycsICdlYXN0Jyk7XG4gICAgICAgIGxldCBzaGlwXzggPSBzaGlwRmFjdG9yeSgxLCAnOCcpO1xuICAgICAgICBsZXQgc2hpcF85ID0gc2hpcEZhY3RvcnkoMSwgJzknKTtcbiAgICAgICAgbGV0IHNoaXBfMTAgPSBzaGlwRmFjdG9yeSgxLCAnMTAnKTtcblxuICAgICAgICBzaGlwQXJyLnB1c2goc2hpcF8xKTtcbiAgICAgICAgc2hpcEFyci5wdXNoKHNoaXBfMik7XG4gICAgICAgIHNoaXBBcnIucHVzaChzaGlwXzMpO1xuICAgICAgICBzaGlwQXJyLnB1c2goc2hpcF80KTtcbiAgICAgICAgc2hpcEFyci5wdXNoKHNoaXBfNSk7XG4gICAgICAgIHNoaXBBcnIucHVzaChzaGlwXzYpO1xuICAgICAgICBzaGlwQXJyLnB1c2goc2hpcF83KTtcbiAgICAgICAgc2hpcEFyci5wdXNoKHNoaXBfOCk7XG4gICAgICAgIHNoaXBBcnIucHVzaChzaGlwXzkpO1xuICAgICAgICBzaGlwQXJyLnB1c2goc2hpcF8xMCk7XG4gICAgfVxuXG4gICAgY29uc3QgcGxhY2VEZWZhdWx0U3RhcnRpbmdQb3MgPSAoKSA9PiB7XG4gICAgICAgIHBsYWNlU2hpcChzaGlwQXJyWzBdLCAwLCA0KTtcbiAgICAgICAgcGxhY2VTaGlwKHNoaXBBcnJbMV0sIDAsIDkpO1xuICAgICAgICBwbGFjZVNoaXAoc2hpcEFyclsyXSwgMiwgMCk7XG4gICAgICAgIHBsYWNlU2hpcChzaGlwQXJyWzNdLCAzLCA0KTtcbiAgICAgICAgcGxhY2VTaGlwKHNoaXBBcnJbNF0sIDMsIDYpO1xuICAgICAgICBwbGFjZVNoaXAoc2hpcEFycls1XSwgNCwgOSk7XG4gICAgICAgIHBsYWNlU2hpcChzaGlwQXJyWzZdLCA1LCAwKTtcbiAgICAgICAgcGxhY2VTaGlwKHNoaXBBcnJbN10sIDgsIDApO1xuICAgICAgICBwbGFjZVNoaXAoc2hpcEFycls4XSwgOSwgNSk7XG4gICAgICAgIHBsYWNlU2hpcChzaGlwQXJyWzldLCA5LCA5KTtcblxuICAgIH1cblxuICAgIGNvbnN0IGluaXREZWZhdWx0U2hpcHMgPSAoKSA9PiB7XG4gICAgICAgIGNyZWF0ZURlZmF1bHRTaGlwcygpO1xuICAgICAgICBwbGFjZURlZmF1bHRTdGFydGluZ1BvcygpO1xuICAgICAgICAvKiBcbiAgICAgICAgbGV0IHNoaXBfMSA9IHNoaXBGYWN0b3J5KCA0LCcxJywgJ2Vhc3QnKTtcbiAgICAgICAgcGxhY2VTaGlwKHNoaXBfMSwgMCwgNCk7XG4gICAgICAgIC8vc2hpcEFyci5wdXNoKHNoaXBfMSk7XG5cbiAgICAgICAgbGV0IHNoaXBfMiA9IHNoaXBGYWN0b3J5KCAyLCcyJywgJ3NvdXRoJyk7XG4gICAgICAgIHBsYWNlU2hpcChzaGlwXzIsIDAsIDkpO1xuICAgICAgICAvL3NoaXBBcnIucHVzaChzaGlwXzIpO1xuXG4gICAgICAgIGxldCBzaGlwXzMgPSBzaGlwRmFjdG9yeSggMiwnMycsICdlYXN0Jyk7XG4gICAgICAgIHBsYWNlU2hpcChzaGlwXzMsIDIsIDApO1xuICAgICAgICAvL3NoaXBBcnIucHVzaChzaGlwXzMpO1xuXG4gICAgICAgIGxldCBzaGlwXzQgPSBzaGlwRmFjdG9yeSggMywnNCcsICdzb3V0aCcpO1xuICAgICAgICBwbGFjZVNoaXAoc2hpcF80LCAzLCA0KTtcbiAgICAgICAgLy9zaGlwQXJyLnB1c2goc2hpcF80KTtcblxuICAgICAgICBsZXQgc2hpcF81ID0gc2hpcEZhY3RvcnkoIDEsJzUnLCAnc291dGgnKTtcbiAgICAgICAgcGxhY2VTaGlwKHNoaXBfNSwgMywgNik7XG4gICAgICAgIC8vc2hpcEFyci5wdXNoKHNoaXBfNSk7XG5cbiAgICAgICAgbGV0IHNoaXBfNiA9IHNoaXBGYWN0b3J5KCAzLCc2JywgJ3NvdXRoJyk7XG4gICAgICAgIHBsYWNlU2hpcChzaGlwXzYsIDQsIDkpO1xuICAgICAgICAvL3NoaXBBcnIucHVzaChzaGlwXzYpO1xuXG4gICAgICAgIGxldCBzaGlwXzcgPSBzaGlwRmFjdG9yeSggMiwnNycsICdlYXN0Jyk7XG4gICAgICAgIHBsYWNlU2hpcChzaGlwXzcsIDUsIDApO1xuICAgICAgICAvL3NoaXBBcnIucHVzaChzaGlwXzcpO1xuXG4gICAgICAgIGxldCBzaGlwXzggPSBzaGlwRmFjdG9yeSgxLCAnOCcpO1xuICAgICAgICBwbGFjZVNoaXAoc2hpcF84LCA4LCAwKTtcbiAgICAgICAgLy9zaGlwQXJyLnB1c2goc2hpcF84KTtcblxuICAgICAgICBsZXQgc2hpcF85ID0gc2hpcEZhY3RvcnkoMSwgJzknKTtcbiAgICAgICAgcGxhY2VTaGlwKHNoaXBfOSwgOSwgNSk7XG4gICAgICAgIC8vc2hpcEFyci5wdXNoKHNoaXBfOSk7XG5cbiAgICAgICAgbGV0IHNoaXBfMTAgPSBzaGlwRmFjdG9yeSgxLCAnMTAnKTtcbiAgICAgICAgcGxhY2VTaGlwKHNoaXBfMTAsIDksIDkpO1xuICAgICAgICAvL3NoaXBBcnIucHVzaChzaGlwXzEwKTsgKi9cbiAgICB9XG5cbiAgICBjb25zdCBnZXRSYW5kb21JbnQgPSAobWF4KSA9PiB7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBtYXgpO1xuICAgIH1cblxuICAgIGNvbnN0IGNsZWFyR3JpZCA9ICgpID0+IHtcbiAgICAgICAgZm9yKGxldCByb3cgPSAwOyByb3cgPCAxMDsgcm93Kyspe1xuICAgICAgICAgICAgZm9yKGxldCBjb2wgPSAwOyBjb2wgPCAxMDsgY29sKyspe1xuICAgICAgICAgICAgICAgIHNoaXBHcmlkW3Jvd11bY29sXSA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBjbGVhclNoaXBMb2NhdGlvbnMgPSAoKSA9PiB7XG4gICAgICAgIGZvcihsZXQgbWVtYmVyIGluIHNoaXBMb2NhdGlvbnMpe1xuICAgICAgICAgICAgZGVsZXRlIHNoaXBMb2NhdGlvbnNbbWVtYmVyXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHJhbmRvbWl6ZSA9ICgpID0+IHtcbiAgICAgICAgY2xlYXJHcmlkKCk7XG4gICAgICAgIGNsZWFyU2hpcExvY2F0aW9ucygpO1xuICAgICAgICBmb3IobGV0IHNoaXAgb2Ygc2hpcEFycil7XG4gICAgICAgICAgICBsZXQgcm93LCBjb2wsIGRpcjtcbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICByb3cgPSBnZXRSYW5kb21JbnQoMTApO1xuICAgICAgICAgICAgICAgIGNvbCA9IGdldFJhbmRvbUludCgxMCk7XG4gICAgICAgICAgICAgICAgZGlyID0gZ2V0UmFuZG9tSW50KDIpID09PSAwID8gJ3NvdXRoJyA6ICdlYXN0JztcbiAgICAgICAgICAgICAgICBzaGlwLnNldERpcmVjdGlvbihkaXIpO1xuICAgICAgICAgICAgfSB3aGlsZSAoXG4gICAgICAgICAgICAgICAgIWlzVmFsaWRTaGlwUGxhY2VtZW50KHNoaXAsIHJvdywgY29sKSB8fCBcbiAgICAgICAgICAgICAgICB0cmFmZmljQ29udHJvbGxlci5oYXNTcGFjZUNvbmZsaWN0KHNoaXAsIHJvdywgY29sKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICBwbGFjZVNoaXAoc2hpcCwgcm93LCBjb2wpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnNvbGUubG9nKCdyZWFjaGVkJyk7XG4gICAgICAgIHRyYWZmaWNDb250cm9sbGVyLnByaW50R3JpZChzaGlwR3JpZCk7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IGdldFNoaXBHcmlkID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gc2hpcEdyaWQ7XG4gICAgfVxuXG4gICAgY29uc3QgZ2V0U2hpcEFyciA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHNoaXBBcnI7XG4gICAgfVxuXG4gICAgY29uc3QgZ2V0U2hpcExvY2F0aW9ucyA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHNoaXBMb2NhdGlvbnM7XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IGlzU2hpcFByZXNlbnRBdCA9IChyb3csIGNvbCkgPT4ge1xuICAgICAgICByZXR1cm4gc2hpcEdyaWRbcm93XVtjb2xdICE9IG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgbW92ZVNoaXAgPSAoc2hpcElELCBkaXJlY3Rpb24pID0+IHtcbiAgICAgICAgdHJhZmZpY0NvbnRyb2xsZXIubW92ZVNoaXAoc2hpcElELCBkaXJlY3Rpb24pO1xuICAgIH1cblxuICAgIGNvbnN0IHJvdGF0ZVNoaXAgPSAoc2hpcElEKSA9PiB7XG4gICAgICAgIHRyYWZmaWNDb250cm9sbGVyLnJvdGF0ZVNoaXAoc2hpcElEKTtcbiAgICB9XG5cbiAgICBjb25zdCBnZXRMb2NhdGlvbkNoYW5nZSA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHRyYWZmaWNDb250cm9sbGVyLmdldExvY2F0aW9uQ2hhbmdlKCk7XG4gICAgfVxuXG4gICAgY29uc3QgZ2V0RXJyb3JNc2cgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiB0cmFmZmljQ29udHJvbGxlci5nZXRFcnJvcigpO1xuICAgIH1cblxuICAgIGNvbnN0IGdldFBvc3NpYmxlTW92ZSA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHRyYWZmaWNDb250cm9sbGVyLmdldFBvc3NpYmxlTW92ZSgpO1xuICAgIH1cblxuICAgIHJldHVybiB7IFxuICAgICAgICBwbGFjZVNoaXAsIFxuICAgICAgICBnZXRTaGlwTG9jYXRpb24sXG4gICAgICAgIHJlY2VpdmVBdHRhY2ssXG4gICAgICAgIGdldE91dGNvbWUsXG4gICAgICAgIGlzRGVmZWF0ZWQsIFxuICAgICAgICBpbml0RGVmYXVsdFNoaXBzLCBcbiAgICAgICAgcmFuZG9taXplLFxuICAgICAgICBnZXRTaGlwR3JpZCxcbiAgICAgICAgZ2V0U2hpcEFycixcbiAgICAgICAgZ2V0U2hpcExvY2F0aW9ucyxcbiAgICAgICAgaXNTaGlwUHJlc2VudEF0LFxuICAgICAgICBtb3ZlU2hpcCxcbiAgICAgICAgcm90YXRlU2hpcCxcbiAgICAgICAgZ2V0TG9jYXRpb25DaGFuZ2UsXG4gICAgICAgIGdldEVycm9yTXNnLFxuICAgICAgICBnZXRQb3NzaWJsZU1vdmVcbiAgICB9O1xufVxuXG5leHBvcnQge1xuICAgIHNoaXBHcmlkRmFjdG9yeVxufSIsImNvbnN0IHRyYWZmaWNDb250cm9sbGVyRmFjdG9yeSA9IChzaGlwR3JpZEluLCBzaGlwTG9jYXRpb25zSW4sIHNoaXBBcnJJbikgPT4ge1xuICAgIGxldCBzaGlwR3JpZCA9IHNoaXBHcmlkSW47XG4gICAgbGV0IHNoaXBMb2NhdGlvbnMgPSBzaGlwTG9jYXRpb25zSW47XG4gICAgbGV0IHNoaXBBcnIgPSBzaGlwQXJySW47XG5cbiAgICBsZXQgZXJyb3IgPSAnbm9uZSc7XG4gICAgbGV0IGxvY2F0aW9uQ2hhbmdlID0ge307XG4gICAgbGV0IHBvc3NpYmxlTW92ZSA9IGZhbHNlO1xuXG4gICAgY29uc3QgZ2V0TmV3TG9jYXRpb25zID0gKG9sZExvY2F0aW9ucywgZGlyZWN0aW9uKSA9PiB7XG4gICAgICAgIGxldCBuZXdMb2NhdGlvbnMgPSBbXTtcbiAgICAgICAgbGV0IHJvd01vZCA9IDA7XG4gICAgICAgIGxldCBjb2xNb2QgPSAwO1xuICAgICAgICBzd2l0Y2goZGlyZWN0aW9uKXtcbiAgICAgICAgICAgIGNhc2UgJ3VwJzpcbiAgICAgICAgICAgICAgICByb3dNb2QgPSAtMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2Rvd24nOlxuICAgICAgICAgICAgICAgIHJvd01vZCA9IDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdsZWZ0JzpcbiAgICAgICAgICAgICAgICBjb2xNb2QgPSAtMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3JpZ2h0JzpcbiAgICAgICAgICAgICAgICBjb2xNb2QgPSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGZvcihsZXQgbG9jYXRpb24gb2Ygb2xkTG9jYXRpb25zKXtcbiAgICAgICAgICAgIGxldCByb3cgPSBsb2NhdGlvbi5yb3cgKyByb3dNb2Q7XG4gICAgICAgICAgICBsZXQgY29sID0gbG9jYXRpb24uY29sICsgY29sTW9kO1xuICAgICAgICAgICAgbmV3TG9jYXRpb25zLnB1c2goe3JvdywgY29sfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ld0xvY2F0aW9ucztcbiAgICB9XG5cbiAgICBjb25zdCBnZXROZXdSb3RhdGlvbkxvY2F0aW9ucyA9IChvbGRMb2NhdGlvbnMsIG5ld0RpcmVjdGlvbikgPT4ge1xuICAgICAgICBsZXQgYW5jaG9yTG9jYXRpb24gPSBvbGRMb2NhdGlvbnNbMF07XG4gICAgICAgIGxldCBuZXdMb2NhdGlvbnMgPSBbXTtcbiAgICAgICAgbGV0IHJvd01vZCA9IDA7XG4gICAgICAgIGxldCBjb2xNb2QgPSAwO1xuICAgICAgICBsZXQgcm93ID0gYW5jaG9yTG9jYXRpb24ucm93O1xuICAgICAgICBsZXQgY29sID0gYW5jaG9yTG9jYXRpb24uY29sO1xuICAgICAgICBzd2l0Y2gobmV3RGlyZWN0aW9uKXtcbiAgICAgICAgICAgIGNhc2UgJ3NvdXRoJzpcbiAgICAgICAgICAgICAgICByb3dNb2QgPSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZWFzdCc6XG4gICAgICAgICAgICAgICAgY29sTW9kID0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBuZXdMb2NhdGlvbnMucHVzaCh7cm93LCBjb2x9KTtcbiAgICAgICAgZm9yKGxldCBsZW4gPSAxOyBsZW4gPCBvbGRMb2NhdGlvbnMubGVuZ3RoOyBsZW4rKyl7XG4gICAgICAgICAgICByb3cgPSByb3cgKyByb3dNb2Q7XG4gICAgICAgICAgICBjb2wgPSBjb2wgKyBjb2xNb2Q7XG4gICAgICAgICAgICBuZXdMb2NhdGlvbnMucHVzaCh7cm93LCBjb2x9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3TG9jYXRpb25zO1xuICAgIH1cblxuICAgIGNvbnN0IGlzT3V0T2ZCb3VuZHNDb29yZCA9IChyb3csIGNvbCkgPT4ge1xuICAgICAgICByZXR1cm4gcm93IDwgMCB8fCByb3cgPj0gMTAgfHwgY29sIDwgMCB8fCBjb2wgPj0gMTA7XG4gICAgfVxuXG4gICAgY29uc3QgaXNPdXRPZkJvdW5kcyA9IChuZXdMb2NhdGlvbnMpID0+IHtcbiAgICAgICAgZm9yKGxldCBsb2NhdGlvbiBvZiBuZXdMb2NhdGlvbnMpe1xuICAgICAgICAgICAgaWYoaXNPdXRPZkJvdW5kc0Nvb3JkKGxvY2F0aW9uLnJvdywgbG9jYXRpb24uY29sKSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IHJlc2V0TG9jYXRpb25DaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAgIGxvY2F0aW9uQ2hhbmdlID0ge307XG4gICAgfVxuXG4gICAgY29uc3QgcHJpbnRHcmlkID0gKHNoaXBHcmlkKSA9PiB7XG4gICAgICAgIGZvcihsZXQgcm93ID0gMDsgcm93IDwgMTA7IHJvdysrKXtcbiAgICAgICAgICAgIGxldCByb3dTdHIgPSByb3cgKyBcIjogXCI7XG4gICAgICAgICAgICBmb3IobGV0IGNvbCA9IDA7IGNvbCA8IDEwOyBjb2wrKyl7XG4gICAgICAgICAgICAgICAgaWYoc2hpcEdyaWRbcm93XVtjb2xdKXtcbiAgICAgICAgICAgICAgICAgICAgcm93U3RyICs9IHNoaXBHcmlkW3Jvd11bY29sXS5nZXRJRCgpXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcm93U3RyICs9ICdfJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcm93U3RyICs9IFwiIFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc29sZS5sb2cocm93U3RyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vY2hlY2sgaWYgYW5vdGhlciBzaGlwIGlzIHRvbyBjbG9zZSB0byB0aGUgcHJvcG9zZWQgbG9jYXRpb25cbiAgICAvL2Egc2hpcCBpcyB0b28gY2xvc2UgaWYgaXQgaXMgYWRqYWNlbnQsIHRoZXJlIHNob3VsZCBiZSBvbmUgc3BhY2VcbiAgICBjb25zdCBpc1NwYWNlVmlvbGF0aW9uQ2VsbCA9IChyb3csIGNvbCwgc2hpcElEKSA9PiB7XG4gICAgICAgIC8vY29uc29sZS5sb2coYHJvdzogJHtyb3d9LCBjb2w6ICR7Y29sfSwgc2hpcElEOiAke3NoaXBJRH1gKTtcbiAgICAgICAgaWYoIGlzT3V0T2ZCb3VuZHNDb29yZChyb3csIGNvbCkgfHxcbiAgICAgICAgICAgIHNoaXBHcmlkW3Jvd11bY29sXSA9PT0gbnVsbCB8fFxuICAgICAgICAgICAgc2hpcEdyaWRbcm93XVtjb2xdID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICl7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLy9wcmludEdyaWQoc2hpcEdyaWQpOy8vLy8vLy8vLy9cbiAgICAgICAgcmV0dXJuIHNoaXBHcmlkW3Jvd11bY29sXS5nZXRJRCgpICE9PSBzaGlwSUQ7XG4gICAgfVxuXG4gICAgY29uc3QgaXNTcGFjZVZpb2xhdGlvbiA9IChzaGlwSUQsIG5ld0xvY2F0aW9ucykgPT4ge1xuICAgICAgICBmb3IobGV0IGxvY2F0aW9uIG9mIG5ld0xvY2F0aW9ucyl7XG4gICAgICAgICAgICBsZXQgcm93ID0gbG9jYXRpb24ucm93O1xuICAgICAgICAgICAgbGV0IGNvbCA9IGxvY2F0aW9uLmNvbDtcbiAgICAgICAgICAgIGlmKGlzU3BhY2VWaW9sYXRpb25DZWxsKHJvdyAtIDEsIGNvbCArIDEsIHNoaXBJRCkpIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgaWYoaXNTcGFjZVZpb2xhdGlvbkNlbGwocm93ICAgICwgY29sICsgMSwgc2hpcElEKSkgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICBpZihpc1NwYWNlVmlvbGF0aW9uQ2VsbChyb3cgKyAxLCBjb2wgKyAxLCBzaGlwSUQpKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIGlmKGlzU3BhY2VWaW9sYXRpb25DZWxsKHJvdyArIDEsIGNvbCAgICAsIHNoaXBJRCkpIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgaWYoaXNTcGFjZVZpb2xhdGlvbkNlbGwocm93ICsgMSwgY29sIC0gMSwgc2hpcElEKSkgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICBpZihpc1NwYWNlVmlvbGF0aW9uQ2VsbChyb3cgICAgLCBjb2wgLSAxLCBzaGlwSUQpKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIGlmKGlzU3BhY2VWaW9sYXRpb25DZWxsKHJvdyAtIDEsIGNvbCAtIDEsIHNoaXBJRCkpIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgaWYoaXNTcGFjZVZpb2xhdGlvbkNlbGwocm93IC0gMSwgY29sICAgICwgc2hpcElEKSkgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IHJlbW92ZU9sZExvY2F0aW9uID0gKHNoaXBJRCwgb2xkTG9jYXRpb25zKSA9PiB7XG4gICAgICAgIGZvcihsZXQgbG9jYXRpb24gb2Ygb2xkTG9jYXRpb25zKXtcbiAgICAgICAgICAgIHNoaXBHcmlkW2xvY2F0aW9uLnJvd11bbG9jYXRpb24uY29sXSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgc2hpcExvY2F0aW9uc1tzaGlwSURdID0gW107XG4gICAgfVxuXG4gICAgY29uc3QgbWFya05ld0xvY2F0aW9uID0gKHNoaXBJRCwgbmV3TG9jYXRpb25zKSA9PiB7XG4gICAgICAgIC8qIGNvbnNvbGUubG9nKCdoZXJlIGluIG1hcmsgbmV3IGxvY2F0aW9uJylcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHNoaXBBcnIubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgY29uc29sZS5sb2coYGluZGV4OiAke2l9LCBzaGlwSUQ6ICR7c2hpcEFycltpXS5nZXRJRCgpfWApO1xuICAgICAgICB9ICovXG4gICAgICAgIGZvcihsZXQgbG9jYXRpb24gb2YgbmV3TG9jYXRpb25zKXtcbiAgICAgICAgICAgIHNoaXBHcmlkW2xvY2F0aW9uLnJvd11bbG9jYXRpb24uY29sXSA9IHNoaXBBcnJbc2hpcElEIC0gMV07XG5cbiAgICAgICAgICAgIHNoaXBMb2NhdGlvbnNbc2hpcElEXS5wdXNoKHN0cnVjdHVyZWRDbG9uZShsb2NhdGlvbikpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgbW92ZVNoaXAgPSAoc2hpcElELCBkaXJlY3Rpb24pID0+IHtcblxuICAgICAgICBsZXQgb2xkTG9jYXRpb25zID0gc3RydWN0dXJlZENsb25lKHNoaXBMb2NhdGlvbnNbc2hpcElEXSk7XG4gICAgICAgIGxldCBuZXdMb2NhdGlvbnMgPSBzdHJ1Y3R1cmVkQ2xvbmUoZ2V0TmV3TG9jYXRpb25zKG9sZExvY2F0aW9ucywgZGlyZWN0aW9uKSk7XG5cbiAgICAgICAgaWYoaXNPdXRPZkJvdW5kcyhuZXdMb2NhdGlvbnMpKXtcbiAgICAgICAgICAgIGVycm9yID0gJ291dE9mQm91bmRzJztcbiAgICAgICAgICAgIHJlc2V0TG9jYXRpb25DaGFuZ2UoKTtcbiAgICAgICAgICAgIHBvc3NpYmxlTW92ZSA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vY29uc29sZS5sb2coaXNTcGFjZVZpb2xhdGlvbihzaGlwSUQsIG5ld0xvY2F0aW9ucykpO1xuICAgICAgICBpZihpc1NwYWNlVmlvbGF0aW9uKHNoaXBJRCwgbmV3TG9jYXRpb25zKSl7XG4gICAgICAgICAgICBlcnJvciA9ICdzcGFjZVZpb2xhdGlvbic7XG4gICAgICAgICAgICByZXNldExvY2F0aW9uQ2hhbmdlKCk7XG4gICAgICAgICAgICBwb3NzaWJsZU1vdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGVycm9yID0gJyc7XG4gICAgICAgIHBvc3NpYmxlTW92ZSA9IHRydWU7XG4gICAgICAgIGxvY2F0aW9uQ2hhbmdlID0ge29sZExvY2F0aW9ucywgbmV3TG9jYXRpb25zfTtcbiAgICAgICAgcmVtb3ZlT2xkTG9jYXRpb24oc2hpcElELCBvbGRMb2NhdGlvbnMpO1xuICAgICAgICBtYXJrTmV3TG9jYXRpb24oc2hpcElELCBuZXdMb2NhdGlvbnMpO1xuICAgIH1cblxuICAgIC8qIGNvbnN0IGdldE5ld1JvdGF0aW9uTG9jYXRpb25zID0gKGFuY2hvckxvY2F0aW9uLCBuZXdEaXJlY3Rpb24pID0+IHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH0gKi9cbiAgICBcbiAgICBjb25zdCByb3RhdGVTaGlwID0gKHNoaXBJRCkgPT4ge1xuICAgICAgICBsZXQgc2hpcCA9IHNoaXBBcnJbc2hpcElEIC0gMV07XG4gICAgICAgIGxldCBvbGREaXJlY3Rpb24gPSBzaGlwLmdldERpcmVjdGlvbigpO1xuICAgICAgICBsZXQgbmV3RGlyZWN0aW9uID0gb2xkRGlyZWN0aW9uID09PSAnc291dGgnID8gJ2Vhc3QnIDogJ3NvdXRoJztcbiAgICAgICAgbGV0IG9sZExvY2F0aW9ucyA9IHNoaXBMb2NhdGlvbnNbc2hpcElEXTtcbiAgICAgICAgbGV0IG5ld0xvY2F0aW9ucyA9IGdldE5ld1JvdGF0aW9uTG9jYXRpb25zKG9sZExvY2F0aW9ucywgbmV3RGlyZWN0aW9uKTtcbiAgICAgICAgXG4gICAgICAgIGlmKGlzT3V0T2ZCb3VuZHMobmV3TG9jYXRpb25zKSl7XG4gICAgICAgICAgICBlcnJvciA9ICdvdXRPZkJvdW5kcyc7XG4gICAgICAgICAgICByZXNldExvY2F0aW9uQ2hhbmdlKCk7XG4gICAgICAgICAgICBwb3NzaWJsZU1vdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZihpc1NwYWNlVmlvbGF0aW9uKHNoaXBJRCwgbmV3TG9jYXRpb25zKSl7XG4gICAgICAgICAgICBlcnJvciA9ICdzcGFjZVZpb2xhdGlvbic7XG4gICAgICAgICAgICByZXNldExvY2F0aW9uQ2hhbmdlKCk7XG4gICAgICAgICAgICBwb3NzaWJsZU1vdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGVycm9yID0gJyc7XG4gICAgICAgIHBvc3NpYmxlTW92ZSA9IHRydWU7XG4gICAgICAgIGxvY2F0aW9uQ2hhbmdlID0ge29sZExvY2F0aW9ucywgbmV3TG9jYXRpb25zfTtcbiAgICAgICAgc2hpcC5zZXREaXJlY3Rpb24obmV3RGlyZWN0aW9uKTtcbiAgICAgICAgcmVtb3ZlT2xkTG9jYXRpb24oc2hpcElELCBvbGRMb2NhdGlvbnMpO1xuICAgICAgICBtYXJrTmV3TG9jYXRpb24oc2hpcElELCBuZXdMb2NhdGlvbnMpO1xuICAgIH1cblxuICAgIGNvbnN0IGdldEVycm9yID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgfVxuXG4gICAgY29uc3QgZ2V0UG9zc2libGVNb3ZlID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gcG9zc2libGVNb3ZlO1xuICAgIH1cblxuICAgIGNvbnN0IGdldExvY2F0aW9uQ2hhbmdlID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gbG9jYXRpb25DaGFuZ2U7XG4gICAgfVxuXG4gICAgY29uc3QgZ2V0UHJvcG9zZWRMb2NhdGlvbiA9IChzaGlwLCByb3csIGNvbCkgPT4ge1xuICAgICAgICBsZXQgcHJvcG9zZWRMb2NhdGlvbiA9IFtdO1xuXG4gICAgICAgIGxldCByb3dNb2QgPSBzaGlwLmdldERpcmVjdGlvbigpID09PSAnc291dGgnID8gMSA6IDA7XG4gICAgICAgIGxldCBjb2xNb2QgPSBzaGlwLmdldERpcmVjdGlvbigpID09PSAnZWFzdCcgPyAxIDogMDtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHNoaXAuZ2V0TGVuZ3RoKCk7IGkrKyl7XG4gICAgICAgICAgICBwcm9wb3NlZExvY2F0aW9uLnB1c2goe3JvdywgY29sfSk7XG4gICAgICAgICAgICByb3cgPSByb3cgKyAocm93TW9kKTtcbiAgICAgICAgICAgIGNvbCA9IGNvbCArIChjb2xNb2QpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwcm9wb3NlZExvY2F0aW9uO1xuICAgIH1cblxuICAgIGNvbnN0IGdldFN1cnJvdW5kaW5nTG9jYXRpb25zID0gKHNoaXAsIHJvdywgY29sKSA9PiB7XG4gICAgICAgIGxldCBzdXJyb3VuZGluZ0xvY2F0aW9ucyA9IFtdO1xuICAgICAgICBsZXQgZGlyID0gc2hpcC5nZXREaXJlY3Rpb24oKTtcbiAgICAgICAgbGV0IGxlbiA9IHNoaXAuZ2V0TGVuZ3RoKCk7XG4gICAgICAgIGlmKGRpciA9PT0gJ3NvdXRoJyl7XG4gICAgICAgICAgICBzdXJyb3VuZGluZ0xvY2F0aW9ucy5wdXNoKHtyb3c6IHJvdyAtIDEsIGNvbDogY29sICAgIH0pO1xuICAgICAgICAgICAgc3Vycm91bmRpbmdMb2NhdGlvbnMucHVzaCh7cm93OiByb3cgLSAxLCBjb2w6IGNvbCAtIDF9KTtcbiAgICAgICAgICAgIHN1cnJvdW5kaW5nTG9jYXRpb25zLnB1c2goe3Jvdzogcm93IC0gMSwgY29sOiBjb2wgKyAxfSk7XG4gICAgICAgICAgICBmb3IobGV0IG1vZCA9IDA7IG1vZCA8IGxlbjsgbW9kKyspe1xuICAgICAgICAgICAgICAgIHN1cnJvdW5kaW5nTG9jYXRpb25zLnB1c2goe3Jvdzogcm93ICsgbW9kLCBjb2w6IGNvbCAtIDF9KTtcbiAgICAgICAgICAgICAgICBzdXJyb3VuZGluZ0xvY2F0aW9ucy5wdXNoKHtyb3c6IHJvdyArIG1vZCwgY29sOiBjb2wgKyAxfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdXJyb3VuZGluZ0xvY2F0aW9ucy5wdXNoKHtyb3c6IHJvdyArIGxlbiwgY29sOiBjb2x9KTtcbiAgICAgICAgICAgIHN1cnJvdW5kaW5nTG9jYXRpb25zLnB1c2goe3Jvdzogcm93ICsgbGVuLCBjb2w6IGNvbCAtIDF9KTtcbiAgICAgICAgICAgIHN1cnJvdW5kaW5nTG9jYXRpb25zLnB1c2goe3Jvdzogcm93ICsgbGVuLCBjb2w6IGNvbCArIDF9KTtcbiAgICAgICAgfSBlbHNlIHsgLy8nZWFzdCdcbiAgICAgICAgICAgIHN1cnJvdW5kaW5nTG9jYXRpb25zLnB1c2goe3Jvdzogcm93ICAgICwgY29sOiBjb2wgLSAxfSk7XG4gICAgICAgICAgICBzdXJyb3VuZGluZ0xvY2F0aW9ucy5wdXNoKHtyb3c6IHJvdyArIDEsIGNvbDogY29sIC0gMX0pO1xuICAgICAgICAgICAgc3Vycm91bmRpbmdMb2NhdGlvbnMucHVzaCh7cm93OiByb3cgLSAxLCBjb2w6IGNvbCAtIDF9KTtcbiAgICAgICAgICAgIGZvcihsZXQgbW9kID0gMDsgbW9kIDwgbGVuOyBtb2QrKyl7XG4gICAgICAgICAgICAgICAgc3Vycm91bmRpbmdMb2NhdGlvbnMucHVzaCh7cm93OiByb3cgLSAxLCBjb2w6IGNvbCArIG1vZH0pO1xuICAgICAgICAgICAgICAgIHN1cnJvdW5kaW5nTG9jYXRpb25zLnB1c2goe3Jvdzogcm93ICsgMSwgY29sOiBjb2wgKyBtb2R9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN1cnJvdW5kaW5nTG9jYXRpb25zLnB1c2goe3Jvdzogcm93ICAgICwgY29sOiBjb2wgKyBsZW59KTtcbiAgICAgICAgICAgIHN1cnJvdW5kaW5nTG9jYXRpb25zLnB1c2goe3Jvdzogcm93IC0gMSwgY29sOiBjb2wgKyBsZW59KTtcbiAgICAgICAgICAgIHN1cnJvdW5kaW5nTG9jYXRpb25zLnB1c2goe3Jvdzogcm93ICsgMSwgY29sOiBjb2wgKyBsZW59KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZygnc3Vycm91bmRzaW5nIG9mIHNoaXAgJyArIHNoaXAuZ2V0SUQoKSk7XG4gICAgICAgIGNvbnNvbGUubG9nKHN1cnJvdW5kaW5nTG9jYXRpb25zKTtcbiAgICAgICAgcmV0dXJuIHN1cnJvdW5kaW5nTG9jYXRpb25zO1xuICAgIH1cblxuICAgIGNvbnN0IGhhc1NwYWNlQ29uZmxpY3RGcm9tTG9jYXRpb25zID0gKHN1cnJvdW5kaW5nTG9jYXRpb25zKSA9PiB7XG4gICAgICAgIGZvcihsZXQgbG9jYXRpb24gb2Ygc3Vycm91bmRpbmdMb2NhdGlvbnMpe1xuICAgICAgICAgICAgaWYoaXNPdXRPZkJvdW5kc0Nvb3JkKGxvY2F0aW9uLnJvdywgbG9jYXRpb24uY29sKSkgY29udGludWU7XG4gICAgICAgICAgICBpZihzaGlwR3JpZFtsb2NhdGlvbi5yb3ddW2xvY2F0aW9uLmNvbF0gPT09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYoc2hpcEdyaWRbbG9jYXRpb24ucm93XVtsb2NhdGlvbi5jb2xdID09PSB1bmRlZmluZWQpIGNvbnRpbnVlO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnY29uZmxpY3QgJyk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhzaGlwR3JpZFtsb2NhdGlvbi5yb3ddW2xvY2F0aW9uLmNvbF0pO1xuICAgICAgICAgICAgY29uc29sZS5sb2coc2hpcEdyaWRbbG9jYXRpb24ucm93XVtsb2NhdGlvbi5jb2xdLmdldElEKCkpO1xuICAgICAgICAgICAgY29uc29sZS5sb2cobG9jYXRpb24pO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBoYXNTcGFjZUNvbmZsaWN0ID0gKHNoaXAsIHJvdywgY29sKSA9PiB7XG4gICAgICAgIHJldHVybiBoYXNTcGFjZUNvbmZsaWN0RnJvbUxvY2F0aW9ucyhnZXRTdXJyb3VuZGluZ0xvY2F0aW9ucyhzaGlwLCByb3csIGNvbCkpO1xuICAgIH1cblxuICAgIHJldHVybiB7IFxuICAgICAgICBtb3ZlU2hpcCxcbiAgICAgICAgcm90YXRlU2hpcCxcbiAgICAgICAgZ2V0RXJyb3IsXG4gICAgICAgIGdldFBvc3NpYmxlTW92ZSwgXG4gICAgICAgIGdldExvY2F0aW9uQ2hhbmdlLFxuICAgICAgICBoYXNTcGFjZUNvbmZsaWN0LFxuICAgICAgICBwcmludEdyaWQvLy8vLy8vL1xuICAgIH1cbn1cblxuZXhwb3J0IHtcbiAgICB0cmFmZmljQ29udHJvbGxlckZhY3Rvcnlcbn0iLCJjb25zdCBhdHRhY2tHcmlkRmFjdG9yeSA9ICgpID0+IHtcbiAgICBjb25zdCBhdHRhY2tzID0gQXJyYXkoMTApLmZpbGwoKS5tYXAoKCkgPT4gQXJyYXkoMTApLmZpbGwobnVsbCkpO1xuXG4gICAgY29uc3QgaW5Cb3VuZHMgPSAocm93LCBjb2wpID0+IHtcbiAgICAgICAgcmV0dXJuIHJvdyA+PSAwICYmIHJvdyA8IDEwICYmIGNvbCA+PSAwICYmIGNvbCA8IDEwO1xuICAgIH1cblxuICAgIGNvbnN0IGlzVmFsaWRBdHRhY2sgPSAocm93LCBjb2wpID0+IHtcbiAgICAgICAgcmV0dXJuIGluQm91bmRzKHJvdywgY29sKSAmJiBhdHRhY2tzW3Jvd11bY29sXSA9PT0gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCByZWNvcmRBdHRhY2sgPSAocm93LCBjb2wpID0+IHtcbiAgICAgICAgYXR0YWNrc1tyb3ddW2NvbF0gPSAnaGl0JztcbiAgICB9XG5cbiAgICByZXR1cm4geyBpc1ZhbGlkQXR0YWNrLCByZWNvcmRBdHRhY2sgfTtcbn1cblxuZXhwb3J0e1xuICAgIGF0dGFja0dyaWRGYWN0b3J5XG59IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IHsgXG4gICAgdmlld0NvbnRyb2xsZXIsXG4gICAgLyogc2V0VXBWaWV3LCAqL1xuICAgIG1hcmtBdHRhY2tcbn0gZnJvbSAnLi92aWV3Q29udHJvbGxlcic7XG5cbmltcG9ydCB7IFxuICAgIGdhbWVNYXN0ZXJGYWN0b3J5LFxufSBmcm9tICcuL2dhbWVNYXN0ZXInO1xuXG4vL21hbmFnZXMgdGhlIGdhbWUgYW5kIHRoZSB2aWV3Y29udHJvbGxlclxuY29uc3Qgd2Vic2l0ZU1hbmFnZXJGYWN0b3J5ID0gKCkgPT4ge1xuICAgIGxldCBnYW1lID0gZ2FtZU1hc3RlckZhY3RvcnkoKTtcbiAgICBsZXQgbXlWaWV3Q29udHJvbGxlciA9IHZpZXdDb250cm9sbGVyKCk7XG4gICAgY29uc3QgZ2V0U2hpcEdyaWQgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBnYW1lLmdldFNoaXBHcmlkKCk7XG4gICAgfVxuICAgIGNvbnN0IHByb2Nlc3NVc2VySW5wdXQgPSAocm93LCBjb2wsIGNsaWNrKSA9PiB7XG4gICAgICAgIFxuICAgICAgICBpZighZ2FtZS5pc0F0dGFja2FibGVCeVBsYXllcihyb3csIGNvbCkpe1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbWFya0F0dGFjayhcbiAgICAgICAgICAgIGNsaWNrLCBcbiAgICAgICAgICAgIGdhbWUuaXNTaGlwUHJlc2VudEF0KFxuICAgICAgICAgICAgICAgIGNsaWNrLnRhcmdldC5kYXRhc2V0LnJvdywgXG4gICAgICAgICAgICAgICAgY2xpY2sudGFyZ2V0LmRhdGFzZXQuY29sLCBcbiAgICAgICAgICAgICAgICAnY29tcHV0ZXInKSk7XG4gICAgICAgIC8vY29uc29sZS5sb2coY2xpY2spO1xuICAgICAgICAvL2NvbnNvbGUubG9nKGNsaWNrLnRhcmdldC5kYXRhc2V0LnJvdyk7XG4vKiBcbiAgICAgICAgaWYoZ2FtZS5pc1NoaXBQcmVzZW50QXQocm93LCBjb2wsICdjb21wdXRlcicpKXtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdTQ1VDRVNTJyk7XG4gICAgICAgICAgICAvL3VwZGF0ZSBjb25zb2xlXG4gICAgICAgIH0gKi9cblxuICAgICAgICBnYW1lLnByb2Nlc3NVc2VySW5wdXQocm93LCBjb2wpO1xuXG4gICAgICAgIC8vZGlzcGxheSBvdXRjb21lXG4gICAgICAgIC8vY29uc29sZS5sb2coYFlvdSBmaXJlIGF0ICgke3Jvd30sICR7Y29sfSkgYW5kICR7Z2FtZS5nZXRQbGF5ZXJUdXJuUmVzdWx0KCl9YCk7XG4gICAgICAgIG15Vmlld0NvbnRyb2xsZXIudXBkYXRlTXNnT25lKHJvdywgY29sLCBnYW1lLmdldFBsYXllclR1cm5SZXN1bHQoKSk7XG5cbiAgICAgICAgLy9jb25zb2xlLmxvZyhnYW1lLndpbkNoZWNrUGxheWVyKCkpO1xuICAgICAgICBpZihnYW1lLndpbkNoZWNrUGxheWVyKCkpe1xuICAgICAgICAgICAgLy9kaXNwbGF5IHZpY3RvcnkgbWVzc2FnZVxuICAgICAgICAgICAgY29uc29sZS5sb2coJ3BsYXllciB3aW5zJyk7XG4gICAgICAgICAgICBteVZpZXdDb250cm9sbGVyLnVwZGF0ZU1zZ1R3bygwLCAwLCAnd2luJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvL2dldCBhaSB0YXJnZXRcbiAgICAgICAgLy9leGVjdXRlIGFpIGF0dGFja1xuICAgICAgICBsZXQgdGFyZ2V0ID0gZ2FtZS5wcm9jZXNzQ29tcHV0ZXJBdHRhY2soKTtcbiAgICAgICAgLy9jb25zb2xlLmxvZyh0YXJnZXQpO1xuICAgICAgICAvL3VwZGF0ZSBwbGF5ZXIgc2hpcCBncmlkIHRvIHNob3cgYXR0YWNrXG4gICAgICAgIG15Vmlld0NvbnRyb2xsZXIubWFya0NvbXB1dGVyQXR0YWNrKHRhcmdldC5yb3csIHRhcmdldC5jb2wpO1xuXG4gICAgICAgIC8vZGlzcGxheSBvdXRjb21lXG4gICAgICAgIGNvbnNvbGUubG9nKGBZb3VyIG9wcG9uZW50IGZpcmVzIGF0ICgke3RhcmdldC5yb3d9LCAke3RhcmdldC5jb2x9KSBhbmQgJHtnYW1lLmdldENvbXB1dGVyVHVyblJlc3VsdCgpfWApO1xuICAgICAgICBteVZpZXdDb250cm9sbGVyLnVwZGF0ZU1zZ1R3byh0YXJnZXQucm93LCB0YXJnZXQuY29sLCBnYW1lLmdldENvbXB1dGVyVHVyblJlc3VsdCgpKTtcblxuICAgICAgICAvL3dpbiBjaGVja1xuICAgICAgICBpZihnYW1lLndpbkNoZWNrQ29tcHV0ZXIoKSl7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnY29tcHV0ZXIgd2lucycpO1xuICAgICAgICAgICAgbXlWaWV3Q29udHJvbGxlci51cGRhdGVNc2dUd28oMCwgMCwgJ2xvc3MnKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG5cbiAgICBjb25zdCBpbml0aWF0ZSA9ICgpID0+IHtcbiAgICAgICAgbXlWaWV3Q29udHJvbGxlci5zZXRVcChnYW1lLCBwcm9jZXNzVXNlcklucHV0KTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHsgaW5pdGlhdGUsIHByb2Nlc3NVc2VySW5wdXQsIGdldFNoaXBHcmlkIH07XG59XG5cbmV4cG9ydCB7IFxuICAgIHdlYnNpdGVNYW5hZ2VyRmFjdG9yeVxufTsiLCJpbXBvcnQgeyBcbiAgICBzaGlwR3JpZEZhY3Rvcnlcbn0gZnJvbSAnLi9zaGlwR3JpZEZhY3RvcnknO1xuXG5pbXBvcnQgeyBcbiAgICBhdHRhY2tHcmlkRmFjdG9yeVxufSBmcm9tICcuL2F0dGFja0dyaWRGYWN0b3J5JztcblxuaW1wb3J0IHsgXG4gICAgY29tcHV0ZXJUYXJnZXRpbmdBSUZhY3Rvcnlcbn0gZnJvbSAnLi9jb21wdXRlclRhcmdldGluZyc7XG5cbmNvbnN0IGdhbWVNYXN0ZXJGYWN0b3J5ID0gKCkgPT4ge1xuXG4gICAgY29uc3QgYm9hcmRfcGxheWVyX3NoaXBzID0gc2hpcEdyaWRGYWN0b3J5KCk7XG4gICAgY29uc3QgYm9hcmRfY29tcHV0ZXJfc2hpcHMgPSBzaGlwR3JpZEZhY3RvcnkoKTtcblxuICAgIGNvbnN0IGJvYXJkX3BsYXllcl9hdHRhY2tzID0gYXR0YWNrR3JpZEZhY3RvcnkoKTtcbiAgICBjb25zdCBib2FyZF9jb21wdXRlcl9hdHRhY2tzID0gYXR0YWNrR3JpZEZhY3RvcnkoKTtcblxuICAgIGxldCBwbGF5ZXJUdXJuUmVzdWx0ID0gJyc7XG4gICAgbGV0IGNvbXB1dGVyVHVyblJlc3VsdCA9ICcnO1xuXG4gICAgYm9hcmRfcGxheWVyX3NoaXBzLmluaXREZWZhdWx0U2hpcHMoKTtcbiAgICBib2FyZF9jb21wdXRlcl9zaGlwcy5pbml0RGVmYXVsdFNoaXBzKCk7XG4gICAgY29uc3QgY29tcHV0ZXJUYXJnZXRpbmdBSSA9IGNvbXB1dGVyVGFyZ2V0aW5nQUlGYWN0b3J5KGJvYXJkX2NvbXB1dGVyX2F0dGFja3MpO1xuICAgIGxldCBhdHRhY2tMb2NhdGlvbjtcbiAgICBcbiAgICBjb25zdCBnZXRTaGlwR3JpZCA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIGJvYXJkX3BsYXllcl9zaGlwcy5nZXRTaGlwR3JpZCgpO1xuICAgIH1cblxuICAgIGNvbnN0IGdldFNoaXBHcmlkV3JhcHBlciA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIGJvYXJkX3BsYXllcl9zaGlwcztcbiAgICB9XG5cbiAgICBjb25zdCBwcm9jZXNzVXNlcklucHV0ID0gKHJvdyAsIGNvbCkgPT4ge1xuICAgICAgICAvL2NvbnNvbGUubG9nKGBWYWxpZCBwbGF5ZXIgYXR0YWNrICgke3Jvd30sICR7Y29sfSk6ICR7Ym9hcmRfcGxheWVyX2F0dGFja3MuaXNWYWxpZEF0dGFjayhyb3csIGNvbCl9YCk7XG4gICAgICAgIGlmKCFib2FyZF9wbGF5ZXJfYXR0YWNrcy5pc1ZhbGlkQXR0YWNrKHJvdywgY29sKSl7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgYm9hcmRfY29tcHV0ZXJfc2hpcHMucmVjZWl2ZUF0dGFjayhyb3csIGNvbCk7XG4gICAgICAgIHBsYXllclR1cm5SZXN1bHQgPSBib2FyZF9jb21wdXRlcl9zaGlwcy5nZXRPdXRjb21lKCk7XG4gICAgICAgIGJvYXJkX3BsYXllcl9hdHRhY2tzLnJlY29yZEF0dGFjayhyb3csIGNvbCk7XG4gICAgfVxuXG4gICAgY29uc3QgaXNBdHRhY2thYmxlQnlQbGF5ZXIgPSAocm93LCBjb2wpID0+IHtcbiAgICAgICAgcmV0dXJuIGJvYXJkX3BsYXllcl9hdHRhY2tzLmlzVmFsaWRBdHRhY2socm93LCBjb2wpO1xuICAgIH1cblxuICAgIGNvbnN0IHdpbkNoZWNrUGxheWVyID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gYm9hcmRfY29tcHV0ZXJfc2hpcHMuaXNEZWZlYXRlZCgpO1xuICAgIH1cblxuICAgIGNvbnN0IHdpbkNoZWNrQ29tcHV0ZXIgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBib2FyZF9wbGF5ZXJfc2hpcHMuaXNEZWZlYXRlZCgpO1xuICAgIH1cblxuICAgIGNvbnN0IGlzU2hpcFByZXNlbnRBdCA9IChyb3csIGNvbCwgdGFyZ2V0KSA9PiB7XG4gICAgICAgIGxldCBib2FyZCA9IHRhcmdldCA9PT0gJ2NvbXB1dGVyJyA/IGJvYXJkX2NvbXB1dGVyX3NoaXBzIDogYm9hcmRfcGxheWVyX3NoaXBzO1xuICAgICAgICByZXR1cm4gYm9hcmQuaXNTaGlwUHJlc2VudEF0KHJvdywgY29sKTtcbiAgICB9XG5cbiAgICBjb25zdCBwcm9jZXNzQ29tcHV0ZXJBdHRhY2sgPSAoKSA9PiB7XG4gICAgICAgIGxldCB0YXJnZXQgPSBjb21wdXRlclRhcmdldGluZ0FJLnBpY2tUYXJnZXRTaW1wbGUoKTtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhgVmFsaWQgY29tcHV0ZXIgYXR0YWNrICgke3RhcmdldC5yb3d9LCAke3RhcmdldC5jb2x9KTogJHtib2FyZF9jb21wdXRlcl9hdHRhY2tzLmlzVmFsaWRBdHRhY2sodGFyZ2V0LnJvdywgdGFyZ2V0LmNvbCl9YCk7XG4gICAgICAgIGlmKCFib2FyZF9jb21wdXRlcl9hdHRhY2tzLmlzVmFsaWRBdHRhY2sodGFyZ2V0LnJvdywgdGFyZ2V0LmNvbCkpe1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2dhbWUgbWFzdGVyOiBwcm9jZXNzQ29tcHV0ZXJBdHRhY2tFcnJvcicpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGJvYXJkX3BsYXllcl9zaGlwcy5yZWNlaXZlQXR0YWNrKHRhcmdldC5yb3csIHRhcmdldC5jb2wpO1xuICAgICAgICBjb21wdXRlclR1cm5SZXN1bHQgPSBib2FyZF9wbGF5ZXJfc2hpcHMuZ2V0T3V0Y29tZSgpO1xuICAgICAgICBib2FyZF9jb21wdXRlcl9hdHRhY2tzLnJlY29yZEF0dGFjayh0YXJnZXQucm93LCB0YXJnZXQuY29sKTtcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG5cbiAgICBjb25zdCBnZXRQbGF5ZXJUdXJuUmVzdWx0ID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gcGxheWVyVHVyblJlc3VsdDtcbiAgICB9XG5cbiAgICBjb25zdCBnZXRDb21wdXRlclR1cm5SZXN1bHQgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBjb21wdXRlclR1cm5SZXN1bHQ7XG4gICAgfVxuXG4gICAgY29uc3QgbW92ZVNoaXAgPSAoc2hpcElELCBkaXJlY3Rpb24pID0+IHtcbiAgICAgICAgYm9hcmRfcGxheWVyX3NoaXBzLm1vdmVTaGlwKHNoaXBJRCwgZGlyZWN0aW9uKTtcbiAgICB9XG5cbiAgICBjb25zdCByb3RhdGVTaGlwID0gKHNoaXBJRCwgZGlyZWN0aW9uKSA9PiB7XG4gICAgICAgIGJvYXJkX3BsYXllcl9zaGlwcy5yb3RhdGVTaGlwKHNoaXBJRCk7XG4gICAgfVxuXG4gICAgY29uc3QgZ2V0TG9jYXRpb25DaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBib2FyZF9wbGF5ZXJfc2hpcHMuZ2V0TG9jYXRpb25DaGFuZ2UoKTtcbiAgICB9XG5cbiAgICBjb25zdCBnZXRFcnJvck1zZyA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIGJvYXJkX3BsYXllcl9zaGlwcy5nZXRFcnJvck1zZygpO1xuICAgIH1cblxuICAgIGNvbnN0IGdldFBvc3NpYmxlTW92ZSA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIGJvYXJkX3BsYXllcl9zaGlwcy5nZXRQb3NzaWJsZU1vdmUoKTtcbiAgICB9XG5cbiAgICBjb25zdCByYW5kb21pemVQbGF5ZXJCb2FyZCA9ICgpID0+IHtcbiAgICAgICAgYm9hcmRfcGxheWVyX3NoaXBzLnJhbmRvbWl6ZSgpO1xuICAgIH1cblxuICAgIGNvbnN0IHJhbmRvbWl6ZUNvbXB1dGVyQm9hcmQgPSAoKSA9PiB7XG4gICAgICAgIGJvYXJkX2NvbXB1dGVyX3NoaXBzLnJhbmRvbWl6ZSgpO1xuICAgIH1cblxuICAgIHJldHVybiB7IFxuICAgICAgICBnZXRTaGlwR3JpZCwgXG4gICAgICAgIGdldFNoaXBHcmlkV3JhcHBlcixcbiAgICAgICAgcHJvY2Vzc1VzZXJJbnB1dCwgXG4gICAgICAgIGlzQXR0YWNrYWJsZUJ5UGxheWVyLCBcbiAgICAgICAgd2luQ2hlY2tQbGF5ZXIsIFxuICAgICAgICB3aW5DaGVja0NvbXB1dGVyLCBcbiAgICAgICAgaXNTaGlwUHJlc2VudEF0LFxuICAgICAgICBwcm9jZXNzQ29tcHV0ZXJBdHRhY2ssXG4gICAgICAgIGdldFBsYXllclR1cm5SZXN1bHQsXG4gICAgICAgIGdldENvbXB1dGVyVHVyblJlc3VsdCxcbiAgICAgICAgbW92ZVNoaXAsXG4gICAgICAgIHJvdGF0ZVNoaXAsXG4gICAgICAgIGdldExvY2F0aW9uQ2hhbmdlLFxuICAgICAgICBnZXRFcnJvck1zZyxcbiAgICAgICAgZ2V0UG9zc2libGVNb3ZlLFxuICAgICAgICByYW5kb21pemVQbGF5ZXJCb2FyZCxcbiAgICAgICAgcmFuZG9taXplQ29tcHV0ZXJCb2FyZFxuICAgIH07XG59XG5cblxuZXhwb3J0IHsgXG4gICAgZ2FtZU1hc3RlckZhY3Rvcnlcbn07IiwiY29uc3QgY29tcHV0ZXJUYXJnZXRpbmdBSUZhY3RvcnkgPSAoYm9hcmQpID0+IHtcbiAgICBsZXQgbGFzdENvb3JkaW5hdGVzSGl0O1xuICAgIGxldCBoaXRTaGlwID0gZmFsc2U7XG4gICAgbGV0IGdldFJhbmQgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMCk7XG4gICAgfVxuICAgIGxldCBwaWNrVGFyZ2V0U2ltcGxlID0gKCkgPT4ge1xuICAgICAgICBsZXQgcm93ID0gZ2V0UmFuZCgpO1xuICAgICAgICBsZXQgY29sID0gZ2V0UmFuZCgpO1xuICAgICAgICB3aGlsZSghYm9hcmQuaXNWYWxpZEF0dGFjayhyb3csIGNvbCkpe1xuICAgICAgICAgICAgY29uc29sZS5sb2coYCgke3Jvd30sICR7Y29sfSkgaXMgaW52YWxpZC4gUmVyb2xsaW5nYClcbiAgICAgICAgICAgIHJvdyA9IGdldFJhbmQoKTtcbiAgICAgICAgICAgIGNvbCA9IGdldFJhbmQoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZyhgQUkgZmluYWwgdGFyZ2V0ICgke3Jvd30sICR7Y29sfSlgKTtcbiAgICAgICAgcmV0dXJuIHtyb3csIGNvbH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgcGlja1RhcmdldFNpbXBsZSB9O1xufVxuXG5leHBvcnQgeyBcbiAgICBjb21wdXRlclRhcmdldGluZ0FJRmFjdG9yeVxufTsiLCJpbXBvcnQgeyBcbiAgICB3ZWJzaXRlTWFuYWdlckZhY3Rvcnlcbn0gZnJvbSAnLi93ZWJzaXRlTWFuYWdlcic7XG5pbXBvcnQgJy4vc3R5bGUuY3NzJztcblxuY29uc3Qgc2l0ZU1hbmFnZXIgPSB3ZWJzaXRlTWFuYWdlckZhY3RvcnkoKTtcbnNpdGVNYW5hZ2VyLmluaXRpYXRlKCk7Il0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJuYyIsImRpc3BsYXlTaGlwcyIsInNoaXBHcmlkIiwidGFibGUiLCJyb3ciLCJjb2wiLCJjaGlsZHJlbiIsImNsYXNzTGlzdCIsImFkZCIsInZpZXdDb250cm9sbGVyIiwic2hpcFRCb2R5IiwiYXR0YWNrR3JpZCIsImVycm9yTWVzc2FnZSIsIm1zZ09uZSIsIm1zZ1R3byIsInNoaXBTZWxlY3RvciIsImJ1dHRvblN1aXRlIiwiZ2FtZU1hc3RlciIsImNsZWFyRXhpc3RpbmdIaWdobGlnaHRzIiwiZ2V0VGFibGVDZWxsIiwiY3JlYXRlSGlnaGxpZ2h0aW5nIiwic2hpcEdyaWRXcmFwcGVyIiwib25jaGFuZ2UiLCJldmVudCIsInNoaXBJRCIsInZhbHVlIiwiY29vcmRpbmF0ZXMiLCJnZXRTaGlwTG9jYXRpb24iLCJjb29yZCIsImNvbnNvbGUiLCJsb2ciLCJteVREIiwidXBkYXRlU2hpcFZpZXciLCJnZXRQb3NzaWJsZU1vdmUiLCJsb2NhdGlvbkNoYW5nZSIsImdldExvY2F0aW9uQ2hhbmdlIiwibG9jYXRpb24iLCJvbGRMb2NhdGlvbnMiLCJjZWxsIiwibmV3TG9jYXRpb25zIiwidXBkYXRlRXJyb3JNc2ciLCJlcnJvckNvZGUiLCJnZXRFcnJvck1zZyIsInRleHRDb250ZW50Iiwic2V0VXBWaWV3IiwiZ2FtZSIsInByb2Nlc3NVc2VySW5wdXQiLCJjb250YWluZXIiLCJnZXRTaGlwR3JpZCIsInNldFVwTWFpbiIsInNldFVwIiwidXAiLCJsZWZ0IiwiZG93biIsInJpZ2h0Iiwicm90YXRlIiwicmFuZG9taXplIiwic3RhcnQiLCJsb2FkR2FtZU1hc3RlciIsIm9uY2xpY2siLCJ0Ym9keSIsImNsaWNrIiwibWFrZUF0dGFja0dyaWRDbGlja2FibGUiLCJkaXNhYmxlZCIsInJhbmRvbWl6ZVBsYXllckJvYXJkIiwiY2xlYXJTaGlwRGlzcGxheSIsImxvYWRCdXR0b25GdW5jdGlvbmFsaXR5IiwiZ2V0U2hpcEdyaWRXcmFwcGVyIiwibW92ZVNoaXAiLCJyb3RhdGVTaGlwIiwibWFya0NvbXB1dGVyQXR0YWNrIiwiaXNTaGlwUHJlc2VudEF0IiwidXBkYXRlTXNnT25lIiwibXNnIiwidXBkYXRlTXNnVHdvIiwic2hpcEZhY3RvcnkiLCJsZW4iLCJkaXIiLCJkaXJlY3Rpb24iLCJoaXRzU3VzdGFpbmVkIiwic3VuayIsImdldEhpdHNTdXN0YWluZWQiLCJoaXQiLCJzZXREaXJlY3Rpb24iLCJuZXdEaXJlY3Rpb24iLCJpc1N1bmsiLCJnZXRMZW5ndGgiLCJnZXREaXJlY3Rpb24iLCJnZXRJRCIsInNoaXBHcmlkRmFjdG9yeSIsIkFycmF5IiwiZmlsbCIsInNoaXBBcnIiLCJzaGlwTG9jYXRpb25zIiwidHJhZmZpY0NvbnRyb2xsZXIiLCJzaGlwR3JpZEluIiwic2hpcExvY2F0aW9uc0luIiwic2hpcEFyckluIiwiZXJyb3IiLCJwb3NzaWJsZU1vdmUiLCJpc091dE9mQm91bmRzQ29vcmQiLCJpc091dE9mQm91bmRzIiwicmVzZXRMb2NhdGlvbkNoYW5nZSIsImlzU3BhY2VWaW9sYXRpb25DZWxsIiwiaXNTcGFjZVZpb2xhdGlvbiIsInJlbW92ZU9sZExvY2F0aW9uIiwibWFya05ld0xvY2F0aW9uIiwic3RydWN0dXJlZENsb25lIiwicm93TW9kIiwiY29sTW9kIiwiZ2V0TmV3TG9jYXRpb25zIiwic2hpcCIsImFuY2hvckxvY2F0aW9uIiwiZ2V0TmV3Um90YXRpb25Mb2NhdGlvbnMiLCJnZXRFcnJvciIsImhhc1NwYWNlQ29uZmxpY3QiLCJzdXJyb3VuZGluZ0xvY2F0aW9ucyIsImhhc1NwYWNlQ29uZmxpY3RGcm9tTG9jYXRpb25zIiwibW9kIiwiZ2V0U3Vycm91bmRpbmdMb2NhdGlvbnMiLCJwcmludEdyaWQiLCJyb3dTdHIiLCJ0cmFmZmljQ29udHJvbGxlckZhY3RvcnkiLCJvdXRjb21lIiwiaW5Cb3VuZHMiLCJpc1ZhbGlkU2hpcFBsYWNlbWVudCIsInBsYWNlU2hpcCIsImdldFJhbmRvbUludCIsIm1heCIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInJlY2VpdmVBdHRhY2siLCJnZXRPdXRjb21lIiwiaXNEZWZlYXRlZCIsImluaXREZWZhdWx0U2hpcHMiLCJzaGlwXzEiLCJzaGlwXzIiLCJzaGlwXzMiLCJzaGlwXzQiLCJzaGlwXzUiLCJzaGlwXzYiLCJzaGlwXzciLCJzaGlwXzgiLCJzaGlwXzkiLCJzaGlwXzEwIiwiY3JlYXRlRGVmYXVsdFNoaXBzIiwiY2xlYXJHcmlkIiwibWVtYmVyIiwiY2xlYXJTaGlwTG9jYXRpb25zIiwiZ2V0U2hpcEFyciIsImdldFNoaXBMb2NhdGlvbnMiLCJhdHRhY2tHcmlkRmFjdG9yeSIsImF0dGFja3MiLCJpc1ZhbGlkQXR0YWNrIiwicmVjb3JkQXR0YWNrIiwibG9jYWxzIiwiYm9hcmRfcGxheWVyX3NoaXBzIiwiYm9hcmRfY29tcHV0ZXJfc2hpcHMiLCJib2FyZF9wbGF5ZXJfYXR0YWNrcyIsImJvYXJkX2NvbXB1dGVyX2F0dGFja3MiLCJwbGF5ZXJUdXJuUmVzdWx0IiwiY29tcHV0ZXJUdXJuUmVzdWx0IiwiY29tcHV0ZXJUYXJnZXRpbmdBSSIsImJvYXJkIiwiZ2V0UmFuZCIsInBpY2tUYXJnZXRTaW1wbGUiLCJjb21wdXRlclRhcmdldGluZ0FJRmFjdG9yeSIsImlzQXR0YWNrYWJsZUJ5UGxheWVyIiwid2luQ2hlY2tQbGF5ZXIiLCJ3aW5DaGVja0NvbXB1dGVyIiwicHJvY2Vzc0NvbXB1dGVyQXR0YWNrIiwiZ2V0UGxheWVyVHVyblJlc3VsdCIsImdldENvbXB1dGVyVHVyblJlc3VsdCIsInJhbmRvbWl6ZUNvbXB1dGVyQm9hcmQiLCJnYW1lTWFzdGVyRmFjdG9yeSIsIm15Vmlld0NvbnRyb2xsZXIiLCJzaGlwUHJlc2VudCIsIm1hcmtBdHRhY2siLCJkYXRhc2V0IiwiaW5pdGlhdGUiLCJ3ZWJzaXRlTWFuYWdlckZhY3RvcnkiXSwic291cmNlUm9vdCI6IiJ9