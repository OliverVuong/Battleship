(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>a});var o=n(537),r=n.n(o),i=n(645),s=n.n(i)()(r());s.push([e.id,"body {\n    background-color: lightgray;\n}\n\n.animate {\n    /* animation: 0.7s slide-in 0.7s 3 linear; */\n    animation-name: slide-in;\n    animation-duration: 0.3s;\n    animation-iteration-count: 3;\n}\n  \n@keyframes slide-in {\n    0% {\n        transform: scale(0.25);\n        transform: translateY(-1000px);\n    }\n    80%{\n        transform: scale(0.25);\n    }\n    100% {\n        transform: translateY(0);\n        transform: scale(1);\n    }\n}\n\nth, td{\n    margin: 0;\n    padding: 0;\n    height: 32px;\n    width: 32px;\n}\n\ntd {\n    border: 1px solid black;\n}\n\ndiv.hit, div.ship {\n    margin: 0;\n    padding: 0;\n    \n    height: 100%;\n    width: 100%;\n}\n\ndiv.ship {\n    background-color: blue;\n}\n\ndiv.hit {\n    background-color: red;\n}\n\ndiv.hit.ship {\n    border: 5px solid blue;\n}\n\ntd.ship {\n    background-color: blue;\n}\n\ntd.miss, td.hit {\n    background-color: red;\n}\n\ntd.hit {\n    border: 5px solid blue;\n    box-sizing: border-box;\n}\n\ntd.selected {\n    background-color: turquoise;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,2BAA2B;AAC/B;;AAEA;IACI,4CAA4C;IAC5C,wBAAwB;IACxB,wBAAwB;IACxB,4BAA4B;AAChC;;AAEA;IACI;QACI,sBAAsB;QACtB,8BAA8B;IAClC;IACA;QACI,sBAAsB;IAC1B;IACA;QACI,wBAAwB;QACxB,mBAAmB;IACvB;AACJ;;AAEA;IACI,SAAS;IACT,UAAU;IACV,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,SAAS;IACT,UAAU;;IAEV,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,sBAAsB;IACtB,sBAAsB;AAC1B;;AAEA;IACI,2BAA2B;AAC/B",sourcesContent:["body {\n    background-color: lightgray;\n}\n\n.animate {\n    /* animation: 0.7s slide-in 0.7s 3 linear; */\n    animation-name: slide-in;\n    animation-duration: 0.3s;\n    animation-iteration-count: 3;\n}\n  \n@keyframes slide-in {\n    0% {\n        transform: scale(0.25);\n        transform: translateY(-1000px);\n    }\n    80%{\n        transform: scale(0.25);\n    }\n    100% {\n        transform: translateY(0);\n        transform: scale(1);\n    }\n}\n\nth, td{\n    margin: 0;\n    padding: 0;\n    height: 32px;\n    width: 32px;\n}\n\ntd {\n    border: 1px solid black;\n}\n\ndiv.hit, div.ship {\n    margin: 0;\n    padding: 0;\n    \n    height: 100%;\n    width: 100%;\n}\n\ndiv.ship {\n    background-color: blue;\n}\n\ndiv.hit {\n    background-color: red;\n}\n\ndiv.hit.ship {\n    border: 5px solid blue;\n}\n\ntd.ship {\n    background-color: blue;\n}\n\ntd.miss, td.hit {\n    background-color: red;\n}\n\ntd.hit {\n    border: 5px solid blue;\n    box-sizing: border-box;\n}\n\ntd.selected {\n    background-color: turquoise;\n}"],sourceRoot:""}]);const a=s},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,i){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(o)for(var a=0;a<this.length;a++){var l=this[a][0];null!=l&&(s[l]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);o&&s[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),r&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=r):u[4]="".concat(r)),t.push(u))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var i={},s=[],a=0;a<e.length;a++){var l=e[a],c=o.base?l[0]+o.base:l[0],u=i[c]||0,d="".concat(c," ").concat(u);i[c]=u+1;var p=n(d),A={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)t[p].references++,t[p].updater(A);else{var h=r(A,o);o.byIndex=a,t.splice(a,0,{identifier:d,updater:h,references:1})}s.push(d)}return s}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var i=o(e=e||[],r=r||{});return function(e){e=e||[];for(var s=0;s<i.length;s++){var a=n(i[s]);t[a].references--}for(var l=o(e,r),c=0;c<i.length;c++){var u=n(i[c]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}i=l}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={id:o,exports:{}};return e[o](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{const e=()=>{let e,t,n,o,r,i,s,a;const l=()=>{for(let e=0;e<10;e++)for(let t=0;t<10;t++)A(e,t).classList.remove("selected")},c=e=>{i.onchange=t=>{l();let n=i.value,o=e.getShipLocation(n);for(let e of o){console.log("coords:"),console.log(e);let t=A(e.row,e.col);console.log("myTD"),console.log(t),t.classList.add("selected")}}},u=()=>{if(!a.getPossibleMove())return void console.log("no move exectued- exiting out of update ship view");let e=a.getLocationChange();for(let t of e.oldLocations){let e=A(t.row,t.col);e.classList.remove("ship"),e.classList.remove("selected")}for(let t of e.newLocations){let e=A(t.row,t.col);e.classList.add("ship"),e.classList.add("selected")}},d=()=>{let e=a.getErrorMsg();console.log(e),n.textContent="outOfBounds"===e?"Cannot move ships out of bounds.":"spaceViolation"===e?"Cannot move ships to close. A minimum of one empty space between ships is required.":""},p=(t,n)=>{document.querySelector("#content"),((t,n,o)=>{((e,t)=>{for(let n=0;n<10;n++)for(let o=0;o<10;o++)e[n][o]&&t.children[n+1].children[o+1].classList.add("ship")})(n.getShipGrid(),e)})(0,t)},A=(t,n)=>e.children[t+1].children[n+1];return{setUp:(A,h)=>{e=document.querySelector(".shipGrid"),t=document.querySelector(".attackGrid"),n=document.querySelector(".errorText"),o=document.querySelector(".msgOne"),r=document.querySelector(".msgTwo"),i=document.querySelector("#ship-selector"),s={},s.up=document.querySelector(".up"),s.left=document.querySelector(".left"),s.down=document.querySelector(".down"),s.right=document.querySelector(".right"),s.rotate=document.querySelector(".rotate"),s.randomize=document.querySelector(".randomize"),s.start=document.querySelector(".start"),c(),(e=>{a=e})(A),((e,n)=>{s.start.onclick=()=>{((e,t)=>{for(let n=0;n<10;n++)for(let o=0;o<10;o++)e.children[n+1].children[o+1].onclick=e=>{t(n,o,e)}})(t,e),s.up.disabled=!0,s.left.disabled=!0,s.down.disabled=!0,s.right.disabled=!0,s.rotate.disabled=!0,s.randomize.disabled=!0,s.start.disabled=!0,i.disabled=!0,l()},c(n)})(h,A.getShipGridWrapper()),s.up.onclick=()=>{a.moveShip(i.value,"up"),u(),d()},s.down.onclick=()=>{a.moveShip(i.value,"down"),u(),d()},s.right.onclick=()=>{a.moveShip(i.value,"right"),u(),d()},s.left.onclick=()=>{a.moveShip(i.value,"left"),u(),d()},p(A)},setUpView:p,markComputerAttack:(e,t)=>{let n=A(e,t);a.isShipPresentAt(e,t,"player")?n.classList.add("hit"):n.classList.add("miss"),n.classList.add("animate")},updateMsgOne:(e,t,n)=>{let r;"miss"===n?r=`You fire at (${e}, ${t}) but hit nothing.`:"hit"===n?r=`You fire at (${e}, ${t}) and score a hit.`:"sunk"===n?r=`You fire at (${e}, ${t}), score a hit, and sink a ship.`:"loss"===n&&(r="Your opponent has sunk all your ships. You lose the match."),o.textContent=r},updateMsgTwo:(e,t,n)=>{let o;"miss"===n?o=`Your opponent fires at (${e}, ${t}) but hits nothing.`:"hit"===n?o=`Your opponent fires at (${e}, ${t}) and scores a hit.`:"sunk"===n?o=`Your opponent fires at (${e}, ${t}), scores a hit, and sinks a ship.`:"win"===n&&(o="You have sunk all your opponent's ships and won!"),r.textContent=o},updateShipView:u}},t=(e,t="noID",n="south")=>{const o=t,r=e,i=n;let s=0,a=!1;return{getHitsSustained:()=>s,hit:()=>{s++,s===r&&(a=!0)},isSunk:()=>a,getLength:()=>r,getDirection:()=>i,getID:()=>o}},o=()=>{const e=Array(10).fill().map((()=>Array(10).fill(null))),n=[],o={},r=((e,t,n)=>{let o=e,r=t,i=n,s="none",a={},l=!1;const c=(e,t)=>e<0||e>=10||t<0||t>=10,u=e=>{for(let t of e)if(c(t.row,t.col))return!0;return!1},d=()=>{a={}},p=(e,t,n)=>!c(e,t)&&null!==o[e][t]&&void 0!==o[e][t]&&o[e][t].getID()!==n,A=(e,t)=>{for(let n of t){let t=n.row,o=n.col;if(p(t-1,o+1,e))return!0;if(p(t,o+1,e))return!0;if(p(t+1,o+1,e))return!0;if(p(t+1,o,e))return!0;if(p(t+1,o-1,e))return!0;if(p(t,o-1,e))return!0;if(p(t-1,o-1,e))return!0;if(p(t-1,o,e))return!0}return!1},h=(e,t)=>{for(let e of t)o[e.row][e.col]=null;r[e]=[]},f=(e,t)=>{for(let n of t)o[n.row][n.col]=i[e-1],r[e].push(structuredClone(n))};return{moveShip:(e,t)=>{let n=structuredClone(r[e]),o=structuredClone(((e,t)=>{let n=[],o=0,r=0;switch(t){case"up":o=-1;break;case"down":o=1;break;case"left":r=-1;break;case"right":r=1}for(let t of e){let e=t.row+o,i=t.col+r;n.push({row:e,col:i})}return n})(n,t));return u(o)?(s="outOfBounds",d(),void(l=!1)):A(e,o)?(s="spaceViolation",d(),void(l=!1)):(s="",l=!0,a={oldLocations:n,newLocations:o},h(e,n),void f(e,o))},rotateShip:e=>{let t=i.get(e-1),n="south"===t.getDirection()?"east":"south",o=r[e-1],a=(o[0],[]);return u(a)?(s="outOfBounds",d(),void(l=!1)):A(e,a)?(s="spaceViolation",d(),void(l=!1)):(s="",l=!0,t.setDirection(n),h(e,o),void f(e,a))},getError:()=>s,getPossibleMove:()=>l,getLocationChange:()=>a}})(e,o,n);let i="";const s=(e,t)=>e>=0&&e<10&&t>=0&&t<10,a=(t,r,i)=>{if(!((t,n,o)=>{let r="south"===t.getDirection()?1:0,i="east"===t.getDirection()?1:0;for(let a=0;a<t.getLength();a++){if(!s(n,o))return!1;if(null!=e[n][o])return!1;n+=r,o+=i}return!0})(t,r,i))throw new Error(`Failed to place ship ${t.getID()} at row: ${r}, col: ${i}`);n.push(t),o[t.getID()]=[];let a="south"===t.getDirection()?1:0,l="east"===t.getDirection()?1:0;for(let n=0;n<t.getLength();n++)e[r][i]=t,o[t.getID()].push({row:r,col:i}),r+=a,i+=l};return{placeShip:a,getShipLocation:e=>o[e],receiveAttack:(t,n)=>{i="",e[t][n]?(e[t][n].hit(),i="hit",e[t][n].isSunk()&&(i="sunk")):i="miss"},getOutcome:()=>i,isDefeated:()=>{for(let e of n)if(!e.isSunk())return!1;return!0},initDefaultShips:()=>{let e=t(4,"1","east");a(e,0,4);let n=t(2,"2","south");a(n,0,9);let o=t(2,"3","east");a(o,2,0);let r=t(3,"4","south");a(r,3,4);let i=t(1,"5","south");a(i,3,6);let s=t(3,"6","south");a(s,4,9);let l=t(2,"7","east");a(l,5,0);let c=t(1,"8");a(c,8,0);let u=t(1,"9");a(u,9,5);let d=t(1,"10");a(d,9,9)},getShipGrid:()=>e,getShipArr:()=>n,getShipLocations:()=>o,isShipPresentAt:(t,n)=>null!=e[t][n],moveShip:(e,t)=>{r.moveShip(e,t)},getLocationChange:()=>r.getLocationChange(),getErrorMsg:()=>r.getError(),getPossibleMove:()=>r.getPossibleMove()}},r=()=>{const e=Array(10).fill().map((()=>Array(10).fill(null)));return{isValidAttack:(t,n)=>((e,t)=>e>=0&&e<10&&t>=0&&t<10)(t,n)&&null===e[t][n],recordAttack:(t,n)=>{e[t][n]="hit"}}};var i=n(379),s=n.n(i),a=n(795),l=n.n(a),c=n(569),u=n.n(c),d=n(565),p=n.n(d),A=n(216),h=n.n(A),f=n(589),g=n.n(f),m=n(426),v={};v.styleTagTransform=g(),v.setAttributes=p(),v.insert=u().bind(null,"head"),v.domAPI=l(),v.insertStyleElement=h(),s()(m.Z,v),m.Z&&m.Z.locals&&m.Z.locals,(()=>{let t=(()=>{const e=o(),t=o(),n=r(),i=r();let s="",a="";e.initDefaultShips(),t.initDefaultShips();const l=(e=>{let t=()=>Math.floor(10*Math.random());return{pickTargetSimple:()=>{let n=t(),o=t();for(;!e.isValidAttack(n,o);)console.log(`(${n}, ${o}) is invalid. Rerolling`),n=t(),o=t();return console.log(`AI final target (${n}, ${o})`),{row:n,col:o}}}})(i);return{getShipGrid:()=>e.getShipGrid(),getShipGridWrapper:()=>e,processUserInput:(e,o)=>{n.isValidAttack(e,o)&&(t.receiveAttack(e,o),s=t.getOutcome(),n.recordAttack(e,o))},isAttackableByPlayer:(e,t)=>n.isValidAttack(e,t),winCheckPlayer:()=>t.isDefeated(),winCheckComputer:()=>e.isDefeated(),isShipPresentAt:(n,o,r)=>("computer"===r?t:e).isShipPresentAt(n,o),processComputerAttack:()=>{let t=l.pickTargetSimple();if(i.isValidAttack(t.row,t.col))return e.receiveAttack(t.row,t.col),a=e.getOutcome(),i.recordAttack(t.row,t.col),t;console.log("game master: processComputerAttackError")},getPlayerTurnResult:()=>s,getComputerTurnResult:()=>a,moveShip:(t,n)=>{e.moveShip(t,n)},getLocationChange:()=>e.getLocationChange(),getErrorMsg:()=>e.getErrorMsg(),getPossibleMove:()=>e.getPossibleMove()}})(),n=e();const i=(e,o,r)=>{if(!t.isAttackableByPlayer(e,o))return;if(((e,t)=>{console.log(e.target);let n=e.target;n.classList.add("animate"),t?n.classList.add("hit"):n.classList.add("miss")})(r,t.isShipPresentAt(r.target.dataset.row,r.target.dataset.col,"computer")),t.processUserInput(e,o),n.updateMsgOne(e,o,t.getPlayerTurnResult()),t.winCheckPlayer())return console.log("player wins"),void n.updateMsgTwo(0,0,"win");let i=t.processComputerAttack();n.markComputerAttack(i.row,i.col),console.log(`Your opponent fires at (${i.row}, ${i.col}) and ${t.getComputerTurnResult()}`),n.updateMsgTwo(i.row,i.col,t.getComputerTurnResult()),t.winCheckComputer()&&(console.log("computer wins"),n.updateMsgTwo(0,0,"loss"))};return{initiate:()=>{n.setUp(t,i)},processUserInput:i,getShipGrid:()=>t.getShipGrid()}})().initiate()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,