(()=>{"use strict";var t={426:(t,e,n)=>{n.d(e,{Z:()=>s});var r=n(537),o=n.n(r),a=n(645),i=n.n(a)()(o());i.push([t.id,"body {\n    background-color: lightgray;\n}\n\n.animate {\n    /* animation: 0.7s slide-in 0.7s 3 linear; */\n    animation-name: slide-in;\n    animation-duration: 0.3s;\n    animation-iteration-count: 3;\n}\n  \n@keyframes slide-in {\n    0% {\n        transform: scale(0.25);\n        transform: translateY(-1000px);\n    }\n    80%{\n        transform: scale(0.25);\n    }\n    100% {\n        transform: translateY(0);\n        transform: scale(1);\n    }\n}\n\nth, td{\n    margin: 0;\n    padding: 0;\n    height: 32px;\n    width: 32px;\n}\n\ntd {\n    border: 1px solid black;\n}\n\ndiv.hit, div.ship {\n    margin: 0;\n    padding: 0;\n    \n    height: 100%;\n    width: 100%;\n}\n\ndiv.ship {\n    background-color: blue;\n}\n\ndiv.hit {\n    background-color: red;\n}\n\ndiv.hit.ship {\n    border: 5px solid blue;\n    box-sizing: border-box;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,2BAA2B;AAC/B;;AAEA;IACI,4CAA4C;IAC5C,wBAAwB;IACxB,wBAAwB;IACxB,4BAA4B;AAChC;;AAEA;IACI;QACI,sBAAsB;QACtB,8BAA8B;IAClC;IACA;QACI,sBAAsB;IAC1B;IACA;QACI,wBAAwB;QACxB,mBAAmB;IACvB;AACJ;;AAEA;IACI,SAAS;IACT,UAAU;IACV,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,SAAS;IACT,UAAU;;IAEV,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,sBAAsB;IACtB,sBAAsB;AAC1B",sourcesContent:["body {\n    background-color: lightgray;\n}\n\n.animate {\n    /* animation: 0.7s slide-in 0.7s 3 linear; */\n    animation-name: slide-in;\n    animation-duration: 0.3s;\n    animation-iteration-count: 3;\n}\n  \n@keyframes slide-in {\n    0% {\n        transform: scale(0.25);\n        transform: translateY(-1000px);\n    }\n    80%{\n        transform: scale(0.25);\n    }\n    100% {\n        transform: translateY(0);\n        transform: scale(1);\n    }\n}\n\nth, td{\n    margin: 0;\n    padding: 0;\n    height: 32px;\n    width: 32px;\n}\n\ntd {\n    border: 1px solid black;\n}\n\ndiv.hit, div.ship {\n    margin: 0;\n    padding: 0;\n    \n    height: 100%;\n    width: 100%;\n}\n\ndiv.ship {\n    background-color: blue;\n}\n\ndiv.hit {\n    background-color: red;\n}\n\ndiv.hit.ship {\n    border: 5px solid blue;\n    box-sizing: border-box;\n}"],sourceRoot:""}]);const s=i},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,o,a){"string"==typeof t&&(t=[[null,t,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var l=0;l<t.length;l++){var d=[].concat(t[l]);r&&i[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),e.push(d))}},e}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var a={},i=[],s=0;s<t.length;s++){var c=t[s],l=r.base?c[0]+r.base:c[0],d=a[l]||0,u="".concat(l," ").concat(d);a[l]=d+1;var p=n(u),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)e[p].references++,e[p].updater(h);else{var A=o(h,r);r.byIndex=s,e.splice(s,0,{identifier:u,updater:A,references:1})}i.push(u)}return i}function o(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,o){var a=r(t=t||[],o=o||{});return function(t){t=t||[];for(var i=0;i<a.length;i++){var s=n(a[i]);e[s].references--}for(var c=r(t,o),l=0;l<a.length;l++){var d=n(a[l]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}a=c}}},569:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return t[r](a,a.exports,n),a.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nc=void 0,(()=>{const t=document.querySelector("#content"),e=document.createElement("footer");t.appendChild(e);const r=()=>{let t,e;return{setUpView:(n,r)=>{const o=document.querySelector("#content");(t=>{let e=document.createElement("header"),n=document.createElement("h1");n.textContent="Battleship",e.appendChild(n),t.appendChild(e)})(o),((t,e,n)=>{((t,e)=>{let n=t.children[0];for(let t=0;t<10;t++)for(let r=0;r<10;r++)n.children[t+1].children[r+1].onclick=n=>{e(t,r,n)}})(document.querySelector(".attackGrid"),n)})(0,0,r),(t=>{const e=document.createElement("div");e.classList.add("buttonContainer"),e.appendChild((()=>{const t=document.createElement("div");t.classList.add("dropDownContainer");const e=document.createElement("label");e.for="ship-selector",e.textContent="Chose a ship";const n=document.createElement("select");n.name="ship-selector",n.id="ship-selector";for(let t=1;t<=10;t++){const e=document.createElement("option");e.value=`Ship${t}`,e.textContent=`Ship ${t}`,n.appendChild(e)}return t.appendChild(e),t.appendChild(n),t})()),e.appendChild((()=>{const t=document.createElement("div");t.classList.add("buttonsContainer");const e=document.createElement("button");e.textContent="Up",e.classList.add("up");const n=document.createElement("button");n.textContent="Left",n.classList.add("left");const r=document.createElement("button");r.textContent="Down",r.classList.add("down");const o=document.createElement("button");o.textContent="Right",o.classList.add("right");const a=document.createElement("button");a.textContent="Rotate",a.classList.add("rotate");const i=document.createElement("button");return i.textContent="Start",i.classList.add("start"),t.appendChild(e),t.appendChild(n),t.appendChild(r),t.appendChild(o),t.appendChild(a),t.appendChild(i),t})()),e.appendChild((()=>{const t=document.createElement("div");t.classList.add("errorContainer");const e=document.createElement("p");return e.classList.add("errorText"),e.textContent="Error goes here, otherwise blank",t.appendChild(e),t})()),t.appendChild(e)})(o),(n=>{const r=document.createElement("p");r.classList.add("msgDisplay"),r.classList.add("container"),t=document.createElement("p"),t.classList.add("msgOne"),t.textContent="Begin the game by clicking on the right board to select coordinates to fire at",e=document.createElement("p"),e.classList.add("msgTwo"),e.textContent="Have fun!",n.appendChild(r),r.appendChild(t),r.appendChild(e)})(o)},markComputerAttack:(t,e)=>{let n=((t,e)=>(void 0).children[t+1].children[e+1])(t,e);if(n.firstChild)n.firstChild.classList.add("hit"),n.firstChild.classList.add("animate");else{let t=document.createElement("div");t.classList.add("hit"),t.classList.add("animate"),n.appendChild(t)}},updateMsgOne:(e,n,r)=>{let o;"miss"===r?o=`You fire at (${e}, ${n}) but hit nothing.`:"hit"===r?o=`You fire at (${e}, ${n}) and score a hit.`:"sunk"===r?o=`You fire at (${e}, ${n}), score a hit, and sink a ship.`:"loss"===r&&(o="Your opponent has sunk all your ships. You lose the match."),t.textContent=o},updateMsgTwo:(t,n,r)=>{let o;"miss"===r?o=`Your opponent fires at (${t}, ${n}) but hits nothing.`:"hit"===r?o=`Your opponent fires at (${t}, ${n}) and scores a hit.`:"sunk"===r?o=`Your opponent fires at (${t}, ${n}), scores a hit, and sinks a ship.`:"win"===r&&(o="You have sunk all your opponent's ships and won!"),e.textContent=o}}},o=(t,e="noID",n="south")=>{const r=e,o=t,a=n;let i=0,s=!1;return{getHitsSustained:()=>i,hit:()=>{i++,i===o&&(s=!0)},isSunk:()=>s,getLength:()=>o,getDirection:()=>a,getID:()=>r}},a=()=>{const t=Array(10).fill().map((()=>Array(10).fill(null))),e=[];let n="";const r=(t,e)=>t>=0&&t<10&&e>=0&&e<10,a=(n,o,a)=>{if(!((e,n,o)=>{let a="south"===e.getDirection()?1:0,i="east"===e.getDirection()?1:0;for(let s=0;s<e.getLength();s++){if(!r(n,o))return!1;if(null!=t[n][o])return!1;n+=a,o+=i}return!0})(n,o,a))throw new Error(`Failed to place ship ${n.getID()} at row: ${o}, col: ${a}`);e.push(n);let i="south"===n.getDirection()?1:0,s="east"===n.getDirection()?1:0;for(let e=0;e<n.getLength();e++)t[o][a]=n,o+=i,a+=s};return{placeShip:a,receiveAttack:(e,r)=>{n="",t[e][r]?(t[e][r].hit(),n="hit",t[e][r].isSunk()&&(n="sunk")):n="miss"},getOutcome:()=>n,isDefeated:()=>{for(let t of e)if(!t.isSunk())return!1;return!0},initDefaultShips:()=>{let t=o(4,"a","east");a(t,0,4),e.push(t);let n=o(2,"b","south");a(n,0,9),e.push(n);let r=o(2,"c","east");a(r,2,0),e.push(r);let i=o(3,"d","south");a(i,3,4),e.push(i);let s=o(1,"e","south");a(s,3,6),e.push(s);let c=o(3,"f","south");a(c,4,9),e.push(c);let l=o(2,"g","east");a(l,5,0),e.push(l);let d=o(1,"h");a(d,8,0),e.push(d);let u=o(1,"i");a(u,9,5),e.push(u);let p=o(1,"j");a(p,9,9),e.push(p)},getShipGrid:()=>t,isShipPresentAt:(e,n)=>null!=t[e][n]}},i=()=>{const t=Array(10).fill().map((()=>Array(10).fill(null)));return{isValidAttack:(e,n)=>((t,e)=>t>=0&&t<10&&e>=0&&e<10)(e,n)&&null===t[e][n],recordAttack:(e,n)=>{t[e][n]="hit"}}};var s=n(379),c=n.n(s),l=n(795),d=n.n(l),u=n(569),p=n.n(u),h=n(565),A=n.n(h),m=n(216),f=n.n(m),C=n(589),g=n.n(C),v=n(426),b={};b.styleTagTransform=g(),b.setAttributes=A(),b.insert=p().bind(null,"head"),b.domAPI=d(),b.insertStyleElement=f(),c()(v.Z,b),v.Z&&v.Z.locals&&v.Z.locals,(()=>{let t=(()=>{const t=a(),e=a(),n=i(),r=i();let o="",s="";t.initDefaultShips(),e.initDefaultShips();const c=(t=>{let e=()=>Math.floor(10*Math.random());return{pickTargetSimple:()=>{let n=e(),r=e();for(;!t.isValidAttack(n,r);)console.log(`(${n}, ${r}) is invalid. Rerolling`),n=e(),r=e();return console.log(`AI final target (${n}, ${r})`),{row:n,col:r}}}})(r);return{getShipGrid:()=>t.getShipGrid(),processUserInput:(t,r)=>{n.isValidAttack(t,r)&&(e.receiveAttack(t,r),o=e.getOutcome(),n.recordAttack(t,r))},isAttackableByPlayer:(t,e)=>n.isValidAttack(t,e),winCheckPlayer:()=>e.isDefeated(),winCheckComputer:()=>t.isDefeated(),isShipPresentAt:(n,r,o)=>("computer"===o?e:t).isShipPresentAt(n,r),processComputerAttack:()=>{let e=c.pickTargetSimple();if(r.isValidAttack(e.row,e.col))return t.receiveAttack(e.row,e.col),s=t.getOutcome(),r.recordAttack(e.row,e.col),e;console.log("game master: processComputerAttackError")},getPlayerTurnResult:()=>o,getComputerTurnResult:()=>s}})(),e=r();const n=(n,r,o)=>{if(!t.isAttackableByPlayer(n,r))return;if(((t,e)=>{console.log(t.target);let n=document.createElement("div");n.classList.add("hit"),n.classList.add("animate"),e&&n.classList.add("ship"),t.target.appendChild(n)})(o,t.isShipPresentAt(o.target.dataset.row,o.target.dataset.col,"computer")),t.processUserInput(n,r),e.updateMsgOne(n,r,t.getPlayerTurnResult()),t.winCheckPlayer())return console.log("player wins"),void e.updateMsgTwo(0,0,"win");let a=t.processComputerAttack();e.markComputerAttack(a.row,a.col),console.log(`Your opponent fires at (${a.row}, ${a.col}) and ${t.getComputerTurnResult()}`),e.updateMsgTwo(a.row,a.col,t.getComputerTurnResult()),t.winCheckComputer()&&(console.log("computer wins"),e.updateMsgTwo(0,0,"loss"))};return{initiate:()=>{e.setUpView(t,n)},processUserInput:n,getShipGrid:()=>t.getShipGrid()}})().initiate()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,