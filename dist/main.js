(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>s});var o=n(537),r=n.n(o),i=n(645),a=n.n(i)()(r());a.push([e.id,'body {\n    background-color: lightgray;\n}\n\n.animate {\n    /* animation: 0.7s slide-in 0.7s 3 linear; */\n    animation-name: slide-in;\n    animation-duration: 0.3s;\n    animation-iteration-count: 3;\n}\n  \n@keyframes slide-in {\n    0% {\n        transform: scale(0.25);\n        transform: translateY(-1000px);\n    }\n    80%{\n        transform: scale(0.25);\n    }\n    100% {\n        transform: translateY(0);\n        transform: scale(1);\n    }\n}\n\nth, td{\n    margin: 0;\n    padding: 0;\n    height: 32px;\n    width: 32px;\n}\n\ntd {\n    border: 1px solid black;\n}\n\ndiv.hit, div.ship {\n    margin: 0;\n    padding: 0;\n    \n    height: 100%;\n    width: 100%;\n}\n\ndiv.ship {\n    background-color: blue;\n}\n\ndiv.hit {\n    background-color: red;\n}\n\ndiv.hit.ship {\n    border: 5px solid blue;\n}\n\ntd.ship {\n    background-color: blue;\n}\n\ntd.miss, td.hit {\n    background-color: red;\n}\n\ntd.hit {\n    border: 5px solid blue;\n    box-sizing: border-box;\n}\n\ntd.selected {\n    background-color: turquoise;\n}\n\n.tableContainer {\n    display: inline-grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 150px;\n}\n\n\nbutton {\n    height: 25px;\n    width: 80px;\n}\n\nbutton.start {\n    height:50px;\n}\n\n.buttonsContainer {\ndisplay: inline-grid;\ngrid-template-rows: 1fr 1fr;\ngrid-template-columns: 1fr 1fr 1fr 1fr 1fr;\ngrid-template-areas:\n    ". up . rotate start"\n    "left down right randomize  start"\n}\n\n.up {\ngrid-area: up;\n}\n\n.left {\ngrid-area: left;\n}\n\n.down {\ngrid-area: down;\n}\n\n.right {\ngrid-area: right;\n}\n\n.rotate {\ngrid-area: rotate;\n}\n\n.randomize {\ngrid-area: randomize;\n}\n\n.start {\ngrid-area: start;\n}',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,2BAA2B;AAC/B;;AAEA;IACI,4CAA4C;IAC5C,wBAAwB;IACxB,wBAAwB;IACxB,4BAA4B;AAChC;;AAEA;IACI;QACI,sBAAsB;QACtB,8BAA8B;IAClC;IACA;QACI,sBAAsB;IAC1B;IACA;QACI,wBAAwB;QACxB,mBAAmB;IACvB;AACJ;;AAEA;IACI,SAAS;IACT,UAAU;IACV,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,SAAS;IACT,UAAU;;IAEV,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,sBAAsB;IACtB,sBAAsB;AAC1B;;AAEA;IACI,2BAA2B;AAC/B;;AAEA;IACI,oBAAoB;IACpB,8BAA8B;IAC9B,UAAU;AACd;;;AAGA;IACI,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,WAAW;AACf;;AAEA;AACA,oBAAoB;AACpB,2BAA2B;AAC3B,0CAA0C;AAC1C;;;AAGA;;AAEA;AACA,aAAa;AACb;;AAEA;AACA,eAAe;AACf;;AAEA;AACA,eAAe;AACf;;AAEA;AACA,gBAAgB;AAChB;;AAEA;AACA,iBAAiB;AACjB;;AAEA;AACA,oBAAoB;AACpB;;AAEA;AACA,gBAAgB;AAChB",sourcesContent:['body {\n    background-color: lightgray;\n}\n\n.animate {\n    /* animation: 0.7s slide-in 0.7s 3 linear; */\n    animation-name: slide-in;\n    animation-duration: 0.3s;\n    animation-iteration-count: 3;\n}\n  \n@keyframes slide-in {\n    0% {\n        transform: scale(0.25);\n        transform: translateY(-1000px);\n    }\n    80%{\n        transform: scale(0.25);\n    }\n    100% {\n        transform: translateY(0);\n        transform: scale(1);\n    }\n}\n\nth, td{\n    margin: 0;\n    padding: 0;\n    height: 32px;\n    width: 32px;\n}\n\ntd {\n    border: 1px solid black;\n}\n\ndiv.hit, div.ship {\n    margin: 0;\n    padding: 0;\n    \n    height: 100%;\n    width: 100%;\n}\n\ndiv.ship {\n    background-color: blue;\n}\n\ndiv.hit {\n    background-color: red;\n}\n\ndiv.hit.ship {\n    border: 5px solid blue;\n}\n\ntd.ship {\n    background-color: blue;\n}\n\ntd.miss, td.hit {\n    background-color: red;\n}\n\ntd.hit {\n    border: 5px solid blue;\n    box-sizing: border-box;\n}\n\ntd.selected {\n    background-color: turquoise;\n}\n\n.tableContainer {\n    display: inline-grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 150px;\n}\n\n\nbutton {\n    height: 25px;\n    width: 80px;\n}\n\nbutton.start {\n    height:50px;\n}\n\n.buttonsContainer {\ndisplay: inline-grid;\ngrid-template-rows: 1fr 1fr;\ngrid-template-columns: 1fr 1fr 1fr 1fr 1fr;\ngrid-template-areas:\n    ". up . rotate start"\n    "left down right randomize  start"\n}\n\n.up {\ngrid-area: up;\n}\n\n.left {\ngrid-area: left;\n}\n\n.down {\ngrid-area: down;\n}\n\n.right {\ngrid-area: right;\n}\n\n.rotate {\ngrid-area: rotate;\n}\n\n.randomize {\ngrid-area: randomize;\n}\n\n.start {\ngrid-area: start;\n}'],sourceRoot:""}]);const s=a},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(o)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);o&&a[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),r&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=r):u[4]="".concat(r)),t.push(u))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var i={},a=[],s=0;s<e.length;s++){var l=e[s],c=o.base?l[0]+o.base:l[0],u=i[c]||0,d="".concat(c," ").concat(u);i[c]=u+1;var A=n(d),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==A)t[A].references++,t[A].updater(p);else{var h=r(p,o);o.byIndex=s,t.splice(s,0,{identifier:d,updater:h,references:1})}a.push(d)}return a}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var i=o(e=e||[],r=r||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var s=n(i[a]);t[s].references--}for(var l=o(e,r),c=0;c<i.length;c++){var u=n(i[c]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}i=l}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={id:o,exports:{}};return e[o](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{const e=(e,t)=>{for(let n=0;n<10;n++)for(let o=0;o<10;o++)e[n][o]&&t.children[n+1].children[o+1].classList.add("ship")},t=()=>{let t,n,o,r,i,a,s,l;const c=()=>{for(let e=0;e<10;e++)for(let t=0;t<10;t++)g(e,t).classList.remove("selected")},u=e=>{a.onchange=t=>{c();let n=a.value,o=e.getShipLocation(n);for(let e of o){console.log("coords:"),console.log(e);let t=g(e.row,e.col);console.log("myTD"),console.log(t),t.classList.add("selected")}}},d=e=>{for(let t=0;t<10;t++)for(let o=0;o<10;o++)n.children[t+1].children[o+1].onclick=n=>{e(t,o,n)}},A=()=>{if(!l.getPossibleMove())return void console.log("no move exectued- exiting out of update ship view");let e=l.getLocationChange();for(let t of e.oldLocations){let e=g(t.row,t.col);e.classList.remove("ship"),e.classList.remove("selected")}for(let t of e.newLocations){let e=g(t.row,t.col);e.classList.add("ship"),e.classList.add("selected")}},p=()=>{let e=l.getErrorMsg();console.log(e),o.textContent="outOfBounds"===e?"Cannot move ships out of bounds.":"spaceViolation"===e?"Cannot move ships to close. A minimum of one empty space between ships is required.":""},h=(n,o)=>{document.querySelector("#content"),((n,o,r)=>{e(o.getShipGrid(),t)})(0,n)},g=(e,n)=>t.children[e+1].children[n+1];return{setUp:(f,m)=>{t=document.querySelector(".shipGrid"),n=document.querySelector(".attackGrid"),o=document.querySelector(".errorText"),r=document.querySelector(".msgOne"),i=document.querySelector(".msgTwo"),a=document.querySelector("#ship-selector"),s={},s.up=document.querySelector(".up"),s.left=document.querySelector(".left"),s.down=document.querySelector(".down"),s.right=document.querySelector(".right"),s.rotate=document.querySelector(".rotate"),s.randomize=document.querySelector(".randomize"),s.start=document.querySelector(".start"),u(),(e=>{l=e})(f),((n,o)=>{s.start.onclick=()=>{d(n),s.up.disabled=!0,s.left.disabled=!0,s.down.disabled=!0,s.right.disabled=!0,s.rotate.disabled=!0,s.randomize.disabled=!0,s.start.disabled=!0,a.disabled=!0,c()},s.randomize.onclick=()=>{l.randomizePlayerBoard(),(()=>{for(let e=0;e<10;e++)for(let t=0;t<10;t++){let n=g(e,t);n.classList.remove("ship"),n.classList.remove("selected")}})(),a.value="none",e(l.getShipGrid(),t)},u(o)})(m,f.getShipGridWrapper()),s.up.onclick=()=>{l.moveShip(a.value,"up"),A(),p()},s.down.onclick=()=>{l.moveShip(a.value,"down"),A(),p()},s.right.onclick=()=>{l.moveShip(a.value,"right"),A(),p()},s.left.onclick=()=>{l.moveShip(a.value,"left"),A(),p()},s.rotate.onclick=()=>{l.rotateShip(a.value),A(),p()},h(f)},setUpView:h,markComputerAttack:(e,t)=>{let n=g(e,t);l.isShipPresentAt(e,t,"player")?n.classList.add("hit"):n.classList.add("miss"),n.classList.add("animate")},updateMsgOne:(e,t,n)=>{let o;"miss"===n?o=`You fire at (${e}, ${t}) but hit nothing.`:"hit"===n?o=`You fire at (${e}, ${t}) and score a hit.`:"sunk"===n?o=`You fire at (${e}, ${t}), score a hit, and sink a ship.`:"loss"===n&&(o="Your opponent has sunk all your ships. You lose the match."),r.textContent=o},updateMsgTwo:(e,t,n)=>{let o;"miss"===n?o=`Your opponent fires at (${e}, ${t}) but hits nothing.`:"hit"===n?o=`Your opponent fires at (${e}, ${t}) and scores a hit.`:"sunk"===n?o=`Your opponent fires at (${e}, ${t}), scores a hit, and sinks a ship.`:"win"===n&&(o="You have sunk all your opponent's ships and won!"),i.textContent=o},updateShipView:A,lockoutAttackGrid:()=>{for(let e=0;e<10;e++){let t=n.children[e+1];for(let e=0;e<10;e++)t.children[e+1].onclick=null}},makeAttackGridClickable:d}},o=(e,t="noID",n="south")=>{const o=t,r=e;let i=n,a=0,s=!1;return{getHitsSustained:()=>a,hit:()=>{a++,a===r&&(s=!0)},setDirection:e=>{i=e},isSunk:()=>s,getLength:()=>r,getDirection:()=>i,getID:()=>o}},r=()=>{const e=Array(10).fill().map((()=>Array(10).fill(null))),t=[],n={},r=((e,t,n)=>{let o=e,r=t,i=n,a="none",s={},l=!1;const c=(e,t)=>e<0||e>=10||t<0||t>=10,u=e=>{for(let t of e)if(c(t.row,t.col))return!0;return!1},d=()=>{s={}},A=(e,t,n)=>!c(e,t)&&null!==o[e][t]&&void 0!==o[e][t]&&o[e][t].getID()!==n,p=(e,t)=>{for(let n of t){let t=n.row,o=n.col;if(A(t-1,o+1,e))return!0;if(A(t,o+1,e))return!0;if(A(t+1,o+1,e))return!0;if(A(t+1,o,e))return!0;if(A(t+1,o-1,e))return!0;if(A(t,o-1,e))return!0;if(A(t-1,o-1,e))return!0;if(A(t-1,o,e))return!0}return!1},h=(e,t)=>{for(let e of t)o[e.row][e.col]=null;r[e]=[]},g=(e,t)=>{for(let n of t)o[n.row][n.col]=i[e-1],r[e].push(structuredClone(n))};return{moveShip:(e,t)=>{let n=structuredClone(r[e]),o=structuredClone(((e,t)=>{let n=[],o=0,r=0;switch(t){case"up":o=-1;break;case"down":o=1;break;case"left":r=-1;break;case"right":r=1}for(let t of e){let e=t.row+o,i=t.col+r;n.push({row:e,col:i})}return n})(n,t));return u(o)?(a="outOfBounds",d(),void(l=!1)):p(e,o)?(a="spaceViolation",d(),void(l=!1)):(a="",l=!0,s={oldLocations:n,newLocations:o},h(e,n),void g(e,o))},rotateShip:e=>{let t=i[e-1],n="south"===t.getDirection()?"east":"south",o=r[e],c=((e,t)=>{let n=e[0],o=[],r=0,i=0,a=n.row,s=n.col;switch(t){case"south":r=1;break;case"east":i=1}o.push({row:a,col:s});for(let t=1;t<e.length;t++)a+=r,s+=i,o.push({row:a,col:s});return o})(o,n);return u(c)?(a="outOfBounds",d(),void(l=!1)):p(e,c)?(a="spaceViolation",d(),void(l=!1)):(a="",l=!0,s={oldLocations:o,newLocations:c},t.setDirection(n),h(e,o),void g(e,c))},getError:()=>a,getPossibleMove:()=>l,getLocationChange:()=>s,hasSpaceConflict:(e,t,n)=>(e=>{for(let t of e)if(!c(t.row,t.col)&&null!==o[t.row][t.col]&&void 0!==o[t.row][t.col])return console.log("conflict "),console.log(o[t.row][t.col]),console.log(o[t.row][t.col].getID()),console.log(t),!0})(((e,t,n)=>{let o=[],r=e.getDirection(),i=e.getLength();if("south"===r){o.push({row:t-1,col:n}),o.push({row:t-1,col:n-1}),o.push({row:t-1,col:n+1});for(let e=0;e<i;e++)o.push({row:t+e,col:n-1}),o.push({row:t+e,col:n+1});o.push({row:t+i,col:n}),o.push({row:t+i,col:n-1}),o.push({row:t+i,col:n+1})}else{o.push({row:t,col:n-1}),o.push({row:t+1,col:n-1}),o.push({row:t-1,col:n-1});for(let e=0;e<i;e++)o.push({row:t-1,col:n+e}),o.push({row:t+1,col:n+e});o.push({row:t,col:n+i}),o.push({row:t-1,col:n+i}),o.push({row:t+1,col:n+i})}return console.log("surroundsing of ship "+e.getID()),console.log(o),o})(e,t,n)),printGrid:()=>{for(let e=0;e<10;e++){let t=e+": ";for(let n=0;n<10;n++)o[e][n]?t+=o[e][n].getID():t+="_",t+=" ";console.log(t)}}}})(e,n,t);let i="";const a=(e,t)=>e>=0&&e<10&&t>=0&&t<10,s=(t,n,o)=>{let r="south"===t.getDirection()?1:0,i="east"===t.getDirection()?1:0;for(let s=0;s<t.getLength();s++){if(!a(n,o))return!1;if(null!=e[n][o])return!1;n+=r,o+=i}return!0},l=(t,o,i)=>{if(!s(t,o,i))throw r.printGrid(e),console.log(`Direction: ${t.getDirection()}`),new Error(`Failed to place ship ${t.getID()} at row: ${o}, col: ${i}`);n[t.getID()]=[];let a="south"===t.getDirection()?1:0,l="east"===t.getDirection()?1:0;for(let r=0;r<t.getLength();r++)e[o][i]=t,n[t.getID()].push({row:o,col:i}),o+=a,i+=l},c=e=>Math.floor(Math.random()*e);return{placeShip:l,getShipLocation:e=>n[e],receiveAttack:(t,n)=>{i="",e[t][n]?(e[t][n].hit(),i="hit",e[t][n].isSunk()&&(i="sunk")):i="miss"},getOutcome:()=>i,isDefeated:()=>{for(let e of t)if(!e.isSunk())return!1;return!0},initDefaultShips:()=>{(()=>{let e=o(4,"1","east"),n=o(2,"2","south"),r=o(2,"3","east"),i=o(3,"4","south"),a=o(1,"5","south"),s=o(3,"6","south"),l=o(2,"7","east"),c=o(1,"8"),u=o(1,"9"),d=o(1,"10");t.push(e),t.push(n),t.push(r),t.push(i),t.push(a),t.push(s),t.push(l),t.push(c),t.push(u),t.push(d)})(),l(t[0],0,4),l(t[1],0,9),l(t[2],2,0),l(t[3],3,4),l(t[4],3,6),l(t[5],4,9),l(t[6],5,0),l(t[7],8,0),l(t[8],9,5),l(t[9],9,9)},randomize:()=>{(()=>{for(let t=0;t<10;t++)for(let n=0;n<10;n++)e[t][n]=null})(),(()=>{for(let e in n)delete n[e]})();for(let e of t){let t,n,o;do{t=c(10),n=c(10),o=0===c(2)?"south":"east",e.setDirection(o)}while(!s(e,t,n)||r.hasSpaceConflict(e,t,n));l(e,t,n)}console.log("reached"),r.printGrid(e)},getShipGrid:()=>e,getShipArr:()=>t,getShipLocations:()=>n,isShipPresentAt:(t,n)=>null!=e[t][n],moveShip:(e,t)=>{r.moveShip(e,t)},rotateShip:e=>{r.rotateShip(e)},getLocationChange:()=>r.getLocationChange(),getErrorMsg:()=>r.getError(),getPossibleMove:()=>r.getPossibleMove(),printGrid:()=>{r.printGrid()}}},i=()=>{const e=Array(10).fill().map((()=>Array(10).fill(null)));return{isValidAttack:(t,n)=>((e,t)=>e>=0&&e<10&&t>=0&&t<10)(t,n)&&null===e[t][n],recordAttack:(t,n)=>{e[t][n]="hit"}}};var a=n(379),s=n.n(a),l=n(795),c=n.n(l),u=n(569),d=n.n(u),A=n(565),p=n.n(A),h=n(216),g=n.n(h),f=n(589),m=n.n(f),C=n(426),v={};v.styleTagTransform=m(),v.setAttributes=p(),v.insert=d().bind(null,"head"),v.domAPI=c(),v.insertStyleElement=g(),s()(C.Z,v),C.Z&&C.Z.locals&&C.Z.locals,(()=>{let e=(()=>{const e=r(),t=r(),n=i(),o=i();let a="",s="";e.initDefaultShips(),t.initDefaultShips(),t.randomize();const l=(e=>{let t=()=>Math.floor(10*Math.random());return{pickTargetSimple:()=>{let n=t(),o=t();for(;!e.isValidAttack(n,o);)console.log(`(${n}, ${o}) is invalid. Rerolling`),n=t(),o=t();return console.log(`AI final target (${n}, ${o})`),{row:n,col:o}}}})(o);return{getShipGrid:()=>e.getShipGrid(),getShipGridWrapper:()=>e,processUserInput:(e,o)=>{n.isValidAttack(e,o)&&(t.receiveAttack(e,o),a=t.getOutcome(),n.recordAttack(e,o))},isAttackableByPlayer:(e,t)=>n.isValidAttack(e,t),winCheckPlayer:()=>t.isDefeated(),winCheckComputer:()=>e.isDefeated(),isShipPresentAt:(n,o,r)=>("computer"===r?t:e).isShipPresentAt(n,o),processComputerAttack:()=>{let t=l.pickTargetSimple();if(o.isValidAttack(t.row,t.col))return e.receiveAttack(t.row,t.col),s=e.getOutcome(),o.recordAttack(t.row,t.col),t;console.log("game master: processComputerAttackError")},getPlayerTurnResult:()=>a,getComputerTurnResult:()=>s,moveShip:(t,n)=>{e.moveShip(t,n)},rotateShip:(t,n)=>{e.rotateShip(t)},getLocationChange:()=>e.getLocationChange(),getErrorMsg:()=>e.getErrorMsg(),getPossibleMove:()=>e.getPossibleMove(),randomizePlayerBoard:()=>{e.randomize()},randomizeComputerBoard:()=>{t.randomize()}}})(),n=t();const o=(t,r,i)=>{if(!e.isAttackableByPlayer(t,r))return;if(n.lockoutAttackGrid(),((e,t)=>{console.log(e.target);let n=e.target;n.classList.add("animate"),t?n.classList.add("hit"):n.classList.add("miss")})(i,e.isShipPresentAt(i.target.dataset.row,i.target.dataset.col,"computer")),e.processUserInput(t,r),n.updateMsgOne(t,r,e.getPlayerTurnResult()),e.winCheckPlayer())return console.log("player wins"),void n.updateMsgTwo(0,0,"win");let a=e.processComputerAttack();setTimeout((()=>{n.markComputerAttack(a.row,a.col),n.makeAttackGridClickable(o)}),3e3),console.log(`Your opponent fires at (${a.row}, ${a.col}) and ${e.getComputerTurnResult()}`),n.updateMsgTwo(a.row,a.col,e.getComputerTurnResult()),e.winCheckComputer()&&(console.log("computer wins"),n.updateMsgTwo(0,0,"loss"))};return{initiate:()=>{n.setUp(e,o)},processUserInput:o,getShipGrid:()=>e.getShipGrid()}})().initiate()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,