(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>c});var r=n(537),a=n.n(r),o=n(645),i=n.n(o)()(a());i.push([e.id,"body {\n    background-color: lightgray;\n}\n\n.animate {\n    animation: slide-in 0.7s both;\n}\n  \n@keyframes slide-in {\n    0% {\n        transform: translateY(-1000px);\n    }\n    100% {\n        transform: translateY(0);\n    }\n}\n\ndiv, td, tr {\n    margin: 0;\n    padding: 0;\n    border: solid black 1px;\n    max-height: 32px;\n    min-height: 32px;\n}\n\ndiv, td {\n    max-width: 32px;\n    min-width: 32px;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,2BAA2B;AAC/B;;AAEA;IACI,6BAA6B;AACjC;;AAEA;IACI;QACI,8BAA8B;IAClC;IACA;QACI,wBAAwB;IAC5B;AACJ;;AAEA;IACI,SAAS;IACT,UAAU;IACV,uBAAuB;IACvB,gBAAgB;IAChB,gBAAgB;AACpB;;AAEA;IACI,eAAe;IACf,eAAe;AACnB",sourcesContent:["body {\n    background-color: lightgray;\n}\n\n.animate {\n    animation: slide-in 0.7s both;\n}\n  \n@keyframes slide-in {\n    0% {\n        transform: translateY(-1000px);\n    }\n    100% {\n        transform: translateY(0);\n    }\n}\n\ndiv, td, tr {\n    margin: 0;\n    padding: 0;\n    border: solid black 1px;\n    max-height: 32px;\n    min-height: 32px;\n}\n\ndiv, td {\n    max-width: 32px;\n    min-width: 32px;\n}"],sourceRoot:""}]);const c=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var s=this[c][0];null!=s&&(i[s]=!0)}for(var l=0;l<e.length;l++){var d=[].concat(e[l]);r&&i[d[0]]||(void 0!==o&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=o),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),a&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=a):d[4]="".concat(a)),t.push(d))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},i=[],c=0;c<e.length;c++){var s=e[c],l=r.base?s[0]+r.base:s[0],d=o[l]||0,p="".concat(l," ").concat(d);o[l]=d+1;var u=n(p),h={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==u)t[u].references++,t[u].updater(h);else{var f=a(h,r);r.byIndex=c,t.splice(c,0,{identifier:p,updater:f,references:1})}i.push(p)}return i}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var c=n(o[i]);t[c].references--}for(var s=r(e,a),l=0;l<o.length;l++){var d=n(o[l]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}o=s}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={id:r,exports:{}};return e[r](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0;var r={};(()=>{n.d(r,{OY:()=>E,Ps:()=>w});const e=document.querySelector("#content"),t=document.createElement("head"),a=document.createElement("main"),o=document.createElement("footer");e.appendChild(t),e.appendChild(a),e.appendChild(o);const i=(e,t)=>{let n=document.createElement("td");return n.classList.add("playerGrid"),n.dataset.row=e,n.dataset.col=t,n},c=e=>{let t=document.createElement("th");return t.textContent=e,t},s=e=>{let t=document.createElement("tr");t.dataset.row=e,t.appendChild(c(e));for(let n=0;n<10;n++)t.appendChild(i(e,n));return t},l=()=>{const e=document.createElement("table");e.appendChild((()=>{let e=document.createElement("tr");return e.appendChild(c("&nbsp;")),e.appendChild(c("A")),e.appendChild(c("B")),e.appendChild(c("C")),e.appendChild(c("D")),e.appendChild(c("E")),e.appendChild(c("F")),e.appendChild(c("G")),e.appendChild(c("H")),e.appendChild(c("I")),e.appendChild(c("J")),e})());for(let t=0;t<10;t++)e.appendChild(s(t));return e},d=()=>{let e;return{setUpView:(t,n)=>{const r=document.querySelector("#content");e=l(),r.appendChild(e),((e,t)=>{for(let n=0;n<10;n++)for(let r=0;r<10;r++)if(e[n][r]){let e=t.children[n+1].children[r+1],a=document.createElement("div");a.classList.add("ship"),a.textContent="s",e.appendChild(a)}})(t.getShipGrid(),e),r.appendChild((e=>{let t=l();for(let n=0;n<10;n++)for(let r=0;r<10;r++)t.children[n+1].children[r+1].onclick=t=>{e(n,r,t)};return t})(n))},markComputerAttack:(t,n)=>{let r=((t,n)=>e.children[t+1].children[n+1])(t,n);r.textContent="pch"}}};var p=n(379),u=n.n(p),h=n(795),f=n.n(h),m=n(569),A=n.n(m),g=n(565),C=n.n(g),v=n(216),y=n.n(v),k=n(589),x=n.n(k),b=n(426),I={};I.styleTagTransform=x(),I.setAttributes=C(),I.insert=A().bind(null,"head"),I.domAPI=f(),I.insertStyleElement=y(),u()(b.Z,I),b.Z&&b.Z.locals&&b.Z.locals;const S=(e,t="noID",n="south")=>{const r=t,a=e,o=n;let i=0,c=!1;return{getHitsSustained:()=>i,hit:()=>{i++,i===a&&(c=!0)},isSunk:()=>c,getLength:()=>a,getDirection:()=>o,getID:()=>r}},w=()=>{const e=Array(10).fill().map((()=>Array(10).fill(null))),t=Array(10).fill().map((()=>Array(10).fill(null))),n=[],r=(e,t)=>e>=0&&e<10&&t>=0&&t<10,a=(t,a,o)=>{if(!((t,n,a)=>{let o="south"===t.getDirection()?1:0,i="east"===t.getDirection()?1:0;for(let c=0;c<t.getLength();c++){if(!r(n,a))return!1;if(null!=e[n][a])return!1;n+=o,a+=i}return!0})(t,a,o))throw new Error(`Failed to place ship ${t.getID()} at row: ${a}, col: ${o}`);n.push(t);let i="south"===t.getDirection()?1:0,c="east"===t.getDirection()?1:0;for(let n=0;n<t.getLength();n++)e[a][o]=t,a+=i,o+=c},o=(e,n)=>r(e,n)&&null===t[e][n];return{placeShip:a,receiveAttack:(n,r)=>{t[n][r]="hit",e[n][r]&&e[n][r].hit()},isValidAttack:o,isDefeated:()=>{for(let e of n)if(!e.isSunk())return!1;return!0},initDefaultShips:()=>{let e=S(4,"a","east");a(e,0,4),n.push(e);let t=S(2,"b","south");a(t,0,9),n.push(t);let r=S(2,"c","east");a(r,2,0),n.push(r);let o=S(3,"d","south");a(o,3,4),n.push(o);let i=S(1,"e","south");a(i,3,6),n.push(i);let c=S(3,"f","south");a(c,4,9),n.push(c);let s=S(2,"g","east");a(s,5,0),n.push(s);let l=S(1,"h");a(l,8,0),n.push(l);let d=S(1,"i");a(d,9,5),n.push(d);let p=S(1,"j");a(p,9,9),n.push(p)},getShipGrid:()=>e,isSuccessfulAttack:(t,n)=>o(t,n)&&null!=e[t][n]}},E=e=>{let t=()=>Math.floor(10*Math.random());return{pickTargetSimple:()=>{let n=t(),r=t();for(;!e.isValidAttack(n,r);)n=t(),r=t();return{row:n,col:r}}}};(()=>{let e=(()=>{const e=w(),t=w();e.initDefaultShips(),t.initDefaultShips();const n=E(t);return{getShipGrid:()=>e.getShipGrid(),processUserInput:(e,n)=>{console.log(`Valid player attack (${e}, ${n}): ${t.isValidAttack(e,n)}`),t.isValidAttack(e,n)&&t.receiveAttack(e,n)},isValidAttack:(e,n)=>t.isValidAttack(e,n),winCheckPlayer:()=>t.isDefeated(),winCheckComputer:()=>e.isDefeated(),isSuccessfulAttack:(n,r,a)=>("computer"===a?t:e).isSuccessfulAttack(n,r),processComputerAttack:()=>{let t=n.pickTargetSimple();if(console.log(`Valid computer attack (${t.row}, ${t.col}): ${e.isValidAttack(t.row,t.col)}`),e.isValidAttack(t.row,t.col))return e.receiveAttack(t.row,t.col),t;console.log("game master: processComputerAttackError")}}})(),t=d();const n=(n,r,a)=>{if(!e.isValidAttack(n,r))return;(e=>{console.log(e.target);let t=document.createElement("div");t.classList.add("hit"),t.classList.add("animate"),t.textContent="hit",e.target.appendChild(t)})(a),e.isSuccessfulAttack(n,r,"computer")&&console.log("SCUCESS"),e.processUserInput(n,r),e.winCheckPlayer()&&console.log("player wins");let o=e.processComputerAttack();console.log(o),t.markComputerAttack(o.row,o.col)};return{initiate:()=>{t.setUpView(e,n)},processUserInput:n,getShipGrid:()=>e.getShipGrid()}})().initiate()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,