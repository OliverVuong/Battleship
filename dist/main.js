(()=>{"use strict";const e=document.querySelector("#content"),t=document.createElement("head"),l=document.createElement("main"),i=document.createElement("footer");e.appendChild(t),e.appendChild(l),e.appendChild(i);const n=(e,t)=>{let l=document.createElement("td");return l.classList.add("playerGrid"),l.dataset.row=e,l.dataset.col=t,l},r=e=>{let t=document.createElement("th");return t.textContent=e,t},a=e=>{let t=document.createElement("tr");t.dataset.row=e,t.appendChild(r(e));for(let l=0;l<10;l++)t.appendChild(n(e,l));return t},d=()=>{const e=document.createElement("table");e.appendChild((()=>{let e=document.createElement("tr");return e.appendChild(r("&nbsp;")),e.appendChild(r("A")),e.appendChild(r("B")),e.appendChild(r("C")),e.appendChild(r("D")),e.appendChild(r("E")),e.appendChild(r("F")),e.appendChild(r("G")),e.appendChild(r("H")),e.appendChild(r("I")),e.appendChild(r("J")),e})());for(let t=0;t<10;t++)e.appendChild(a(t));return e},o=(e,t="noID",l="south")=>{const i=t,n=e,r=l;let a=0,d=!1;return{getHitsSustained:()=>a,hit:()=>{console.log("HIT"),a++,a===n&&(d=!0,console.log("SUNK"))},isSunk:()=>d,getLength:()=>n,getDirection:()=>r,getID:()=>i}},c=()=>{const e=Array(10).fill().map((()=>Array(10).fill(null))),t=Array(10).fill().map((()=>Array(10).fill(null))),l=[],i=(e,t)=>e>=0&&e<10&&t>=0&&t<10,n=(t,n,r)=>{if(!((t,l,n)=>{let r="south"===t.getDirection()?1:0,a="east"===t.getDirection()?1:0;for(let d=0;d<t.getLength();d++){if(!i(l,n))return!1;if(null!=e[l][n])return!1;l+=r,n+=a}return!0})(t,n,r))throw new Error(`Failed to place ship ${t.getID()} at row: ${n}, col: ${r}`);l.push(t);let a="south"===t.getDirection()?1:0,d="east"===t.getDirection()?1:0;for(let l=0;l<t.getLength();l++)e[n][r]=t,n+=a,r+=d};return{placeShip:n,receiveAttack:(l,i)=>{t[l][i]="hit",e[l][i]&&e[l][i].hit()},isValidAttack:(e,l)=>i(e,l)&&null===t[e][l],isDefeated:()=>{for(let e of l)if(!e.isSunk())return!1;return!0},initDefaultShips:()=>{let e=o(4,"a","east");n(e,0,4),l.push(e);let t=o(2,"b","south");n(t,0,9),l.push(t);let i=o(2,"c","east");n(i,2,0),l.push(i);let r=o(3,"d","south");n(r,3,4),l.push(r);let a=o(1,"e","south");n(a,3,6),l.push(a);let d=o(3,"f","south");n(d,4,9),l.push(d);let c=o(2,"g","east");n(c,5,0),l.push(c);let p=o(1,"h");n(p,8,0),l.push(p);let s=o(1,"i");n(s,9,5),l.push(s);let h=o(1,"j");n(h,9,9),l.push(h)},getShipGrid:()=>e}};(()=>{let e=(()=>{const e=c(),t=c();e.initDefaultShips(),t.initDefaultShips();const l=(e=>{let t=()=>Math.floor(10*Math.random());return{pickTargetSimple:()=>{let l=t(),i=t();for(;!e.isValidAttack(l,i);)l=t(),i=t();return{row:l,col:i}}}})(t);let i;return{runGameLoop:()=>{for(;i=getPlayerAttackCoordinates(),t.receiveAttack(i.row,i.col),!t.isDefeated()&&(i=l.pickTargetSimple(),e.receiveAttack(i.row,i.col),!e.isDefeated()););},getShipGrid:()=>e.getShipGrid(),processUserInput:(e,l)=>{console.log(`Valid attack (${e}, ${l}): ${t.isValidAttack(e,l)}`),t.isValidAttack(e,l)&&t.receiveAttack(e,l)},isValidAttack:(e,l)=>t.isValidAttack(e,l)}})();const t=(t,l,i)=>{e.isValidAttack(t,l)&&(e=>{console.log(e.target);let t=document.createElement("div");t.classList.add("hit"),t.textContent="hit",e.target.appendChild(t)})(i),e.processUserInput(t,l)};return{initiate:()=>{((e,t)=>{const l=document.querySelector("#content");let i=d();l.appendChild(i),((e,t)=>{for(let l=0;l<10;l++)for(let i=0;i<10;i++)if(e[l][i]){let e=t.children[l+1].children[i+1],n=document.createElement("div");n.classList.add("ship"),n.textContent="s",e.appendChild(n)}})(e.getShipGrid(),i),l.appendChild((e=>{let t=d();for(let l=0;l<10;l++)for(let i=0;i<10;i++)t.children[l+1].children[i+1].onclick=t=>{e(l,i,t)};return t})(t))})(e,t)},processUserInput:t,getShipGrid:()=>e.getShipGrid()}})().initiate()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,