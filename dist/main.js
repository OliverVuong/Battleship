(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>s});var o=n(537),r=n.n(o),i=n(645),a=n.n(i)()(r());a.push([e.id,'body {\n    background-color: lightgray;\n}\n\n.animate {\n    /* animation: 0.7s slide-in 0.7s 3 linear; */\n    animation-name: slide-in;\n    animation-duration: 0.3s;\n    animation-iteration-count: 3;\n}\n  \n@keyframes slide-in {\n    0% {\n        transform: scale(0.25);\n        transform: translateY(-1000px);\n    }\n    80%{\n        transform: scale(0.25);\n    }\n    100% {\n        transform: translateY(0);\n        transform: scale(1);\n    }\n}\n\nth, td{\n    margin: 0;\n    padding: 0;\n    height: 32px;\n    width: 32px;\n}\n\ntd {\n    border: 1px solid black;\n}\n\ndiv.hit, div.ship {\n    margin: 0;\n    padding: 0;\n    \n    height: 100%;\n    width: 100%;\n}\n\ndiv.ship {\n    background-color: blue;\n}\n\ndiv.hit {\n    background-color: red;\n}\n\ndiv.hit.ship {\n    border: 5px solid blue;\n}\n\ntd.ship {\n    background-color: blue;\n}\n\ntd.miss, td.hit {\n    background-color: red;\n}\n\ntd.hit {\n    border: 5px solid blue;\n    box-sizing: border-box;\n}\n\ntd.selected {\n    background-color: turquoise;\n}\n\n.tableContainer {\n    display: inline-grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 150px;\n}\n\n\nbutton {\n    height: 25px;\n    width: 80px;\n}\n\nbutton.start {\n    height:50px;\n}\n\n.buttonsContainer {\ndisplay: inline-grid;\ngrid-template-rows: 1fr 1fr;\ngrid-template-columns: 1fr 1fr 1fr 1fr 1fr;\ngrid-template-areas:\n    ". up . rotate start"\n    "left down right randomize  start"\n}\n\n.up {\ngrid-area: up;\n}\n\n.left {\ngrid-area: left;\n}\n\n.down {\ngrid-area: down;\n}\n\n.right {\ngrid-area: right;\n}\n\n.rotate {\ngrid-area: rotate;\n}\n\n.randomize {\ngrid-area: randomize;\n}\n\n.start {\ngrid-area: start;\n}\n\n.rightContainer {\n    visibility: hidden;\n}\n\n.errorContainer {\n    visibility: hidden;\n}\n\n.errorText {\n    width: fit-content;\n    padding: 5px 2px;\n    border: 1px solid red;\n}',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,2BAA2B;AAC/B;;AAEA;IACI,4CAA4C;IAC5C,wBAAwB;IACxB,wBAAwB;IACxB,4BAA4B;AAChC;;AAEA;IACI;QACI,sBAAsB;QACtB,8BAA8B;IAClC;IACA;QACI,sBAAsB;IAC1B;IACA;QACI,wBAAwB;QACxB,mBAAmB;IACvB;AACJ;;AAEA;IACI,SAAS;IACT,UAAU;IACV,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,SAAS;IACT,UAAU;;IAEV,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,sBAAsB;IACtB,sBAAsB;AAC1B;;AAEA;IACI,2BAA2B;AAC/B;;AAEA;IACI,oBAAoB;IACpB,8BAA8B;IAC9B,UAAU;AACd;;;AAGA;IACI,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,WAAW;AACf;;AAEA;AACA,oBAAoB;AACpB,2BAA2B;AAC3B,0CAA0C;AAC1C;;;AAGA;;AAEA;AACA,aAAa;AACb;;AAEA;AACA,eAAe;AACf;;AAEA;AACA,eAAe;AACf;;AAEA;AACA,gBAAgB;AAChB;;AAEA;AACA,iBAAiB;AACjB;;AAEA;AACA,oBAAoB;AACpB;;AAEA;AACA,gBAAgB;AAChB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;IAClB,gBAAgB;IAChB,qBAAqB;AACzB",sourcesContent:['body {\n    background-color: lightgray;\n}\n\n.animate {\n    /* animation: 0.7s slide-in 0.7s 3 linear; */\n    animation-name: slide-in;\n    animation-duration: 0.3s;\n    animation-iteration-count: 3;\n}\n  \n@keyframes slide-in {\n    0% {\n        transform: scale(0.25);\n        transform: translateY(-1000px);\n    }\n    80%{\n        transform: scale(0.25);\n    }\n    100% {\n        transform: translateY(0);\n        transform: scale(1);\n    }\n}\n\nth, td{\n    margin: 0;\n    padding: 0;\n    height: 32px;\n    width: 32px;\n}\n\ntd {\n    border: 1px solid black;\n}\n\ndiv.hit, div.ship {\n    margin: 0;\n    padding: 0;\n    \n    height: 100%;\n    width: 100%;\n}\n\ndiv.ship {\n    background-color: blue;\n}\n\ndiv.hit {\n    background-color: red;\n}\n\ndiv.hit.ship {\n    border: 5px solid blue;\n}\n\ntd.ship {\n    background-color: blue;\n}\n\ntd.miss, td.hit {\n    background-color: red;\n}\n\ntd.hit {\n    border: 5px solid blue;\n    box-sizing: border-box;\n}\n\ntd.selected {\n    background-color: turquoise;\n}\n\n.tableContainer {\n    display: inline-grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 150px;\n}\n\n\nbutton {\n    height: 25px;\n    width: 80px;\n}\n\nbutton.start {\n    height:50px;\n}\n\n.buttonsContainer {\ndisplay: inline-grid;\ngrid-template-rows: 1fr 1fr;\ngrid-template-columns: 1fr 1fr 1fr 1fr 1fr;\ngrid-template-areas:\n    ". up . rotate start"\n    "left down right randomize  start"\n}\n\n.up {\ngrid-area: up;\n}\n\n.left {\ngrid-area: left;\n}\n\n.down {\ngrid-area: down;\n}\n\n.right {\ngrid-area: right;\n}\n\n.rotate {\ngrid-area: rotate;\n}\n\n.randomize {\ngrid-area: randomize;\n}\n\n.start {\ngrid-area: start;\n}\n\n.rightContainer {\n    visibility: hidden;\n}\n\n.errorContainer {\n    visibility: hidden;\n}\n\n.errorText {\n    width: fit-content;\n    padding: 5px 2px;\n    border: 1px solid red;\n}'],sourceRoot:""}]);const s=a},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",o=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),o&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),o&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,o,r,i){"string"==typeof e&&(e=[[null,e,void 0]]);var a={};if(o)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(a[l]=!0)}for(var c=0;c<e.length;c++){var d=[].concat(e[c]);o&&a[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),t.push(d))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,o=0;o<t.length;o++)if(t[o].identifier===e){n=o;break}return n}function o(e,o){for(var i={},a=[],s=0;s<e.length;s++){var l=e[s],c=o.base?l[0]+o.base:l[0],d=i[c]||0,u="".concat(c," ").concat(d);i[c]=d+1;var A=n(u),p={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==A)t[A].references++,t[A].updater(p);else{var h=r(p,o);o.byIndex=s,t.splice(s,0,{identifier:u,updater:h,references:1})}a.push(u)}return a}function r(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,r){var i=o(e=e||[],r=r||{});return function(e){e=e||[];for(var a=0;a<i.length;a++){var s=n(i[a]);t[s].references--}for(var l=o(e,r),c=0;c<i.length;c++){var d=n(i[c]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}i=l}}},569:e=>{var t={};e.exports=function(e,n){var o=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(o,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(o){var r=t[o];if(void 0!==r)return r.exports;var i=t[o]={id:o,exports:{}};return e[o](i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var o in t)n.o(t,o)&&!n.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{const e=(e,t)=>{for(let n=0;n<10;n++)for(let o=0;o<10;o++)e[n][o]&&t.children[n+1].children[o+1].classList.add("ship")},t=()=>{let t,n,o,r,i,a,s,l,c;const d=()=>{for(let e=0;e<10;e++)for(let t=0;t<10;t++)f(e,t).classList.remove("selected")},u=e=>{s.onchange=t=>{d();let n=s.value,o=e.getShipLocation(n);for(let e of o){console.log("coords:"),console.log(e);let t=f(e.row,e.col);console.log("myTD"),console.log(t),t.classList.add("selected")}}},A=e=>{for(let t=0;t<10;t++)for(let o=0;o<10;o++)n.children[t+1].children[o+1].onclick=n=>{e(t,o,n)}},p=()=>{if(!c.getPossibleMove())return void console.log("no move exectued- exiting out of update ship view");let e=c.getLocationChange();for(let t of e.oldLocations){let e=f(t.row,t.col);e.classList.remove("ship"),e.classList.remove("selected")}for(let t of e.newLocations){let e=f(t.row,t.col);e.classList.add("ship"),e.classList.add("selected")}},h=()=>{let e=c.getErrorMsg();console.log(e),"outOfBounds"===e?(r.textContent="Cannot move ships out of bounds.",o.style.visibility="visible"):"spaceViolation"===e?(r.textContent="Cannot move ships to close. A minimum of one empty space between ships is required.",o.style.visibility="visible"):(r.textContent="",o.style.visibility="hidden")},g=(n,o)=>{document.querySelector("#content"),((n,o,r)=>{e(o.getShipGrid(),t)})(0,n)},f=(e,n)=>t.children[e+1].children[n+1];return{setUp:(m,C)=>{t=document.querySelector(".shipGrid"),n=document.querySelector(".attackGrid"),r=document.querySelector(".errorText"),o=document.querySelector(".errorContainer"),i=document.querySelector(".msgOne"),a=document.querySelector(".msgTwo"),s=document.querySelector("#ship-selector"),l={},l.up=document.querySelector(".up"),l.left=document.querySelector(".left"),l.down=document.querySelector(".down"),l.right=document.querySelector(".right"),l.rotate=document.querySelector(".rotate"),l.randomize=document.querySelector(".randomize"),l.start=document.querySelector(".start"),u(),(e=>{c=e})(m),((n,o)=>{l.start.onclick=()=>{A(n),l.up.disabled=!0,l.left.disabled=!0,l.down.disabled=!0,l.right.disabled=!0,l.rotate.disabled=!0,l.randomize.disabled=!0,l.start.disabled=!0,s.disabled=!0,d(),document.querySelector(".rightContainer").style.visibility="visible",document.querySelector(".buttonContainer").style.visibility="hidden",i.textContent="Attack your opponent by clicking a cell on their grid."},l.randomize.onclick=()=>{c.randomizePlayerBoard(),(()=>{for(let e=0;e<10;e++)for(let t=0;t<10;t++){let n=f(e,t);n.classList.remove("ship"),n.classList.remove("selected")}})(),s.value="none",e(c.getShipGrid(),t)},u(o)})(C,m.getShipGridWrapper()),l.up.onclick=()=>{c.moveShip(s.value,"up"),p(),h()},l.down.onclick=()=>{c.moveShip(s.value,"down"),p(),h()},l.right.onclick=()=>{c.moveShip(s.value,"right"),p(),h()},l.left.onclick=()=>{c.moveShip(s.value,"left"),p(),h()},l.rotate.onclick=()=>{c.rotateShip(s.value),p(),h()},g(m)},setUpView:g,markComputerAttack:(e,t)=>{let n=f(e,t);c.isShipPresentAt(e,t,"player")?n.classList.add("hit"):n.classList.add("miss"),n.classList.add("animate")},updateMsgOne:(e,t,n)=>{let o;"miss"===n?o=`You fire at (${e}, ${t}) but hit nothing.`:"hit"===n?o=`You fire at (${e}, ${t}) and score a hit.`:"sunk"===n?o=`You fire at (${e}, ${t}), score a hit, and sink a ship.`:"loss"===n&&(o="Your opponent has sunk all your ships. You lose the match."),i.textContent=o},updateMsgTwo:(e,t,n)=>{let o;"miss"===n?o=`Your opponent fires at (${e}, ${t}) but hits nothing.`:"hit"===n?o=`Your opponent fires at (${e}, ${t}) and scores a hit.`:"sunk"===n?o=`Your opponent fires at (${e}, ${t}), scores a hit, and sinks a ship.`:"win"===n&&(o="You have sunk all your opponent's ships and won!"),a.textContent=o},updateShipView:p,lockoutAttackGrid:()=>{for(let e=0;e<10;e++){let t=n.children[e+1];for(let e=0;e<10;e++)t.children[e+1].onclick=null}},makeAttackGridClickable:A}},o=(e,t="noID",n="south")=>{const o=t,r=e;let i=n,a=0,s=!1;return{getHitsSustained:()=>a,hit:()=>{a++,a===r&&(s=!0)},setDirection:e=>{i=e},isSunk:()=>s,getLength:()=>r,getDirection:()=>i,getID:()=>o}},r=()=>{const e=Array(10).fill().map((()=>Array(10).fill(null))),t=[],n={},r=((e,t,n)=>{let o=e,r=t,i=n,a="none",s={},l=!1;const c=(e,t)=>e<0||e>=10||t<0||t>=10,d=e=>{for(let t of e)if(c(t.row,t.col))return!0;return!1},u=()=>{s={}},A=(e,t,n)=>!c(e,t)&&null!==o[e][t]&&void 0!==o[e][t]&&o[e][t].getID()!==n,p=(e,t)=>{for(let n of t){let t=n.row,o=n.col;if(A(t-1,o+1,e))return!0;if(A(t,o+1,e))return!0;if(A(t+1,o+1,e))return!0;if(A(t+1,o,e))return!0;if(A(t+1,o-1,e))return!0;if(A(t,o-1,e))return!0;if(A(t-1,o-1,e))return!0;if(A(t-1,o,e))return!0}return!1},h=(e,t)=>{for(let e of t)o[e.row][e.col]=null;r[e]=[]},g=(e,t)=>{for(let n of t)o[n.row][n.col]=i[e-1],r[e].push(structuredClone(n))};return{moveShip:(e,t)=>{let n=structuredClone(r[e]),o=structuredClone(((e,t)=>{let n=[],o=0,r=0;switch(t){case"up":o=-1;break;case"down":o=1;break;case"left":r=-1;break;case"right":r=1}for(let t of e){let e=t.row+o,i=t.col+r;n.push({row:e,col:i})}return n})(n,t));return d(o)?(a="outOfBounds",u(),void(l=!1)):p(e,o)?(a="spaceViolation",u(),void(l=!1)):(a="",l=!0,s={oldLocations:n,newLocations:o},h(e,n),void g(e,o))},rotateShip:e=>{let t=i[e-1],n="south"===t.getDirection()?"east":"south",o=r[e],c=((e,t)=>{let n=e[0],o=[],r=0,i=0,a=n.row,s=n.col;switch(t){case"south":r=1;break;case"east":i=1}o.push({row:a,col:s});for(let t=1;t<e.length;t++)a+=r,s+=i,o.push({row:a,col:s});return o})(o,n);return d(c)?(a="outOfBounds",u(),void(l=!1)):p(e,c)?(a="spaceViolation",u(),void(l=!1)):(a="",l=!0,s={oldLocations:o,newLocations:c},t.setDirection(n),h(e,o),void g(e,c))},getError:()=>a,getPossibleMove:()=>l,getLocationChange:()=>s,hasSpaceConflict:(e,t,n)=>(e=>{for(let t of e)if(!c(t.row,t.col)&&null!==o[t.row][t.col]&&void 0!==o[t.row][t.col])return console.log("conflict "),console.log(o[t.row][t.col]),console.log(o[t.row][t.col].getID()),console.log(t),!0})(((e,t,n)=>{let o=[],r=e.getDirection(),i=e.getLength();if("south"===r){o.push({row:t-1,col:n}),o.push({row:t-1,col:n-1}),o.push({row:t-1,col:n+1});for(let e=0;e<i;e++)o.push({row:t+e,col:n-1}),o.push({row:t+e,col:n+1});o.push({row:t+i,col:n}),o.push({row:t+i,col:n-1}),o.push({row:t+i,col:n+1})}else{o.push({row:t,col:n-1}),o.push({row:t+1,col:n-1}),o.push({row:t-1,col:n-1});for(let e=0;e<i;e++)o.push({row:t-1,col:n+e}),o.push({row:t+1,col:n+e});o.push({row:t,col:n+i}),o.push({row:t-1,col:n+i}),o.push({row:t+1,col:n+i})}return console.log("surroundsing of ship "+e.getID()),console.log(o),o})(e,t,n)),printGrid:()=>{for(let e=0;e<10;e++){let t=e+": ";for(let n=0;n<10;n++)o[e][n]?t+=o[e][n].getID():t+="_",t+=" ";console.log(t)}}}})(e,n,t);let i="";const a=(e,t)=>e>=0&&e<10&&t>=0&&t<10,s=(t,n,o)=>{let r="south"===t.getDirection()?1:0,i="east"===t.getDirection()?1:0;for(let s=0;s<t.getLength();s++){if(!a(n,o))return!1;if(null!=e[n][o])return!1;n+=r,o+=i}return!0},l=(t,o,i)=>{if(!s(t,o,i))throw r.printGrid(e),console.log(`Direction: ${t.getDirection()}`),new Error(`Failed to place ship ${t.getID()} at row: ${o}, col: ${i}`);n[t.getID()]=[];let a="south"===t.getDirection()?1:0,l="east"===t.getDirection()?1:0;for(let r=0;r<t.getLength();r++)e[o][i]=t,n[t.getID()].push({row:o,col:i}),o+=a,i+=l},c=e=>Math.floor(Math.random()*e);return{placeShip:l,getShipLocation:e=>n[e],receiveAttack:(t,n)=>{i="",e[t][n]?(e[t][n].hit(),i="hit",e[t][n].isSunk()&&(i="sunk")):i="miss"},getOutcome:()=>i,isDefeated:()=>{for(let e of t)if(!e.isSunk())return!1;return!0},initDefaultShips:()=>{(()=>{let e=o(4,"1","east"),n=o(2,"2","south"),r=o(2,"3","east"),i=o(3,"4","south"),a=o(1,"5","south"),s=o(3,"6","south"),l=o(2,"7","east"),c=o(1,"8"),d=o(1,"9"),u=o(1,"10");t.push(e),t.push(n),t.push(r),t.push(i),t.push(a),t.push(s),t.push(l),t.push(c),t.push(d),t.push(u)})(),l(t[0],0,4),l(t[1],0,9),l(t[2],2,0),l(t[3],3,4),l(t[4],3,6),l(t[5],4,9),l(t[6],5,0),l(t[7],8,0),l(t[8],9,5),l(t[9],9,9)},randomize:()=>{(()=>{for(let t=0;t<10;t++)for(let n=0;n<10;n++)e[t][n]=null})(),(()=>{for(let e in n)delete n[e]})();for(let e of t){let t,n,o;do{t=c(10),n=c(10),o=0===c(2)?"south":"east",e.setDirection(o)}while(!s(e,t,n)||r.hasSpaceConflict(e,t,n));l(e,t,n)}console.log("reached"),r.printGrid(e)},getShipGrid:()=>e,getShipArr:()=>t,getShipLocations:()=>n,isShipPresentAt:(t,n)=>null!=e[t][n],moveShip:(e,t)=>{r.moveShip(e,t)},rotateShip:e=>{r.rotateShip(e)},getLocationChange:()=>r.getLocationChange(),getErrorMsg:()=>r.getError(),getPossibleMove:()=>r.getPossibleMove(),printGrid:()=>{r.printGrid()}}},i=()=>{const e=Array(10).fill().map((()=>Array(10).fill(null)));return{isValidAttack:(t,n)=>((e,t)=>e>=0&&e<10&&t>=0&&t<10)(t,n)&&null===e[t][n],recordAttack:(t,n)=>{e[t][n]="hit"}}};var a=n(379),s=n.n(a),l=n(795),c=n.n(l),d=n(569),u=n.n(d),A=n(565),p=n.n(A),h=n(216),g=n.n(h),f=n(589),m=n.n(f),C=n(426),v={};v.styleTagTransform=m(),v.setAttributes=p(),v.insert=u().bind(null,"head"),v.domAPI=c(),v.insertStyleElement=g(),s()(C.Z,v),C.Z&&C.Z.locals&&C.Z.locals,(()=>{let e=(()=>{const e=r(),t=r(),n=i(),o=i();let a="",s="";e.initDefaultShips(),t.initDefaultShips(),t.randomize();const l=(e=>{let t=()=>Math.floor(10*Math.random());return{pickTargetSimple:()=>{let n=t(),o=t();for(;!e.isValidAttack(n,o);)console.log(`(${n}, ${o}) is invalid. Rerolling`),n=t(),o=t();return console.log(`AI final target (${n}, ${o})`),{row:n,col:o}}}})(o);return{getShipGrid:()=>e.getShipGrid(),getShipGridWrapper:()=>e,processUserInput:(e,o)=>{n.isValidAttack(e,o)&&(t.receiveAttack(e,o),a=t.getOutcome(),n.recordAttack(e,o))},isAttackableByPlayer:(e,t)=>n.isValidAttack(e,t),winCheckPlayer:()=>t.isDefeated(),winCheckComputer:()=>e.isDefeated(),isShipPresentAt:(n,o,r)=>("computer"===r?t:e).isShipPresentAt(n,o),processComputerAttack:()=>{let t=l.pickTargetSimple();if(o.isValidAttack(t.row,t.col))return e.receiveAttack(t.row,t.col),s=e.getOutcome(),o.recordAttack(t.row,t.col),t;console.log("game master: processComputerAttackError")},getPlayerTurnResult:()=>a,getComputerTurnResult:()=>s,moveShip:(t,n)=>{e.moveShip(t,n)},rotateShip:(t,n)=>{e.rotateShip(t)},getLocationChange:()=>e.getLocationChange(),getErrorMsg:()=>e.getErrorMsg(),getPossibleMove:()=>e.getPossibleMove(),randomizePlayerBoard:()=>{e.randomize()},randomizeComputerBoard:()=>{t.randomize()}}})(),n=t();const o=(t,r,i)=>{if(!e.isAttackableByPlayer(t,r))return;if(n.lockoutAttackGrid(),((e,t)=>{console.log(e.target);let n=e.target;n.classList.add("animate"),t?n.classList.add("hit"):n.classList.add("miss")})(i,e.isShipPresentAt(i.target.dataset.row,i.target.dataset.col,"computer")),e.processUserInput(t,r),n.updateMsgOne(t,r,e.getPlayerTurnResult()),e.winCheckPlayer())return console.log("player wins"),void n.updateMsgTwo(0,0,"win");let a=e.processComputerAttack();setTimeout((()=>{n.markComputerAttack(a.row,a.col),n.makeAttackGridClickable(o)}),3e3),console.log(`Your opponent fires at (${a.row}, ${a.col}) and ${e.getComputerTurnResult()}`),n.updateMsgTwo(a.row,a.col,e.getComputerTurnResult()),e.winCheckComputer()&&(console.log("computer wins"),n.updateMsgTwo(0,0,"loss"))};return{initiate:()=>{n.setUp(e,o)},processUserInput:o,getShipGrid:()=>e.getShipGrid()}})().initiate()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsIm1hcHBpbmdzIjoid0ZBR0lBLEUsTUFBMEIsR0FBNEIsS0FFMURBLEVBQXdCQyxLQUFLLENBQUNDLEVBQU9DLEdBQUksMjJEQTBJckMsR0FBRyxDQUFDLFFBQVUsRUFBRSxRQUFVLENBQUMsNkJBQTZCLE1BQVEsR0FBRyxTQUFXLG81QkFBbzVCLGVBQWlCLENBQUMsNDJEQUFnM0QsV0FBYSxNQUVyM0YsUyxVQzNJQUQsRUFBT0UsUUFBVSxTQUFVQyxHQUN6QixJQUFJQyxFQUFPLEdBNEVYLE9BekVBQSxFQUFLQyxTQUFXLFdBQ2QsT0FBT0MsS0FBS0MsS0FBSSxTQUFVQyxHQUN4QixJQUFJQyxFQUFVLEdBQ1ZDLE9BQStCLElBQVpGLEVBQUssR0FvQjVCLE9BbkJJQSxFQUFLLEtBQ1BDLEdBQVcsY0FBY0UsT0FBT0gsRUFBSyxHQUFJLFFBRXZDQSxFQUFLLEtBQ1BDLEdBQVcsVUFBVUUsT0FBT0gsRUFBSyxHQUFJLE9BRW5DRSxJQUNGRCxHQUFXLFNBQVNFLE9BQU9ILEVBQUssR0FBR0ksT0FBUyxFQUFJLElBQUlELE9BQU9ILEVBQUssSUFBTSxHQUFJLE9BRTVFQyxHQUFXTixFQUF1QkssR0FDOUJFLElBQ0ZELEdBQVcsS0FFVEQsRUFBSyxLQUNQQyxHQUFXLEtBRVRELEVBQUssS0FDUEMsR0FBVyxLQUVOQSxDQUNULElBQUdJLEtBQUssR0FDVixFQUdBVCxFQUFLVSxFQUFJLFNBQVdDLEVBQVNDLEVBQU9DLEVBQVFDLEVBQVVDLEdBQzdCLGlCQUFaSixJQUNUQSxFQUFVLENBQUMsQ0FBQyxLQUFNQSxPQUFTSyxLQUU3QixJQUFJQyxFQUF5QixDQUFDLEVBQzlCLEdBQUlKLEVBQ0YsSUFBSyxJQUFJSyxFQUFJLEVBQUdBLEVBQUloQixLQUFLTSxPQUFRVSxJQUFLLENBQ3BDLElBQUlyQixFQUFLSyxLQUFLZ0IsR0FBRyxHQUNQLE1BQU5yQixJQUNGb0IsRUFBdUJwQixJQUFNLEVBRWpDLENBRUYsSUFBSyxJQUFJc0IsRUFBSyxFQUFHQSxFQUFLUixFQUFRSCxPQUFRVyxJQUFNLENBQzFDLElBQUlmLEVBQU8sR0FBR0csT0FBT0ksRUFBUVEsSUFDekJOLEdBQVVJLEVBQXVCYixFQUFLLFdBR3JCLElBQVZXLFNBQ2MsSUFBWlgsRUFBSyxLQUdkQSxFQUFLLEdBQUssU0FBU0csT0FBT0gsRUFBSyxHQUFHSSxPQUFTLEVBQUksSUFBSUQsT0FBT0gsRUFBSyxJQUFNLEdBQUksTUFBTUcsT0FBT0gsRUFBSyxHQUFJLE1BRi9GQSxFQUFLLEdBQUtXLEdBTVZILElBQ0dSLEVBQUssSUFHUkEsRUFBSyxHQUFLLFVBQVVHLE9BQU9ILEVBQUssR0FBSSxNQUFNRyxPQUFPSCxFQUFLLEdBQUksS0FDMURBLEVBQUssR0FBS1EsR0FIVlIsRUFBSyxHQUFLUSxHQU1WRSxJQUNHVixFQUFLLElBR1JBLEVBQUssR0FBSyxjQUFjRyxPQUFPSCxFQUFLLEdBQUksT0FBT0csT0FBT0gsRUFBSyxHQUFJLEtBQy9EQSxFQUFLLEdBQUtVLEdBSFZWLEVBQUssR0FBSyxHQUFHRyxPQUFPTyxJQU14QmQsRUFBS0wsS0FBS1MsR0FDWixDQUNGLEVBQ09KLENBQ1QsQyxVQ2xGQUosRUFBT0UsUUFBVSxTQUFVTSxHQUN6QixJQUFJQyxFQUFVRCxFQUFLLEdBQ2ZnQixFQUFhaEIsRUFBSyxHQUN0QixJQUFLZ0IsRUFDSCxPQUFPZixFQUVULEdBQW9CLG1CQUFUZ0IsS0FBcUIsQ0FDOUIsSUFBSUMsRUFBU0QsS0FBS0UsU0FBU0MsbUJBQW1CQyxLQUFLQyxVQUFVTixNQUN6RE8sRUFBTywrREFBK0RwQixPQUFPZSxHQUM3RU0sRUFBZ0IsT0FBT3JCLE9BQU9vQixFQUFNLE9BQ3hDLE1BQU8sQ0FBQ3RCLEdBQVNFLE9BQU8sQ0FBQ3FCLElBQWdCbkIsS0FBSyxLQUNoRCxDQUNBLE1BQU8sQ0FBQ0osR0FBU0ksS0FBSyxLQUN4QixDLFVDYkEsSUFBSW9CLEVBQWMsR0FDbEIsU0FBU0MsRUFBcUJDLEdBRTVCLElBREEsSUFBSUMsR0FBVSxFQUNMdEIsRUFBSSxFQUFHQSxFQUFJbUIsRUFBWXJCLE9BQVFFLElBQ3RDLEdBQUltQixFQUFZbkIsR0FBR3FCLGFBQWVBLEVBQVksQ0FDNUNDLEVBQVN0QixFQUNULEtBQ0YsQ0FFRixPQUFPc0IsQ0FDVCxDQUNBLFNBQVNDLEVBQWFqQyxFQUFNa0MsR0FHMUIsSUFGQSxJQUFJQyxFQUFhLENBQUMsRUFDZEMsRUFBYyxHQUNUMUIsRUFBSSxFQUFHQSxFQUFJVixFQUFLUSxPQUFRRSxJQUFLLENBQ3BDLElBQUlOLEVBQU9KLEVBQUtVLEdBQ1piLEVBQUtxQyxFQUFRRyxLQUFPakMsRUFBSyxHQUFLOEIsRUFBUUcsS0FBT2pDLEVBQUssR0FDbERrQyxFQUFRSCxFQUFXdEMsSUFBTyxFQUMxQmtDLEVBQWEsR0FBR3hCLE9BQU9WLEVBQUksS0FBS1UsT0FBTytCLEdBQzNDSCxFQUFXdEMsR0FBTXlDLEVBQVEsRUFDekIsSUFBSUMsRUFBb0JULEVBQXFCQyxHQUN6Q1MsRUFBTSxDQUNSQyxJQUFLckMsRUFBSyxHQUNWUSxNQUFPUixFQUFLLEdBQ1pzQyxVQUFXdEMsRUFBSyxHQUNoQlUsU0FBVVYsRUFBSyxHQUNmVyxNQUFPWCxFQUFLLElBRWQsSUFBMkIsSUFBdkJtQyxFQUNGVixFQUFZVSxHQUFtQkksYUFDL0JkLEVBQVlVLEdBQW1CSyxRQUFRSixPQUNsQyxDQUNMLElBQUlJLEVBQVVDLEVBQWdCTCxFQUFLTixHQUNuQ0EsRUFBUVksUUFBVXBDLEVBQ2xCbUIsRUFBWWtCLE9BQU9yQyxFQUFHLEVBQUcsQ0FDdkJxQixXQUFZQSxFQUNaYSxRQUFTQSxFQUNURCxXQUFZLEdBRWhCLENBQ0FQLEVBQVl6QyxLQUFLb0MsRUFDbkIsQ0FDQSxPQUFPSyxDQUNULENBQ0EsU0FBU1MsRUFBZ0JMLEVBQUtOLEdBQzVCLElBQUljLEVBQU1kLEVBQVFlLE9BQU9mLEdBWXpCLE9BWEFjLEVBQUlFLE9BQU9WLEdBQ0csU0FBaUJXLEdBQzdCLEdBQUlBLEVBQVEsQ0FDVixHQUFJQSxFQUFPVixNQUFRRCxFQUFJQyxLQUFPVSxFQUFPdkMsUUFBVTRCLEVBQUk1QixPQUFTdUMsRUFBT1QsWUFBY0YsRUFBSUUsV0FBYVMsRUFBT3JDLFdBQWEwQixFQUFJMUIsVUFBWXFDLEVBQU9wQyxRQUFVeUIsRUFBSXpCLE1BQ3pKLE9BRUZpQyxFQUFJRSxPQUFPVixFQUFNVyxFQUNuQixNQUNFSCxFQUFJSSxRQUVSLENBRUYsQ0FDQXhELEVBQU9FLFFBQVUsU0FBVUUsRUFBTWtDLEdBRy9CLElBQUltQixFQUFrQnBCLEVBRHRCakMsRUFBT0EsR0FBUSxHQURma0MsRUFBVUEsR0FBVyxDQUFDLEdBR3RCLE9BQU8sU0FBZ0JvQixHQUNyQkEsRUFBVUEsR0FBVyxHQUNyQixJQUFLLElBQUk1QyxFQUFJLEVBQUdBLEVBQUkyQyxFQUFnQjdDLE9BQVFFLElBQUssQ0FDL0MsSUFDSTZDLEVBQVF6QixFQURLdUIsRUFBZ0IzQyxJQUVqQ21CLEVBQVkwQixHQUFPWixZQUNyQixDQUVBLElBREEsSUFBSWEsRUFBcUJ2QixFQUFhcUIsRUFBU3BCLEdBQ3RDdUIsRUFBSyxFQUFHQSxFQUFLSixFQUFnQjdDLE9BQVFpRCxJQUFNLENBQ2xELElBQ0lDLEVBQVM1QixFQURLdUIsRUFBZ0JJLElBRUssSUFBbkM1QixFQUFZNkIsR0FBUWYsYUFDdEJkLEVBQVk2QixHQUFRZCxVQUNwQmYsRUFBWWtCLE9BQU9XLEVBQVEsR0FFL0IsQ0FDQUwsRUFBa0JHLENBQ3BCLENBQ0YsQyxVQ2pGQSxJQUFJRyxFQUFPLENBQUMsRUErQlovRCxFQUFPRSxRQVBQLFNBQTBCOEQsRUFBUUMsR0FDaEMsSUFBSUMsRUF0Qk4sU0FBbUJBLEdBQ2pCLFFBQTRCLElBQWpCSCxFQUFLRyxHQUF5QixDQUN2QyxJQUFJQyxFQUFjQyxTQUFTQyxjQUFjSCxHQUd6QyxHQUFJSSxPQUFPQyxtQkFBcUJKLGFBQXVCRyxPQUFPQyxrQkFDNUQsSUFHRUosRUFBY0EsRUFBWUssZ0JBQWdCQyxJQUM1QyxDQUFFLE1BQU9DLEdBRVBQLEVBQWMsSUFDaEIsQ0FFRkosRUFBS0csR0FBVUMsQ0FDakIsQ0FDQSxPQUFPSixFQUFLRyxFQUNkLENBSWVTLENBQVVYLEdBQ3ZCLElBQUtFLEVBQ0gsTUFBTSxJQUFJVSxNQUFNLDJHQUVsQlYsRUFBT1csWUFBWVosRUFDckIsQyxVQ3ZCQWpFLEVBQU9FLFFBTlAsU0FBNEJvQyxHQUMxQixJQUFJd0MsRUFBVVYsU0FBU1csY0FBYyxTQUdyQyxPQUZBekMsRUFBUTBDLGNBQWNGLEVBQVN4QyxFQUFRMkMsWUFDdkMzQyxFQUFRMEIsT0FBT2MsRUFBU3hDLEVBQVFBLFNBQ3pCd0MsQ0FDVCxDLGdCQ0NBOUUsRUFBT0UsUUFOUCxTQUF3Q2dGLEdBQ3RDLElBQUlDLEVBQW1ELEtBQ25EQSxHQUNGRCxFQUFhRSxhQUFhLFFBQVNELEVBRXZDLEMsVUNvREFuRixFQUFPRSxRQWpCUCxTQUFnQm9DLEdBQ2QsR0FBd0Isb0JBQWI4QixTQUNULE1BQU8sQ0FDTGQsT0FBUSxXQUFtQixFQUMzQkUsT0FBUSxXQUFtQixHQUcvQixJQUFJMEIsRUFBZTVDLEVBQVErQyxtQkFBbUIvQyxHQUM5QyxNQUFPLENBQ0xnQixPQUFRLFNBQWdCVixJQWpENUIsU0FBZXNDLEVBQWM1QyxFQUFTTSxHQUNwQyxJQUFJQyxFQUFNLEdBQ05ELEVBQUkxQixXQUNOMkIsR0FBTyxjQUFjbEMsT0FBT2lDLEVBQUkxQixTQUFVLFFBRXhDMEIsRUFBSTVCLFFBQ042QixHQUFPLFVBQVVsQyxPQUFPaUMsRUFBSTVCLE1BQU8sT0FFckMsSUFBSU4sT0FBaUMsSUFBZGtDLEVBQUl6QixNQUN2QlQsSUFDRm1DLEdBQU8sU0FBU2xDLE9BQU9pQyxFQUFJekIsTUFBTVAsT0FBUyxFQUFJLElBQUlELE9BQU9pQyxFQUFJekIsT0FBUyxHQUFJLE9BRTVFMEIsR0FBT0QsRUFBSUMsSUFDUG5DLElBQ0ZtQyxHQUFPLEtBRUxELEVBQUk1QixRQUNONkIsR0FBTyxLQUVMRCxFQUFJMUIsV0FDTjJCLEdBQU8sS0FFVCxJQUFJQyxFQUFZRixFQUFJRSxVQUNoQkEsR0FBNkIsb0JBQVRyQixPQUN0Qm9CLEdBQU8sdURBQXVEbEMsT0FBT2MsS0FBS0UsU0FBU0MsbUJBQW1CQyxLQUFLQyxVQUFVZ0IsTUFBZSxRQUt0SVIsRUFBUWdELGtCQUFrQnpDLEVBQUtxQyxFQUFjNUMsRUFBUUEsUUFDdkQsQ0FvQk1pRCxDQUFNTCxFQUFjNUMsRUFBU00sRUFDL0IsRUFDQVksT0FBUSxZQXJCWixTQUE0QjBCLEdBRTFCLEdBQWdDLE9BQTVCQSxFQUFhTSxXQUNmLE9BQU8sRUFFVE4sRUFBYU0sV0FBV0MsWUFBWVAsRUFDdEMsQ0FnQk1RLENBQW1CUixFQUNyQixFQUVKLEMsVUM5Q0FsRixFQUFPRSxRQVZQLFNBQTJCMkMsRUFBS3FDLEdBQzlCLEdBQUlBLEVBQWFTLFdBQ2ZULEVBQWFTLFdBQVdDLFFBQVUvQyxNQUM3QixDQUNMLEtBQU9xQyxFQUFhVyxZQUNsQlgsRUFBYU8sWUFBWVAsRUFBYVcsWUFFeENYLEVBQWFMLFlBQVlULFNBQVMwQixlQUFlakQsR0FDbkQsQ0FDRixDLEdDWElrRCxFQUEyQixDQUFDLEVBR2hDLFNBQVNDLEVBQW9CQyxHQUU1QixJQUFJQyxFQUFlSCxFQUF5QkUsR0FDNUMsUUFBcUI3RSxJQUFqQjhFLEVBQ0gsT0FBT0EsRUFBYWhHLFFBR3JCLElBQUlGLEVBQVMrRixFQUF5QkUsR0FBWSxDQUNqRGhHLEdBQUlnRyxFQUVKL0YsUUFBUyxDQUFDLEdBT1gsT0FIQWlHLEVBQW9CRixHQUFVakcsRUFBUUEsRUFBT0UsUUFBUzhGLEdBRy9DaEcsRUFBT0UsT0FDZixDQ3JCQThGLEVBQW9CSSxFQUFLcEcsSUFDeEIsSUFBSXFHLEVBQVNyRyxHQUFVQSxFQUFPc0csV0FDN0IsSUFBT3RHLEVBQWlCLFFBQ3hCLElBQU0sRUFFUCxPQURBZ0csRUFBb0JPLEVBQUVGLEVBQVEsQ0FBRUcsRUFBR0gsSUFDNUJBLENBQU0sRUNMZEwsRUFBb0JPLEVBQUksQ0FBQ3JHLEVBQVN1RyxLQUNqQyxJQUFJLElBQUlDLEtBQU9ELEVBQ1hULEVBQW9CVyxFQUFFRixFQUFZQyxLQUFTVixFQUFvQlcsRUFBRXpHLEVBQVN3RyxJQUM1RUUsT0FBT0MsZUFBZTNHLEVBQVN3RyxFQUFLLENBQUVJLFlBQVksRUFBTUMsSUFBS04sRUFBV0MsSUFFMUUsRUNORFYsRUFBb0JXLEVBQUksQ0FBQy9ELEVBQUtvRSxJQUFVSixPQUFPSyxVQUFVQyxlQUFlQyxLQUFLdkUsRUFBS29FLEdDQWxGaEIsRUFBb0JvQixRQUFLaEcsRSxNQ0F6QixNQUFNaUcsRUFBZSxDQUFDQyxFQUFVQyxLQUM1QixJQUFJLElBQUlDLEVBQU0sRUFBR0EsRUFBTSxHQUFJQSxJQUN2QixJQUFJLElBQUlDLEVBQU0sRUFBR0EsRUFBTSxHQUFJQSxJQUVwQkgsRUFBU0UsR0FBS0MsSUFDRUYsRUFBTUcsU0FBU0YsRUFBTSxHQUdoQkUsU0FBU0QsRUFBTSxHQUU5QkUsVUFBVUMsSUFBSSxPQU0vQixFQWdCRUMsRUFBaUIsS0FDckIsSUFBSUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFFSixNQUFNQyxFQUEwQixLQUM5QixJQUFJLElBQUlmLEVBQU0sRUFBR0EsRUFBTSxHQUFJQSxJQUN6QixJQUFJLElBQUlDLEVBQU0sRUFBR0EsRUFBTSxHQUFJQSxJQUN6QmUsRUFBYWhCLEVBQUtDLEdBQUtFLFVBQVVuRSxPQUFPLFdBRTVDLEVBR0lpRixFQUFzQkMsSUFDMUJOLEVBQWFPLFNBQVlDLElBQ3ZCTCxJQUdBLElBQUlNLEVBQVNULEVBQWFVLE1BQ3RCQyxFQUFjTCxFQUFnQk0sZ0JBQWdCSCxHQUNsRCxJQUFJLElBQUlJLEtBQVNGLEVBQVksQ0FDM0JHLFFBQVFDLElBQUksV0FDWkQsUUFBUUMsSUFBSUYsR0FDWixJQUFJRyxFQUFPWixFQUFhUyxFQUFNekIsSUFBS3lCLEVBQU14QixLQUN6Q3lCLFFBQVFDLElBQUksUUFDWkQsUUFBUUMsSUFBSUMsR0FDWkEsRUFBS3pCLFVBQVVDLElBQUksV0FDckIsQ0FDQVksQ0FDRixFQWtDSWEsRUFBMkJDLElBQy9CLElBQUksSUFBSTlCLEVBQU0sRUFBR0EsRUFBTSxHQUFJQSxJQUN2QixJQUFJLElBQUlDLEVBQU0sRUFBR0EsRUFBTSxHQUFJQSxJQUNSTSxFQUFXTCxTQUFTRixFQUFNLEdBQ3JCRSxTQUFTRCxFQUFNLEdBQzlCOEIsUUFBV0MsSUFDZEYsRUFBaUI5QixFQUFLQyxFQUFLK0IsRUFBTSxDQUkzQyxFQTJCSUMsRUFBaUIsS0FFckIsSUFBSW5CLEVBQVdvQixrQkFFYixZQURBUixRQUFRQyxJQUFJLHFEQUdkLElBQUlRLEVBQWlCckIsRUFBV3NCLG9CQUNoQyxJQUFJLElBQUlDLEtBQVlGLEVBQWVHLGFBQWEsQ0FDOUMsSUFBSUMsRUFBT3ZCLEVBQWFxQixFQUFTckMsSUFBS3FDLEVBQVNwQyxLQUMvQ3NDLEVBQUtwQyxVQUFVbkUsT0FBTyxRQUN0QnVHLEVBQUtwQyxVQUFVbkUsT0FBTyxXQUN4QixDQUVBLElBQUksSUFBSXFHLEtBQVlGLEVBQWVLLGFBQWEsQ0FDOUMsSUFBSUQsRUFBT3ZCLEVBQWFxQixFQUFTckMsSUFBS3FDLEVBQVNwQyxLQUMvQ3NDLEVBQUtwQyxVQUFVQyxJQUFJLFFBQ25CbUMsRUFBS3BDLFVBQVVDLElBQUksV0FDckIsR0FHSXFDLEVBQWlCLEtBQ3JCLElBQUlDLEVBQVk1QixFQUFXNkIsY0FDM0JqQixRQUFRQyxJQUFJZSxHQUNLLGdCQUFkQSxHQUNEakMsRUFBYW1DLFlBQWMsbUNBQzNCcEMsRUFBZS9ELE1BQU1vRyxXQUFhLFdBQ1osbUJBQWRILEdBQ1JqQyxFQUFhbUMsWUFBYyxzRkFDM0JwQyxFQUFlL0QsTUFBTW9HLFdBQWEsWUFFbENwQyxFQUFhbUMsWUFBYyxHQUMzQnBDLEVBQWUvRCxNQUFNb0csV0FBYSxTQUNwQyxFQThGSUMsRUFBWSxDQUFDQyxFQUFNakIsS0FDTGxGLFNBQVNDLGNBQWMsWUFSekIsRUFBQ21HLEVBQVdELEVBQU1qQixLQUdsQ2pDLEVBQWFrRCxFQUFLRSxjQUFlM0MsRUFBUyxFQU8xQzRDLENBQVVGLEVBQVdELEVBQXVCLEVBVXhDL0IsRUFBZSxDQUFDaEIsRUFBS0MsSUFDVkssRUFBVUosU0FBU0YsRUFBTSxHQUNwQkUsU0FBU0QsRUFBTSxHQWNyQyxNQUFPLENBQ0xrRCxNQXhCWSxDQUFDSixFQUFNakIsS0F4RG5CeEIsRUFBWTFELFNBQVNDLGNBQWMsYUFDbkMwRCxFQUFhM0QsU0FBU0MsY0FBYyxlQUNwQzRELEVBQWU3RCxTQUFTQyxjQUFjLGNBQ3RDMkQsRUFBaUI1RCxTQUFTQyxjQUFjLG1CQUN4QzZELEVBQVM5RCxTQUFTQyxjQUFjLFdBQ2hDOEQsRUFBUy9ELFNBQVNDLGNBQWMsV0FDaEMrRCxFQUFlaEUsU0FBU0MsY0FBYyxrQkFqQnRDZ0UsRUFBYyxDQUFDLEVBQ2ZBLEVBQVl1QyxHQUFLeEcsU0FBU0MsY0FBYyxPQUN4Q2dFLEVBQVl3QyxLQUFPekcsU0FBU0MsY0FBYyxTQUMxQ2dFLEVBQVl5QyxLQUFPMUcsU0FBU0MsY0FBYyxTQUMxQ2dFLEVBQVkwQyxNQUFRM0csU0FBU0MsY0FBYyxVQUMzQ2dFLEVBQVkyQyxPQUFTNUcsU0FBU0MsY0FBYyxXQUM1Q2dFLEVBQVk0QyxVQUFZN0csU0FBU0MsY0FBYyxjQUMvQ2dFLEVBQVk2QyxNQUFROUcsU0FBU0MsY0FBYyxVQVkzQ29FLElBR3FCLENBQUM4QixJQUN0QmpDLEVBQWFpQyxDQUFJLEVBOENqQlksQ0FBZVosR0ExSmUsRUFBQ2pCLEVBQWtCaEMsS0FDakRlLEVBQVk2QyxNQUFNM0IsUUFBVSxLQUMxQkYsRUFBd0JDLEdBakQxQmpCLEVBQVl1QyxHQUFHUSxVQUFXLEVBQzFCL0MsRUFBWXdDLEtBQUtPLFVBQVcsRUFDNUIvQyxFQUFZeUMsS0FBS00sVUFBVyxFQUM1Qi9DLEVBQVkwQyxNQUFNSyxVQUFXLEVBQzdCL0MsRUFBWTJDLE9BQU9JLFVBQVcsRUFDOUIvQyxFQUFZNEMsVUFBVUcsVUFBVyxFQUNqQy9DLEVBQVk2QyxNQUFNRSxVQUFXLEVBQzdCaEQsRUFBYWdELFVBQVcsRUE0Q3RCN0MsSUFFQW5FLFNBQVNDLGNBQWMsbUJBQW1CSixNQUFNb0csV0FBYSxVQUM3RGpHLFNBQVNDLGNBQWMsb0JBQW9CSixNQUFNb0csV0FBYSxTQUU5RG5DLEVBQU9rQyxZQUFjLHdEQUF3RCxFQUUvRS9CLEVBQVk0QyxVQUFVMUIsUUFBVSxLQUM5QmpCLEVBQVcrQyx1QkFqRFUsTUFDdkIsSUFBSSxJQUFJN0QsRUFBTSxFQUFHQSxFQUFNLEdBQUlBLElBQ3pCLElBQUksSUFBSUMsRUFBTSxFQUFHQSxFQUFNLEdBQUlBLElBQU0sQ0FDL0IsSUFBSXNDLEVBQU92QixFQUFhaEIsRUFBS0MsR0FDN0JzQyxFQUFLcEMsVUFBVW5FLE9BQU8sUUFDdEJ1RyxFQUFLcEMsVUFBVW5FLE9BQU8sV0FDeEIsQ0FDRixFQTJDRThILEdBaEJGbEQsRUFBYVUsTUFBUSxPQWtCbkJ6QixFQUFhaUIsRUFBV21DLGNBQWUzQyxFQUFTLEVBRWxEVyxFQUFtQm5CLEVBQVMsRUEwSTVCaUUsQ0FBd0JqQyxFQUFrQmlCLEVBQUtpQixzQkFsRy9DbkQsRUFBWXVDLEdBQUdyQixRQUFVLEtBQ3ZCakIsRUFBV21ELFNBQVNyRCxFQUFhVSxNQUFPLE1BQ3hDVyxJQUNBUSxHQUFnQixFQUVsQjVCLEVBQVl5QyxLQUFLdkIsUUFBVSxLQUN6QmpCLEVBQVdtRCxTQUFTckQsRUFBYVUsTUFBTyxRQUN4Q1csSUFDQVEsR0FBZ0IsRUFFbEI1QixFQUFZMEMsTUFBTXhCLFFBQVUsS0FDMUJqQixFQUFXbUQsU0FBU3JELEVBQWFVLE1BQU8sU0FDeENXLElBQ0FRLEdBQWdCLEVBRWxCNUIsRUFBWXdDLEtBQUt0QixRQUFVLEtBQ3pCakIsRUFBV21ELFNBQVNyRCxFQUFhVSxNQUFPLFFBQ3hDVyxJQUNBUSxHQUFnQixFQUVsQjVCLEVBQVkyQyxPQUFPekIsUUFBVSxLQUMzQmpCLEVBQVdvRCxXQUFXdEQsRUFBYVUsT0FDbkNXLElBQ0FRLEdBQWdCLEVBNkVsQkssRUFBVUMsRUFBdUIsRUFvQmpDRCxZQUNBcUIsbUJBZHlCLENBQUNuRSxFQUFLQyxLQUMvQixJQUFJMkIsRUFBT1osRUFBYWhCLEVBQUtDLEdBRTFCYSxFQUFXc0QsZ0JBQWdCcEUsRUFBS0MsRUFBSyxVQUN0QzJCLEVBQUt6QixVQUFVQyxJQUFJLE9BRW5Cd0IsRUFBS3pCLFVBQVVDLElBQUksUUFFckJ3QixFQUFLekIsVUFBVUMsSUFBSSxVQUFTLEVBTzVCaUUsYUFwRW1CLENBQUNyRSxFQUFLQyxFQUFLckYsS0FDOUIsSUFBSTBKLEVBQ1UsU0FBWDFKLEVBQ0QwSixFQUFNLGdCQUFnQnRFLE1BQVFDLHNCQUNWLFFBQVhyRixFQUNUMEosRUFBTSxnQkFBZ0J0RSxNQUFRQyxzQkFDVixTQUFYckYsRUFDVDBKLEVBQU0sZ0JBQWdCdEUsTUFBUUMsb0NBQ1YsU0FBWHJGLElBQ1QwSixFQUFNLDhEQUVSNUQsRUFBT2tDLFlBQWMwQixDQUFHLEVBMER4QkMsYUF2RG1CLENBQUN2RSxFQUFLQyxFQUFLckYsS0FDOUIsSUFBSTBKLEVBQ1UsU0FBWDFKLEVBQ0QwSixFQUFNLDJCQUEyQnRFLE1BQVFDLHVCQUNyQixRQUFYckYsRUFDVDBKLEVBQU0sMkJBQTJCdEUsTUFBUUMsdUJBQ3JCLFNBQVhyRixFQUNUMEosRUFBTSwyQkFBMkJ0RSxNQUFRQyxzQ0FDckIsUUFBWHJGLElBQ1QwSixFQUFNLG9EQUVSM0QsRUFBT2lDLFlBQWMwQixDQUFHLEVBNkN4QnJDLGlCQUNBdUMsa0JBak53QixLQUN4QixJQUFJLElBQUl4RSxFQUFNLEVBQUdBLEVBQU0sR0FBSUEsSUFBTSxDQUM3QixJQUFJeUUsRUFBV2xFLEVBQVdMLFNBQVNGLEVBQU0sR0FDekMsSUFBSSxJQUFJQyxFQUFNLEVBQUdBLEVBQU0sR0FBSUEsSUFDWndFLEVBQVN2RSxTQUFTRCxFQUFNLEdBQzlCOEIsUUFBVSxJQUV2QixHQTJNQUYsMEJBQ0EsRUM5U0U2QyxFQUFjLENBQUNDLEVBQUt0RCxFQUFRLE9BQVF1RCxFQUFNLFdBQzVDLE1BQU1uTSxFQUFLNEksRUFDTGpJLEVBQVN1TCxFQUNmLElBQUlFLEVBQVlELEVBQ1pFLEVBQWdCLEVBQ2hCQyxHQUFPLEVBNEJYLE1BQU8sQ0FDSEMsaUJBM0JxQixJQUNkRixFQTJCUEcsSUF6QlEsS0FFUkgsSUFDR0EsSUFBa0IxTCxJQUNqQjJMLEdBQU8sRUFFWCxFQW9CQUcsYUFsQmtCQyxJQUNsQk4sRUFBWU0sQ0FBWSxFQWtCeEJDLE9BaEJXLElBQ0pMLEVBZ0JQTSxVQWRjLElBQ1BqTSxFQWNQa00sYUFaaUIsSUFDVlQsRUFZUFUsTUFWVSxJQUNIOU0sRUFVVixFQ2xDQytNLEVBQWtCLEtBQ3BCLE1BQU0xRixFQUFXMkYsTUFBTSxJQUFJQyxPQUFPM00sS0FBSSxJQUFNME0sTUFBTSxJQUFJQyxLQUFLLFFBQ3JEQyxFQUFVLEdBQ1ZDLEVBQWdCLENBQUMsRUFDakJDLEVDWHVCLEVBQUNDLEVBQVlDLEVBQWlCQyxLQUMzRCxJQUFJbEcsRUFBV2dHLEVBQ1hGLEVBQWdCRyxFQUNoQkosRUFBVUssRUFFVkMsRUFBUSxPQUNSOUQsRUFBaUIsQ0FBQyxFQUNsQitELEdBQWUsRUFFbkIsTUFrRE1DLEVBQXFCLENBQUNuRyxFQUFLQyxJQUN0QkQsRUFBTSxHQUFLQSxHQUFPLElBQU1DLEVBQU0sR0FBS0EsR0FBTyxHQUcvQ21HLEVBQWlCNUQsSUFDbkIsSUFBSSxJQUFJSCxLQUFZRyxFQUNoQixHQUFHMkQsRUFBbUI5RCxFQUFTckMsSUFBS3FDLEVBQVNwQyxLQUN6QyxPQUFPLEVBR2YsT0FBTyxDQUFLLEVBR1ZvRyxFQUFzQixLQUN4QmxFLEVBQWlCLENBQUMsQ0FBQyxFQW9CakJtRSxFQUF1QixDQUFDdEcsRUFBS0MsRUFBS29CLEtBRWhDOEUsRUFBbUJuRyxFQUFLQyxJQUNELE9BQXZCSCxFQUFTRSxHQUFLQyxTQUNTckcsSUFBdkJrRyxFQUFTRSxHQUFLQyxJQUtYSCxFQUFTRSxHQUFLQyxHQUFLc0YsVUFBWWxFLEVBR3BDa0YsRUFBbUIsQ0FBQ2xGLEVBQVFtQixLQUM5QixJQUFJLElBQUlILEtBQVlHLEVBQWEsQ0FDN0IsSUFBSXhDLEVBQU1xQyxFQUFTckMsSUFDZkMsRUFBTW9DLEVBQVNwQyxJQUNuQixHQUFHcUcsRUFBcUJ0RyxFQUFNLEVBQUdDLEVBQU0sRUFBR29CLEdBQVMsT0FBTyxFQUMxRCxHQUFHaUYsRUFBcUJ0RyxFQUFTQyxFQUFNLEVBQUdvQixHQUFTLE9BQU8sRUFDMUQsR0FBR2lGLEVBQXFCdEcsRUFBTSxFQUFHQyxFQUFNLEVBQUdvQixHQUFTLE9BQU8sRUFDMUQsR0FBR2lGLEVBQXFCdEcsRUFBTSxFQUFHQyxFQUFTb0IsR0FBUyxPQUFPLEVBQzFELEdBQUdpRixFQUFxQnRHLEVBQU0sRUFBR0MsRUFBTSxFQUFHb0IsR0FBUyxPQUFPLEVBQzFELEdBQUdpRixFQUFxQnRHLEVBQVNDLEVBQU0sRUFBR29CLEdBQVMsT0FBTyxFQUMxRCxHQUFHaUYsRUFBcUJ0RyxFQUFNLEVBQUdDLEVBQU0sRUFBR29CLEdBQVMsT0FBTyxFQUMxRCxHQUFHaUYsRUFBcUJ0RyxFQUFNLEVBQUdDLEVBQVNvQixHQUFTLE9BQU8sQ0FDOUQsQ0FDQSxPQUFPLENBQUssRUFHVm1GLEVBQW9CLENBQUNuRixFQUFRaUIsS0FDL0IsSUFBSSxJQUFJRCxLQUFZQyxFQUNoQnhDLEVBQVN1QyxFQUFTckMsS0FBS3FDLEVBQVNwQyxLQUFPLEtBRTNDMkYsRUFBY3ZFLEdBQVUsRUFBRSxFQUd4Qm9GLEVBQWtCLENBQUNwRixFQUFRbUIsS0FLN0IsSUFBSSxJQUFJSCxLQUFZRyxFQUNoQjFDLEVBQVN1QyxFQUFTckMsS0FBS3FDLEVBQVNwQyxLQUFPMEYsRUFBUXRFLEVBQVMsR0FFeER1RSxFQUFjdkUsR0FBUTlJLEtBQUttTyxnQkFBZ0JyRSxHQUMvQyxFQXdJSixNQUFPLENBQ0g0QixTQXRJYSxDQUFDNUMsRUFBUXdELEtBRXRCLElBQUl2QyxFQUFlb0UsZ0JBQWdCZCxFQUFjdkUsSUFDN0NtQixFQUFla0UsZ0JBdElDLEVBQUNwRSxFQUFjdUMsS0FDbkMsSUFBSXJDLEVBQWUsR0FDZm1FLEVBQVMsRUFDVEMsRUFBUyxFQUNiLE9BQU8vQixHQUNILElBQUssS0FDRDhCLEdBQVUsRUFDVixNQUNKLElBQUssT0FDREEsRUFBUyxFQUNULE1BQ0osSUFBSyxPQUNEQyxHQUFVLEVBQ1YsTUFDSixJQUFLLFFBQ0RBLEVBQVMsRUFHakIsSUFBSSxJQUFJdkUsS0FBWUMsRUFBYSxDQUM3QixJQUFJdEMsRUFBTXFDLEVBQVNyQyxJQUFNMkcsRUFDckIxRyxFQUFNb0MsRUFBU3BDLElBQU0yRyxFQUN6QnBFLEVBQWFqSyxLQUFLLENBQUN5SCxNQUFLQyxPQUM1QixDQUNBLE9BQU91QyxDQUFZLEVBK0dnQnFFLENBQWdCdkUsRUFBY3VDLElBRWpFLE9BQUd1QixFQUFjNUQsSUFDYnlELEVBQVEsY0FDUkksU0FDQUgsR0FBZSxJQUloQkssRUFBaUJsRixFQUFRbUIsSUFDeEJ5RCxFQUFRLGlCQUNSSSxTQUNBSCxHQUFlLEtBSW5CRCxFQUFRLEdBQ1JDLEdBQWUsRUFDZi9ELEVBQWlCLENBQUNHLGVBQWNFLGdCQUNoQ2dFLEVBQWtCbkYsRUFBUWlCLFFBQzFCbUUsRUFBZ0JwRixFQUFRbUIsR0FBYSxFQWdIckMwQixXQXpHZ0I3QyxJQUNoQixJQUFJeUYsRUFBT25CLEVBQVF0RSxFQUFTLEdBRXhCOEQsRUFBZ0MsVUFEakIyQixFQUFLeEIsZUFDc0IsT0FBUyxRQUNuRGhELEVBQWVzRCxFQUFjdkUsR0FDN0JtQixFQTVJd0IsRUFBQ0YsRUFBYzZDLEtBQzNDLElBQUk0QixFQUFpQnpFLEVBQWEsR0FDOUJFLEVBQWUsR0FDZm1FLEVBQVMsRUFDVEMsRUFBUyxFQUNUNUcsRUFBTStHLEVBQWUvRyxJQUNyQkMsRUFBTThHLEVBQWU5RyxJQUN6QixPQUFPa0YsR0FDSCxJQUFLLFFBQ0R3QixFQUFTLEVBQ1QsTUFDSixJQUFLLE9BQ0RDLEVBQVMsRUFHakJwRSxFQUFhakssS0FBSyxDQUFDeUgsTUFBS0MsUUFDeEIsSUFBSSxJQUFJMEUsRUFBTSxFQUFHQSxFQUFNckMsRUFBYWxKLE9BQVF1TCxJQUN4QzNFLEdBQVkyRyxFQUNaMUcsR0FBWTJHLEVBQ1pwRSxFQUFhakssS0FBSyxDQUFDeUgsTUFBS0MsUUFFNUIsT0FBT3VDLENBQVksRUF1SEF3RSxDQUF3QjFFLEVBQWM2QyxHQUV6RCxPQUFHaUIsRUFBYzVELElBQ2J5RCxFQUFRLGNBQ1JJLFNBQ0FILEdBQWUsSUFHaEJLLEVBQWlCbEYsRUFBUW1CLElBQ3hCeUQsRUFBUSxpQkFDUkksU0FDQUgsR0FBZSxLQUluQkQsRUFBUSxHQUNSQyxHQUFlLEVBQ2YvRCxFQUFpQixDQUFDRyxlQUFjRSxnQkFDaENzRSxFQUFLNUIsYUFBYUMsR0FDbEJxQixFQUFrQm5GLEVBQVFpQixRQUMxQm1FLEVBQWdCcEYsRUFBUW1CLEdBQWEsRUFpRnJDeUUsU0E5RWEsSUFDTmhCLEVBOEVQL0QsZ0JBM0VvQixJQUNiZ0UsRUEyRVA5RCxrQkF4RXNCLElBQ2ZELEVBd0VQK0UsaUJBVnFCLENBQUNKLEVBQU05RyxFQUFLQyxJQWRDLENBQUNrSCxJQUNuQyxJQUFJLElBQUk5RSxLQUFZOEUsRUFDaEIsSUFBR2hCLEVBQW1COUQsRUFBU3JDLElBQUtxQyxFQUFTcEMsTUFDRCxPQUF6Q0gsRUFBU3VDLEVBQVNyQyxLQUFLcUMsRUFBU3BDLFdBQ1NyRyxJQUF6Q2tHLEVBQVN1QyxFQUFTckMsS0FBS3FDLEVBQVNwQyxLQU1uQyxPQUpBeUIsUUFBUUMsSUFBSSxhQUNaRCxRQUFRQyxJQUFJN0IsRUFBU3VDLEVBQVNyQyxLQUFLcUMsRUFBU3BDLE1BQzVDeUIsUUFBUUMsSUFBSTdCLEVBQVN1QyxFQUFTckMsS0FBS3FDLEVBQVNwQyxLQUFLc0YsU0FDakQ3RCxRQUFRQyxJQUFJVSxJQUNMLENBQ1gsRUFJTytFLENBL0NxQixFQUFDTixFQUFNOUcsRUFBS0MsS0FDeEMsSUFBSWtILEVBQXVCLEdBQ3ZCdkMsRUFBTWtDLEVBQUt4QixlQUNYWCxFQUFNbUMsRUFBS3pCLFlBQ2YsR0FBVyxVQUFSVCxFQUFnQixDQUNmdUMsRUFBcUI1TyxLQUFLLENBQUN5SCxJQUFLQSxFQUFNLEVBQUdDLElBQUtBLElBQzlDa0gsRUFBcUI1TyxLQUFLLENBQUN5SCxJQUFLQSxFQUFNLEVBQUdDLElBQUtBLEVBQU0sSUFDcERrSCxFQUFxQjVPLEtBQUssQ0FBQ3lILElBQUtBLEVBQU0sRUFBR0MsSUFBS0EsRUFBTSxJQUNwRCxJQUFJLElBQUlvSCxFQUFNLEVBQUdBLEVBQU0xQyxFQUFLMEMsSUFDeEJGLEVBQXFCNU8sS0FBSyxDQUFDeUgsSUFBS0EsRUFBTXFILEVBQUtwSCxJQUFLQSxFQUFNLElBQ3REa0gsRUFBcUI1TyxLQUFLLENBQUN5SCxJQUFLQSxFQUFNcUgsRUFBS3BILElBQUtBLEVBQU0sSUFFMURrSCxFQUFxQjVPLEtBQUssQ0FBQ3lILElBQUtBLEVBQU0yRSxFQUFLMUUsSUFBS0EsSUFDaERrSCxFQUFxQjVPLEtBQUssQ0FBQ3lILElBQUtBLEVBQU0yRSxFQUFLMUUsSUFBS0EsRUFBTSxJQUN0RGtILEVBQXFCNU8sS0FBSyxDQUFDeUgsSUFBS0EsRUFBTTJFLEVBQUsxRSxJQUFLQSxFQUFNLEdBQzFELEtBQU8sQ0FDSGtILEVBQXFCNU8sS0FBSyxDQUFDeUgsSUFBS0EsRUFBU0MsSUFBS0EsRUFBTSxJQUNwRGtILEVBQXFCNU8sS0FBSyxDQUFDeUgsSUFBS0EsRUFBTSxFQUFHQyxJQUFLQSxFQUFNLElBQ3BEa0gsRUFBcUI1TyxLQUFLLENBQUN5SCxJQUFLQSxFQUFNLEVBQUdDLElBQUtBLEVBQU0sSUFDcEQsSUFBSSxJQUFJb0gsRUFBTSxFQUFHQSxFQUFNMUMsRUFBSzBDLElBQ3hCRixFQUFxQjVPLEtBQUssQ0FBQ3lILElBQUtBLEVBQU0sRUFBR0MsSUFBS0EsRUFBTW9ILElBQ3BERixFQUFxQjVPLEtBQUssQ0FBQ3lILElBQUtBLEVBQU0sRUFBR0MsSUFBS0EsRUFBTW9ILElBRXhERixFQUFxQjVPLEtBQUssQ0FBQ3lILElBQUtBLEVBQVNDLElBQUtBLEVBQU0wRSxJQUNwRHdDLEVBQXFCNU8sS0FBSyxDQUFDeUgsSUFBS0EsRUFBTSxFQUFHQyxJQUFLQSxFQUFNMEUsSUFDcER3QyxFQUFxQjVPLEtBQUssQ0FBQ3lILElBQUtBLEVBQU0sRUFBR0MsSUFBS0EsRUFBTTBFLEdBQ3hELENBR0EsT0FGQWpELFFBQVFDLElBQUksd0JBQTBCbUYsRUFBS3ZCLFNBQzNDN0QsUUFBUUMsSUFBSXdGLEdBQ0xBLENBQW9CLEVBa0JVRyxDQUF3QlIsRUFBTTlHLEVBQUtDLElBVXhFc0gsVUE1TWMsS0FDZCxJQUFJLElBQUl2SCxFQUFNLEVBQUdBLEVBQU0sR0FBSUEsSUFBTSxDQUM3QixJQUFJd0gsRUFBU3hILEVBQU0sS0FDbkIsSUFBSSxJQUFJQyxFQUFNLEVBQUdBLEVBQU0sR0FBSUEsSUFDcEJILEVBQVNFLEdBQUtDLEdBQ2J1SCxHQUFVMUgsRUFBU0UsR0FBS0MsR0FBS3NGLFFBRTdCaUMsR0FBVSxJQUVkQSxHQUFVLElBRWQ5RixRQUFRQyxJQUFJNkYsRUFDaEIsR0FpTUosRUQ5UTBCQyxDQUF5QjNILEVBQVU4RixFQUFlRCxHQUM1RSxJQUFJK0IsRUFBVSxHQUVkLE1BQU1DLEVBQVcsQ0FBQzNILEVBQUtDLElBQ1pELEdBQU8sR0FBS0EsRUFBTSxJQUFNQyxHQUFPLEdBQUtBLEVBQU0sR0FHL0MySCxFQUF1QixDQUFDZCxFQUFNOUcsRUFBS0MsS0FDckMsSUFBSTBHLEVBQWlDLFVBQXhCRyxFQUFLeEIsZUFBNkIsRUFBSSxFQUMvQ3NCLEVBQWlDLFNBQXhCRSxFQUFLeEIsZUFBNEIsRUFBSSxFQUNsRCxJQUFJLElBQUloTSxFQUFJLEVBQUdBLEVBQUl3TixFQUFLekIsWUFBYS9MLElBQUksQ0FDckMsSUFBSXFPLEVBQVMzSCxFQUFLQyxHQUNkLE9BQU8sRUFFWCxHQUEwQixNQUF0QkgsRUFBU0UsR0FBS0MsR0FDZCxPQUFPLEVBRVhELEdBQVksRUFDWkMsR0FBWSxDQUNoQixDQUNBLE9BQU8sQ0FBSSxFQUdUNEgsRUFBWSxDQUFDZixFQUFNOUcsRUFBS0MsS0FFMUIsSUFBSTJILEVBQXFCZCxFQUFNOUcsRUFBS0MsR0FHaEMsTUFGQTRGLEVBQWtCMEIsVUFBVXpILEdBQzVCNEIsUUFBUUMsSUFBSSxjQUFjbUYsRUFBS3hCLGtCQUN6QixJQUFJbEksTUFBTSx3QkFBd0IwSixFQUFLdkIsbUJBQW1CdkYsV0FBYUMsS0FJakYyRixFQUFja0IsRUFBS3ZCLFNBQVcsR0FFOUIsSUFBSW9CLEVBQWlDLFVBQXhCRyxFQUFLeEIsZUFBNkIsRUFBSSxFQUMvQ3NCLEVBQWlDLFNBQXhCRSxFQUFLeEIsZUFBNEIsRUFBSSxFQUNsRCxJQUFJLElBQUloTSxFQUFJLEVBQUdBLEVBQUl3TixFQUFLekIsWUFBYS9MLElBQ2pDd0csRUFBU0UsR0FBS0MsR0FBTzZHLEVBQ3JCbEIsRUFBY2tCLEVBQUt2QixTQUFTaE4sS0FBSyxDQUFDeUgsTUFBS0MsUUFDdkNELEdBQVksRUFDWkMsR0FBWSxDQUNoQixFQW9IRTZILEVBQWdCQyxHQUNYQyxLQUFLQyxNQUFNRCxLQUFLRSxTQUFXSCxHQTZFdEMsTUFBTyxDQUNIRixZQUNBckcsZ0JBak1xQkgsR0FDZHVFLEVBQWN2RSxHQWlNckI4RyxjQTlMa0IsQ0FBQ25JLEVBQUtDLEtBQ3hCeUgsRUFBVSxHQUNQNUgsRUFBU0UsR0FBS0MsSUFDYkgsRUFBU0UsR0FBS0MsR0FBS2dGLE1BQ25CeUMsRUFBVSxNQUNQNUgsRUFBU0UsR0FBS0MsR0FBS21GLFdBQ2xCc0MsRUFBVSxTQUdkQSxFQUFVLE1BQ2QsRUFxTEFVLFdBbExlLElBQ1JWLEVBa0xQVyxXQS9LZSxLQUNmLElBQUksSUFBSXZCLEtBQVFuQixFQUNaLElBQUltQixFQUFLMUIsU0FDTCxPQUFPLEVBR2YsT0FBTyxDQUFJLEVBMEtYa0QsaUJBaklxQixLQXRDRSxNQUN2QixJQUFJQyxFQUFTN0QsRUFBYSxFQUFFLElBQUssUUFDN0I4RCxFQUFTOUQsRUFBYSxFQUFFLElBQUssU0FDN0IrRCxFQUFTL0QsRUFBYSxFQUFFLElBQUssUUFDN0JnRSxFQUFTaEUsRUFBYSxFQUFFLElBQUssU0FDN0JpRSxFQUFTakUsRUFBYSxFQUFFLElBQUssU0FDN0JrRSxFQUFTbEUsRUFBYSxFQUFFLElBQUssU0FDN0JtRSxFQUFTbkUsRUFBYSxFQUFFLElBQUssUUFDN0JvRSxFQUFTcEUsRUFBWSxFQUFHLEtBQ3hCcUUsRUFBU3JFLEVBQVksRUFBRyxLQUN4QnNFLEVBQVV0RSxFQUFZLEVBQUcsTUFFN0JpQixFQUFRcE4sS0FBS2dRLEdBQ2I1QyxFQUFRcE4sS0FBS2lRLEdBQ2I3QyxFQUFRcE4sS0FBS2tRLEdBQ2I5QyxFQUFRcE4sS0FBS21RLEdBQ2IvQyxFQUFRcE4sS0FBS29RLEdBQ2JoRCxFQUFRcE4sS0FBS3FRLEdBQ2JqRCxFQUFRcE4sS0FBS3NRLEdBQ2JsRCxFQUFRcE4sS0FBS3VRLEdBQ2JuRCxFQUFRcE4sS0FBS3dRLEdBQ2JwRCxFQUFRcE4sS0FBS3lRLEVBQVEsRUFrQnJCQyxHQWRBcEIsRUFBVWxDLEVBQVEsR0FBSSxFQUFHLEdBQ3pCa0MsRUFBVWxDLEVBQVEsR0FBSSxFQUFHLEdBQ3pCa0MsRUFBVWxDLEVBQVEsR0FBSSxFQUFHLEdBQ3pCa0MsRUFBVWxDLEVBQVEsR0FBSSxFQUFHLEdBQ3pCa0MsRUFBVWxDLEVBQVEsR0FBSSxFQUFHLEdBQ3pCa0MsRUFBVWxDLEVBQVEsR0FBSSxFQUFHLEdBQ3pCa0MsRUFBVWxDLEVBQVEsR0FBSSxFQUFHLEdBQ3pCa0MsRUFBVWxDLEVBQVEsR0FBSSxFQUFHLEdBQ3pCa0MsRUFBVWxDLEVBQVEsR0FBSSxFQUFHLEdBQ3pCa0MsRUFBVWxDLEVBQVEsR0FBSSxFQUFHLEVBTUEsRUFnSXpCbEMsVUFuRWMsS0FkQSxNQUNkLElBQUksSUFBSXpELEVBQU0sRUFBR0EsRUFBTSxHQUFJQSxJQUN2QixJQUFJLElBQUlDLEVBQU0sRUFBR0EsRUFBTSxHQUFJQSxJQUN2QkgsRUFBU0UsR0FBS0MsR0FBTyxJQUU3QixFQVVBaUosR0FQdUIsTUFDdkIsSUFBSSxJQUFJQyxLQUFVdkQsU0FDUEEsRUFBY3VELEVBQ3pCLEVBS0FDLEdBQ0EsSUFBSSxJQUFJdEMsS0FBUW5CLEVBQVEsQ0FDcEIsSUFBSTNGLEVBQUtDLEVBQUsyRSxFQUNkLEdBQ0k1RSxFQUFNOEgsRUFBYSxJQUNuQjdILEVBQU02SCxFQUFhLElBQ25CbEQsRUFBMEIsSUFBcEJrRCxFQUFhLEdBQVcsUUFBVSxPQUN4Q2hCLEVBQUs1QixhQUFhTixVQUVqQmdELEVBQXFCZCxFQUFNOUcsRUFBS0MsSUFDakM0RixFQUFrQnFCLGlCQUFpQkosRUFBTTlHLEVBQUtDLElBRWxENEgsRUFBVWYsRUFBTTlHLEVBQUtDLEVBQ3pCLENBQ0F5QixRQUFRQyxJQUFJLFdBQ1prRSxFQUFrQjBCLFVBQVV6SCxFQUFTLEVBbURyQ21ELFlBaERnQixJQUNUbkQsRUFnRFB1SixXQTdDZSxJQUNSMUQsRUE2Q1AyRCxpQkExQ3FCLElBQ2QxRCxFQTBDUHhCLGdCQXZDb0IsQ0FBQ3BFLEVBQUtDLElBQ0csTUFBdEJILEVBQVNFLEdBQUtDLEdBdUNyQmdFLFNBcENhLENBQUM1QyxFQUFRd0QsS0FDdEJnQixFQUFrQjVCLFNBQVM1QyxFQUFRd0QsRUFBVSxFQW9DN0NYLFdBakNnQjdDLElBQ2hCd0UsRUFBa0IzQixXQUFXN0MsRUFBTyxFQWlDcENlLGtCQTlCc0IsSUFDZnlELEVBQWtCekQsb0JBOEJ6Qk8sWUEzQmdCLElBQ1RrRCxFQUFrQm9CLFdBMkJ6Qi9FLGdCQXhCb0IsSUFDYjJELEVBQWtCM0Qsa0JBd0J6QnFGLFVBckJjLEtBQ2QxQixFQUFrQjBCLFdBQVcsRUFxQmhDLEVFeFFDZ0MsRUFBb0IsS0FDdEIsTUFBTUMsRUFBVS9ELE1BQU0sSUFBSUMsT0FBTzNNLEtBQUksSUFBTTBNLE1BQU0sSUFBSUMsS0FBSyxRQWMxRCxNQUFPLENBQUUrRCxjQVJhLENBQUN6SixFQUFLQyxJQUpYLEVBQUNELEVBQUtDLElBQ1pELEdBQU8sR0FBS0EsRUFBTSxJQUFNQyxHQUFPLEdBQUtBLEVBQU0sR0FJMUMwSCxDQUFTM0gsRUFBS0MsSUFBOEIsT0FBdEJ1SixFQUFReEosR0FBS0MsR0FPdEJ5SixhQUpILENBQUMxSixFQUFLQyxLQUN2QnVKLEVBQVF4SixHQUFLQyxHQUFPLEtBQUssRUFHUyxFLHlIQ0p0Q25GLEVBQVUsQ0FBQyxFQUVmQSxFQUFRZ0Qsa0JBQW9CLElBQzVCaEQsRUFBUTBDLGNBQWdCLElBRWxCMUMsRUFBUTBCLE9BQVMsU0FBYyxLQUFNLFFBRTNDMUIsRUFBUWUsT0FBUyxJQUNqQmYsRUFBUStDLG1CQUFxQixJQUVoQixJQUFJLElBQVMvQyxHQUtKLEtBQVcsSUFBUTZPLFFBQVMsSUFBUUEsT0NmNUIsTUFDMUIsSUFBSTVHLEVDQWtCLE1BRXRCLE1BQU02RyxFQUFxQnBFLElBQ3JCcUUsRUFBdUJyRSxJQUV2QnNFLEVBQXVCUCxJQUN2QlEsRUFBeUJSLElBRS9CLElBQUlTLEVBQW1CLEdBQ25CQyxFQUFxQixHQUV6QkwsRUFBbUJ0QixtQkFDbkJ1QixFQUFxQnZCLG1CQUNyQnVCLEVBQXFCcEcsWUFDckIsTUFBTXlHLEVDMUJ5QixDQUFDQyxJQUNoQyxJQUVJQyxFQUFVLElBQ0hwQyxLQUFLQyxNQUFzQixHQUFoQkQsS0FBS0UsVUFjM0IsTUFBTyxDQUFFbUMsaUJBWmMsS0FDbkIsSUFBSXJLLEVBQU1vSyxJQUNObkssRUFBTW1LLElBQ1YsTUFBT0QsRUFBTVYsY0FBY3pKLEVBQUtDLElBQzVCeUIsUUFBUUMsSUFBSSxJQUFJM0IsTUFBUUMsNEJBQ3hCRCxFQUFNb0ssSUFDTm5LLEVBQU1tSyxJQUdWLE9BREExSSxRQUFRQyxJQUFJLG9CQUFvQjNCLE1BQVFDLE1BQ2pDLENBQUNELE1BQUtDLE1BQUksRUFHTSxFRFFDcUssQ0FBMkJQLEdBdUZ2RCxNQUFPLENBQ0g5RyxZQXJGZ0IsSUFDVDJHLEVBQW1CM0csY0FxRjFCZSxtQkFsRnVCLElBQ2hCNEYsRUFrRlA5SCxpQkEvRXFCLENBQUM5QixFQUFNQyxLQUV4QjZKLEVBQXFCTCxjQUFjekosRUFBS0MsS0FHNUM0SixFQUFxQjFCLGNBQWNuSSxFQUFLQyxHQUN4QytKLEVBQW1CSCxFQUFxQnpCLGFBQ3hDMEIsRUFBcUJKLGFBQWExSixFQUFLQyxHQUFJLEVBeUUzQ3NLLHFCQXRFeUIsQ0FBQ3ZLLEVBQUtDLElBQ3hCNkosRUFBcUJMLGNBQWN6SixFQUFLQyxHQXNFL0N1SyxlQW5FbUIsSUFDWlgsRUFBcUJ4QixhQW1FNUJvQyxpQkFoRXFCLElBQ2RiLEVBQW1CdkIsYUFnRTFCakUsZ0JBN0RvQixDQUFDcEUsRUFBS0MsRUFBS3ZELEtBQ1IsYUFBWEEsRUFBd0JtTixFQUF1QkQsR0FDOUN4RixnQkFBZ0JwRSxFQUFLQyxHQTREbEN5SyxzQkF6RDBCLEtBQzFCLElBQUloTyxFQUFTd04sRUFBb0JHLG1CQUVqQyxHQUFJTixFQUF1Qk4sY0FBYy9NLEVBQU9zRCxJQUFLdEQsRUFBT3VELEtBTzVELE9BSEEySixFQUFtQnpCLGNBQWN6TCxFQUFPc0QsSUFBS3RELEVBQU91RCxLQUNwRGdLLEVBQXFCTCxFQUFtQnhCLGFBQ3hDMkIsRUFBdUJMLGFBQWFoTixFQUFPc0QsSUFBS3RELEVBQU91RCxLQUNoRHZELEVBTkhnRixRQUFRQyxJQUFJLDBDQU1ILEVBZ0RiZ0osb0JBN0N3QixJQUNqQlgsRUE2Q1BZLHNCQTFDMEIsSUFDbkJYLEVBMENQaEcsU0F2Q2EsQ0FBQzVDLEVBQVF3RCxLQUN0QitFLEVBQW1CM0YsU0FBUzVDLEVBQVF3RCxFQUFVLEVBdUM5Q1gsV0FwQ2UsQ0FBQzdDLEVBQVF3RCxLQUN4QitFLEVBQW1CMUYsV0FBVzdDLEVBQU8sRUFvQ3JDZSxrQkFqQ3NCLElBQ2Z3SCxFQUFtQnhILG9CQWlDMUJPLFlBOUJnQixJQUNUaUgsRUFBbUJqSCxjQThCMUJULGdCQTNCb0IsSUFDYjBILEVBQW1CMUgsa0JBMkIxQjJCLHFCQXhCeUIsS0FDekIrRixFQUFtQm5HLFdBQVcsRUF3QjlCb0gsdUJBckIyQixLQUMzQmhCLEVBQXFCcEcsV0FBVyxFQXFCbkMsRUR2SFVxSCxHQUNQQyxFQUFtQjFLLElBQ3ZCLE1BR015QixFQUFtQixDQUFDOUIsRUFBS0MsRUFBSytCLEtBRWhDLElBQUllLEVBQUt3SCxxQkFBcUJ2SyxFQUFLQyxHQUMvQixPQTBCSixHQXZCQThLLEVBQWlCdkcsb0JOSk4sRUFBQ3hDLEVBQU9nSixLQUN6QnRKLFFBQVFDLElBQUlLLEVBQU10RixRQUNsQixJQUFJa0YsRUFBT0ksRUFBTXRGLE9BRWpCa0YsRUFBS3pCLFVBQVVDLElBQUksV0FDaEI0SyxFQUNEcEosRUFBS3pCLFVBQVVDLElBQUksT0FFbkJ3QixFQUFLekIsVUFBVUMsSUFBSSxPQUNyQixFTUhNNkssQ0FDSWpKLEVBQ0FlLEVBQUtxQixnQkFDRHBDLEVBQU10RixPQUFPd08sUUFBUWxMLElBQ3JCZ0MsRUFBTXRGLE9BQU93TyxRQUFRakwsSUFDckIsYUFTUjhDLEVBQUtqQixpQkFBaUI5QixFQUFLQyxHQUkzQjhLLEVBQWlCMUcsYUFBYXJFLEVBQUtDLEVBQUs4QyxFQUFLNEgsdUJBRzFDNUgsRUFBS3lILGlCQUlKLE9BRkE5SSxRQUFRQyxJQUFJLG9CQUNab0osRUFBaUJ4RyxhQUFhLEVBQUcsRUFBRyxPQU14QyxJQUFJN0gsRUFBU3FHLEVBQUsySCx3QkFHbEJTLFlBQVcsS0FDUEosRUFBaUI1RyxtQkFBbUJ6SCxFQUFPc0QsSUFBS3RELEVBQU91RCxLQUN2RDhLLEVBQWlCbEosd0JBQXdCQyxFQUFpQixHQUU3RCxLQUlESixRQUFRQyxJQUFJLDJCQUEyQmpGLEVBQU9zRCxRQUFRdEQsRUFBT3VELFlBQVk4QyxFQUFLNkgsMkJBQzlFRyxFQUFpQnhHLGFBQWE3SCxFQUFPc0QsSUFBS3RELEVBQU91RCxJQUFLOEMsRUFBSzZILHlCQUd4RDdILEVBQUswSCxxQkFDSi9JLFFBQVFDLElBQUksaUJBQ1pvSixFQUFpQnhHLGFBQWEsRUFBRyxFQUFHLFFBQ3hDLEVBUUosTUFBTyxDQUFFNkcsU0FKUSxLQUNiTCxFQUFpQjVILE1BQU1KLEVBQU1qQixFQUFpQixFQUcvQkEsbUJBQWtCbUIsWUFuRWpCLElBQ1RGLEVBQUtFLGNBa0VrQyxFRzVFbENvSSxHQUNSRCxVIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zdHlsZS5jc3MiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVUYWdUcmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL2JhdHRsZXNoaXAvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwL3dlYnBhY2svcnVudGltZS9ub25jZSIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL3ZpZXdDb250cm9sbGVyLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc2hpcEZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9zaGlwR3JpZEZhY3RvcnkuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy90cmFmZmljQ29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2F0dGFja0dyaWRGYWN0b3J5LmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc3R5bGUuY3NzPzcxNjMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy93ZWJzaXRlTWFuYWdlci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2dhbWVNYXN0ZXIuanMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9jb21wdXRlclRhcmdldGluZy5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIGBib2R5IHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBsaWdodGdyYXk7XG59XG5cbi5hbmltYXRlIHtcbiAgICAvKiBhbmltYXRpb246IDAuN3Mgc2xpZGUtaW4gMC43cyAzIGxpbmVhcjsgKi9cbiAgICBhbmltYXRpb24tbmFtZTogc2xpZGUtaW47XG4gICAgYW5pbWF0aW9uLWR1cmF0aW9uOiAwLjNzO1xuICAgIGFuaW1hdGlvbi1pdGVyYXRpb24tY291bnQ6IDM7XG59XG4gIFxuQGtleWZyYW1lcyBzbGlkZS1pbiB7XG4gICAgMCUge1xuICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDAuMjUpO1xuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTEwMDBweCk7XG4gICAgfVxuICAgIDgwJXtcbiAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgwLjI1KTtcbiAgICB9XG4gICAgMTAwJSB7XG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwKTtcbiAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSgxKTtcbiAgICB9XG59XG5cbnRoLCB0ZHtcbiAgICBtYXJnaW46IDA7XG4gICAgcGFkZGluZzogMDtcbiAgICBoZWlnaHQ6IDMycHg7XG4gICAgd2lkdGg6IDMycHg7XG59XG5cbnRkIHtcbiAgICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcbn1cblxuZGl2LmhpdCwgZGl2LnNoaXAge1xuICAgIG1hcmdpbjogMDtcbiAgICBwYWRkaW5nOiAwO1xuICAgIFxuICAgIGhlaWdodDogMTAwJTtcbiAgICB3aWR0aDogMTAwJTtcbn1cblxuZGl2LnNoaXAge1xuICAgIGJhY2tncm91bmQtY29sb3I6IGJsdWU7XG59XG5cbmRpdi5oaXQge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHJlZDtcbn1cblxuZGl2LmhpdC5zaGlwIHtcbiAgICBib3JkZXI6IDVweCBzb2xpZCBibHVlO1xufVxuXG50ZC5zaGlwIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBibHVlO1xufVxuXG50ZC5taXNzLCB0ZC5oaXQge1xuICAgIGJhY2tncm91bmQtY29sb3I6IHJlZDtcbn1cblxudGQuaGl0IHtcbiAgICBib3JkZXI6IDVweCBzb2xpZCBibHVlO1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG59XG5cbnRkLnNlbGVjdGVkIHtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0dXJxdW9pc2U7XG59XG5cbi50YWJsZUNvbnRhaW5lciB7XG4gICAgZGlzcGxheTogaW5saW5lLWdyaWQ7XG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgMWZyO1xuICAgIGdhcDogMTUwcHg7XG59XG5cblxuYnV0dG9uIHtcbiAgICBoZWlnaHQ6IDI1cHg7XG4gICAgd2lkdGg6IDgwcHg7XG59XG5cbmJ1dHRvbi5zdGFydCB7XG4gICAgaGVpZ2h0OjUwcHg7XG59XG5cbi5idXR0b25zQ29udGFpbmVyIHtcbmRpc3BsYXk6IGlubGluZS1ncmlkO1xuZ3JpZC10ZW1wbGF0ZS1yb3dzOiAxZnIgMWZyO1xuZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgMWZyIDFmciAxZnIgMWZyO1xuZ3JpZC10ZW1wbGF0ZS1hcmVhczpcbiAgICBcIi4gdXAgLiByb3RhdGUgc3RhcnRcIlxuICAgIFwibGVmdCBkb3duIHJpZ2h0IHJhbmRvbWl6ZSAgc3RhcnRcIlxufVxuXG4udXAge1xuZ3JpZC1hcmVhOiB1cDtcbn1cblxuLmxlZnQge1xuZ3JpZC1hcmVhOiBsZWZ0O1xufVxuXG4uZG93biB7XG5ncmlkLWFyZWE6IGRvd247XG59XG5cbi5yaWdodCB7XG5ncmlkLWFyZWE6IHJpZ2h0O1xufVxuXG4ucm90YXRlIHtcbmdyaWQtYXJlYTogcm90YXRlO1xufVxuXG4ucmFuZG9taXplIHtcbmdyaWQtYXJlYTogcmFuZG9taXplO1xufVxuXG4uc3RhcnQge1xuZ3JpZC1hcmVhOiBzdGFydDtcbn1cblxuLnJpZ2h0Q29udGFpbmVyIHtcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XG59XG5cbi5lcnJvckNvbnRhaW5lciB7XG4gICAgdmlzaWJpbGl0eTogaGlkZGVuO1xufVxuXG4uZXJyb3JUZXh0IHtcbiAgICB3aWR0aDogZml0LWNvbnRlbnQ7XG4gICAgcGFkZGluZzogNXB4IDJweDtcbiAgICBib3JkZXI6IDFweCBzb2xpZCByZWQ7XG59YCwgXCJcIix7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJ3ZWJwYWNrOi8vLi9zcmMvc3R5bGUuY3NzXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCJBQUFBO0lBQ0ksMkJBQTJCO0FBQy9COztBQUVBO0lBQ0ksNENBQTRDO0lBQzVDLHdCQUF3QjtJQUN4Qix3QkFBd0I7SUFDeEIsNEJBQTRCO0FBQ2hDOztBQUVBO0lBQ0k7UUFDSSxzQkFBc0I7UUFDdEIsOEJBQThCO0lBQ2xDO0lBQ0E7UUFDSSxzQkFBc0I7SUFDMUI7SUFDQTtRQUNJLHdCQUF3QjtRQUN4QixtQkFBbUI7SUFDdkI7QUFDSjs7QUFFQTtJQUNJLFNBQVM7SUFDVCxVQUFVO0lBQ1YsWUFBWTtJQUNaLFdBQVc7QUFDZjs7QUFFQTtJQUNJLHVCQUF1QjtBQUMzQjs7QUFFQTtJQUNJLFNBQVM7SUFDVCxVQUFVOztJQUVWLFlBQVk7SUFDWixXQUFXO0FBQ2Y7O0FBRUE7SUFDSSxzQkFBc0I7QUFDMUI7O0FBRUE7SUFDSSxxQkFBcUI7QUFDekI7O0FBRUE7SUFDSSxzQkFBc0I7QUFDMUI7O0FBRUE7SUFDSSxzQkFBc0I7QUFDMUI7O0FBRUE7SUFDSSxxQkFBcUI7QUFDekI7O0FBRUE7SUFDSSxzQkFBc0I7SUFDdEIsc0JBQXNCO0FBQzFCOztBQUVBO0lBQ0ksMkJBQTJCO0FBQy9COztBQUVBO0lBQ0ksb0JBQW9CO0lBQ3BCLDhCQUE4QjtJQUM5QixVQUFVO0FBQ2Q7OztBQUdBO0lBQ0ksWUFBWTtJQUNaLFdBQVc7QUFDZjs7QUFFQTtJQUNJLFdBQVc7QUFDZjs7QUFFQTtBQUNBLG9CQUFvQjtBQUNwQiwyQkFBMkI7QUFDM0IsMENBQTBDO0FBQzFDOzs7QUFHQTs7QUFFQTtBQUNBLGFBQWE7QUFDYjs7QUFFQTtBQUNBLGVBQWU7QUFDZjs7QUFFQTtBQUNBLGVBQWU7QUFDZjs7QUFFQTtBQUNBLGdCQUFnQjtBQUNoQjs7QUFFQTtBQUNBLGlCQUFpQjtBQUNqQjs7QUFFQTtBQUNBLG9CQUFvQjtBQUNwQjs7QUFFQTtBQUNBLGdCQUFnQjtBQUNoQjs7QUFFQTtJQUNJLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLGtCQUFrQjtJQUNsQixnQkFBZ0I7SUFDaEIscUJBQXFCO0FBQ3pCXCIsXCJzb3VyY2VzQ29udGVudFwiOltcImJvZHkge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiBsaWdodGdyYXk7XFxufVxcblxcbi5hbmltYXRlIHtcXG4gICAgLyogYW5pbWF0aW9uOiAwLjdzIHNsaWRlLWluIDAuN3MgMyBsaW5lYXI7ICovXFxuICAgIGFuaW1hdGlvbi1uYW1lOiBzbGlkZS1pbjtcXG4gICAgYW5pbWF0aW9uLWR1cmF0aW9uOiAwLjNzO1xcbiAgICBhbmltYXRpb24taXRlcmF0aW9uLWNvdW50OiAzO1xcbn1cXG4gIFxcbkBrZXlmcmFtZXMgc2xpZGUtaW4ge1xcbiAgICAwJSB7XFxuICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDAuMjUpO1xcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0xMDAwcHgpO1xcbiAgICB9XFxuICAgIDgwJXtcXG4gICAgICAgIHRyYW5zZm9ybTogc2NhbGUoMC4yNSk7XFxuICAgIH1cXG4gICAgMTAwJSB7XFxuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMCk7XFxuICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEpO1xcbiAgICB9XFxufVxcblxcbnRoLCB0ZHtcXG4gICAgbWFyZ2luOiAwO1xcbiAgICBwYWRkaW5nOiAwO1xcbiAgICBoZWlnaHQ6IDMycHg7XFxuICAgIHdpZHRoOiAzMnB4O1xcbn1cXG5cXG50ZCB7XFxuICAgIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrO1xcbn1cXG5cXG5kaXYuaGl0LCBkaXYuc2hpcCB7XFxuICAgIG1hcmdpbjogMDtcXG4gICAgcGFkZGluZzogMDtcXG4gICAgXFxuICAgIGhlaWdodDogMTAwJTtcXG4gICAgd2lkdGg6IDEwMCU7XFxufVxcblxcbmRpdi5zaGlwIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogYmx1ZTtcXG59XFxuXFxuZGl2LmhpdCB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJlZDtcXG59XFxuXFxuZGl2LmhpdC5zaGlwIHtcXG4gICAgYm9yZGVyOiA1cHggc29saWQgYmx1ZTtcXG59XFxuXFxudGQuc2hpcCB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IGJsdWU7XFxufVxcblxcbnRkLm1pc3MsIHRkLmhpdCB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHJlZDtcXG59XFxuXFxudGQuaGl0IHtcXG4gICAgYm9yZGVyOiA1cHggc29saWQgYmx1ZTtcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG59XFxuXFxudGQuc2VsZWN0ZWQge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0dXJxdW9pc2U7XFxufVxcblxcbi50YWJsZUNvbnRhaW5lciB7XFxuICAgIGRpc3BsYXk6IGlubGluZS1ncmlkO1xcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAxZnI7XFxuICAgIGdhcDogMTUwcHg7XFxufVxcblxcblxcbmJ1dHRvbiB7XFxuICAgIGhlaWdodDogMjVweDtcXG4gICAgd2lkdGg6IDgwcHg7XFxufVxcblxcbmJ1dHRvbi5zdGFydCB7XFxuICAgIGhlaWdodDo1MHB4O1xcbn1cXG5cXG4uYnV0dG9uc0NvbnRhaW5lciB7XFxuZGlzcGxheTogaW5saW5lLWdyaWQ7XFxuZ3JpZC10ZW1wbGF0ZS1yb3dzOiAxZnIgMWZyO1xcbmdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyIDFmciAxZnIgMWZyIDFmcjtcXG5ncmlkLXRlbXBsYXRlLWFyZWFzOlxcbiAgICBcXFwiLiB1cCAuIHJvdGF0ZSBzdGFydFxcXCJcXG4gICAgXFxcImxlZnQgZG93biByaWdodCByYW5kb21pemUgIHN0YXJ0XFxcIlxcbn1cXG5cXG4udXAge1xcbmdyaWQtYXJlYTogdXA7XFxufVxcblxcbi5sZWZ0IHtcXG5ncmlkLWFyZWE6IGxlZnQ7XFxufVxcblxcbi5kb3duIHtcXG5ncmlkLWFyZWE6IGRvd247XFxufVxcblxcbi5yaWdodCB7XFxuZ3JpZC1hcmVhOiByaWdodDtcXG59XFxuXFxuLnJvdGF0ZSB7XFxuZ3JpZC1hcmVhOiByb3RhdGU7XFxufVxcblxcbi5yYW5kb21pemUge1xcbmdyaWQtYXJlYTogcmFuZG9taXplO1xcbn1cXG5cXG4uc3RhcnQge1xcbmdyaWQtYXJlYTogc3RhcnQ7XFxufVxcblxcbi5yaWdodENvbnRhaW5lciB7XFxuICAgIHZpc2liaWxpdHk6IGhpZGRlbjtcXG59XFxuXFxuLmVycm9yQ29udGFpbmVyIHtcXG4gICAgdmlzaWJpbGl0eTogaGlkZGVuO1xcbn1cXG5cXG4uZXJyb3JUZXh0IHtcXG4gICAgd2lkdGg6IGZpdC1jb250ZW50O1xcbiAgICBwYWRkaW5nOiA1cHggMnB4O1xcbiAgICBib3JkZXI6IDFweCBzb2xpZCByZWQ7XFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTtcblxuICAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKTtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIik7XG4gICAgICB9XG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cbiAgICAgIGNvbnRlbnQgKz0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcbiAgICAgIGlmIChuZWVkTGF5ZXIpIHtcbiAgICAgICAgY29udGVudCArPSBcIn1cIjtcbiAgICAgIH1cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbVs0XSkge1xuICAgICAgICBjb250ZW50ICs9IFwifVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTtcblxuICAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgayA9IDA7IGsgPCB0aGlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgIHZhciBpZCA9IHRoaXNba11bMF07XG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIF9rID0gMDsgX2sgPCBtb2R1bGVzLmxlbmd0aDsgX2srKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfa10pO1xuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChtZWRpYSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChpdGVtWzFdLCBcIn1cIik7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoc3VwcG9ydHMpIHtcbiAgICAgICAgaWYgKCFpdGVtWzRdKSB7XG4gICAgICAgICAgaXRlbVs0XSA9IFwiXCIuY29uY2F0KHN1cHBvcnRzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAc3VwcG9ydHMgKFwiLmNvbmNhdChpdGVtWzRdLCBcIikge1wiKS5jb25jYXQoaXRlbVsxXSwgXCJ9XCIpO1xuICAgICAgICAgIGl0ZW1bNF0gPSBzdXBwb3J0cztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXTtcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuZnVuY3Rpb24gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcikge1xuICB2YXIgcmVzdWx0ID0gLTE7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpIHtcbiAgdmFyIGlkQ291bnRNYXAgPSB7fTtcbiAgdmFyIGlkZW50aWZpZXJzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG4gIHZhciB1cGRhdGVyID0gZnVuY3Rpb24gdXBkYXRlcihuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwICYmIG5ld09iai5zdXBwb3J0cyA9PT0gb2JqLnN1cHBvcnRzICYmIG5ld09iai5sYXllciA9PT0gb2JqLmxheWVyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG4gICAgICAgIHN0eWxlc0luRE9NLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG5cbiAgICAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKGVsZW1lbnQsIG9wdGlvbnMuYXR0cmlidXRlcyk7XG4gIG9wdGlvbnMuaW5zZXJ0KGVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG4gIHJldHVybiBlbGVtZW50O1xufVxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKSB7XG4gIHZhciBjc3MgPSBcIlwiO1xuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cbiAgdmFyIG5lZWRMYXllciA9IHR5cGVvZiBvYmoubGF5ZXIgIT09IFwidW5kZWZpbmVkXCI7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cbiAgY3NzICs9IG9iai5jc3M7XG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG4gIHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH1cblxuICAvLyBGb3Igb2xkIElFXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cbiAgb3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlRWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbn1cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoKSB7fSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9XG4gIHZhciBzdHlsZUVsZW1lbnQgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlRWxlbWVudCwgb3B0aW9ucywgb2JqKTtcbiAgICB9LFxuICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgICAgcmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlRWxlbWVudCk7XG4gICAgfVxuICB9O1xufVxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5uYyA9IHVuZGVmaW5lZDsiLCJjb25zdCBkaXNwbGF5U2hpcHMgPSAoc2hpcEdyaWQsIHRhYmxlKSA9PiB7XG4gICAgZm9yKGxldCByb3cgPSAwOyByb3cgPCAxMDsgcm93Kyspe1xuICAgICAgICBmb3IobGV0IGNvbCA9IDA7IGNvbCA8IDEwOyBjb2wrKyl7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKHNoaXBHcmlkW3Jvd11bY29sXSk7XG4gICAgICAgICAgICBpZihzaGlwR3JpZFtyb3ddW2NvbF0pe1xuICAgICAgICAgICAgICAgIGxldCB0YWJsZVJvdyA9IHRhYmxlLmNoaWxkcmVuW3JvdyArIDFdO1xuICAgICAgICAgICAgICAgIC8vY29uc29sZS5sb2coJ2hlbGxvJyk7XG4gICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyh0YWJsZVJvdyk7XG4gICAgICAgICAgICAgICAgbGV0IGNlbGwgPSB0YWJsZVJvdy5jaGlsZHJlbltjb2wgKyAxXTtcbiAgICAgICAgICAgICAgICAvL2NlbGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZChcInNoaXBcIilcbiAgICAgICAgICAgICAgICAvL215RGl2LnRleHRDb250ZW50ID0gXCJzXCI7XG4gICAgICAgICAgICAgICAgLy9jZWxsLnRleHRDb250ZW50ID0gXCJhc2RmYXNcIjtcbiAgICAgICAgICAgICAgICAvL2NlbGwuYXBwZW5kQ2hpbGQobXlEaXYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5jb25zdCBtYXJrQXR0YWNrID0gKGNsaWNrLCBzaGlwUHJlc2VudCkgPT4ge1xuICBjb25zb2xlLmxvZyhjbGljay50YXJnZXQpO1xuICBsZXQgbXlURCA9IGNsaWNrLnRhcmdldDtcbiAgLyogbGV0IG15RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7ICovXG4gIG15VEQuY2xhc3NMaXN0LmFkZCgnYW5pbWF0ZScpO1xuICBpZihzaGlwUHJlc2VudCl7XG4gICAgbXlURC5jbGFzc0xpc3QuYWRkKCdoaXQnKTtcbiAgfSBlbHNlIHtcbiAgICBteVRELmNsYXNzTGlzdC5hZGQoJ21pc3MnKTtcbiAgfVxuICAvKiBjbGljay50YXJnZXQuYXBwZW5kQ2hpbGQobXlEaXYpOyAqL1xufVxuXG5jb25zdCB2aWV3Q29udHJvbGxlciA9ICgpID0+IHtcbiAgbGV0IHNoaXBUQm9keTtcbiAgbGV0IGF0dGFja0dyaWQ7XG4gIGxldCBlcnJvckNvbnRhaW5lcjtcbiAgbGV0IGVycm9yTWVzc2FnZTtcbiAgbGV0IG1zZ09uZTtcbiAgbGV0IG1zZ1R3bztcbiAgbGV0IHNoaXBTZWxlY3RvcjtcbiAgbGV0IGJ1dHRvblN1aXRlO1xuICBsZXQgZ2FtZU1hc3RlcjtcblxuICBjb25zdCBjbGVhckV4aXN0aW5nSGlnaGxpZ2h0cyA9ICgpID0+IHtcbiAgICBmb3IobGV0IHJvdyA9IDA7IHJvdyA8IDEwOyByb3crKyl7XG4gICAgICBmb3IobGV0IGNvbCA9IDA7IGNvbCA8IDEwOyBjb2wrKyl7XG4gICAgICAgIGdldFRhYmxlQ2VsbChyb3csIGNvbCkuY2xhc3NMaXN0LnJlbW92ZSgnc2VsZWN0ZWQnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjb25zdCBjcmVhdGVIaWdobGlnaHRpbmcgPSAoc2hpcEdyaWRXcmFwcGVyKSA9PiB7XG4gICAgc2hpcFNlbGVjdG9yLm9uY2hhbmdlID0gKGV2ZW50KSA9PiB7XG4gICAgICBjbGVhckV4aXN0aW5nSGlnaGxpZ2h0cygpO1xuXG5cbiAgICAgIGxldCBzaGlwSUQgPSBzaGlwU2VsZWN0b3IudmFsdWU7XG4gICAgICBsZXQgY29vcmRpbmF0ZXMgPSBzaGlwR3JpZFdyYXBwZXIuZ2V0U2hpcExvY2F0aW9uKHNoaXBJRCk7XG4gICAgICBmb3IobGV0IGNvb3JkIG9mIGNvb3JkaW5hdGVzKXtcbiAgICAgICAgY29uc29sZS5sb2coJ2Nvb3JkczonKTtcbiAgICAgICAgY29uc29sZS5sb2coY29vcmQpOy8vLy8vLy8vL1xuICAgICAgICBsZXQgbXlURCA9IGdldFRhYmxlQ2VsbChjb29yZC5yb3csIGNvb3JkLmNvbCk7XG4gICAgICAgIGNvbnNvbGUubG9nKCdteVREJyk7XG4gICAgICAgIGNvbnNvbGUubG9nKG15VEQpOy8vLy8vLy8vL1xuICAgICAgICBteVRELmNsYXNzTGlzdC5hZGQoJ3NlbGVjdGVkJylcbiAgICAgIH1cbiAgICAgIGdldFRhYmxlQ2VsbFxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGRpc2FibGVNb3ZlbWVudEJ0bnMgPSAoKSA9PiB7XG4gICAgYnV0dG9uU3VpdGUudXAuZGlzYWJsZWQgPSB0cnVlO1xuICAgIGJ1dHRvblN1aXRlLmxlZnQuZGlzYWJsZWQgPSB0cnVlO1xuICAgIGJ1dHRvblN1aXRlLmRvd24uZGlzYWJsZWQgPSB0cnVlO1xuICAgIGJ1dHRvblN1aXRlLnJpZ2h0LmRpc2FibGVkID0gdHJ1ZTtcbiAgICBidXR0b25TdWl0ZS5yb3RhdGUuZGlzYWJsZWQgPSB0cnVlO1xuICAgIGJ1dHRvblN1aXRlLnJhbmRvbWl6ZS5kaXNhYmxlZCA9IHRydWU7XG4gICAgYnV0dG9uU3VpdGUuc3RhcnQuZGlzYWJsZWQgPSB0cnVlO1xuICAgIHNoaXBTZWxlY3Rvci5kaXNhYmxlZCA9IHRydWU7XG4gIH1cblxuICBjb25zdCBjbGVhclNoaXBEaXNwbGF5ID0gKCkgPT4ge1xuICAgIGZvcihsZXQgcm93ID0gMDsgcm93IDwgMTA7IHJvdysrKXtcbiAgICAgIGZvcihsZXQgY29sID0gMDsgY29sIDwgMTA7IGNvbCsrKXtcbiAgICAgICAgbGV0IGNlbGwgPSBnZXRUYWJsZUNlbGwocm93LCBjb2wpO1xuICAgICAgICBjZWxsLmNsYXNzTGlzdC5yZW1vdmUoJ3NoaXAnKTtcbiAgICAgICAgY2VsbC5jbGFzc0xpc3QucmVtb3ZlKCdzZWxlY3RlZCcpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGxvY2tvdXRBdHRhY2tHcmlkID0gKCkgPT4ge1xuICAgIGZvcihsZXQgcm93ID0gMDsgcm93IDwgMTA7IHJvdysrKXtcbiAgICAgICAgbGV0IHRhYmxlUm93ID0gYXR0YWNrR3JpZC5jaGlsZHJlbltyb3cgKyAxXTtcbiAgICAgICAgZm9yKGxldCBjb2wgPSAwOyBjb2wgPCAxMDsgY29sKyspe1xuICAgICAgICAgICAgbGV0IGNlbGwgPSB0YWJsZVJvdy5jaGlsZHJlbltjb2wgKyAxXTtcbiAgICAgICAgICAgIGNlbGwub25jbGljayA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjb25zdCBtYWtlQXR0YWNrR3JpZENsaWNrYWJsZSA9IChwcm9jZXNzVXNlcklucHV0KSA9PiB7XG4gICAgZm9yKGxldCByb3cgPSAwOyByb3cgPCAxMDsgcm93Kyspe1xuICAgICAgICBmb3IobGV0IGNvbCA9IDA7IGNvbCA8IDEwOyBjb2wrKyl7XG4gICAgICAgICAgICBsZXQgdGFibGVSb3cgPSBhdHRhY2tHcmlkLmNoaWxkcmVuW3JvdyArIDFdO1xuICAgICAgICAgICAgbGV0IGNlbGwgPSB0YWJsZVJvdy5jaGlsZHJlbltjb2wgKyAxXTtcbiAgICAgICAgICAgIGNlbGwub25jbGljayA9IChjbGljaykgPT4ge1xuICAgICAgICAgICAgICBwcm9jZXNzVXNlcklucHV0KHJvdywgY29sLCBjbGljayk7XG4gICAgICAgICAgICAgIC8vY29uc29sZS5sb2coYG1hcmtpbmcgdGhpcyBmcm9tIG9uY2xpY2sgJHt0aGlzfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICB9XG5cbiAgY29uc3QgY2xlYXJTaGlwU2VsZWN0b3IgPSAoKSA9PiB7XG4gICAgc2hpcFNlbGVjdG9yLnZhbHVlID0gJ25vbmUnO1xuICB9XG5cbiAgY29uc3QgbG9hZEJ1dHRvbkZ1bmN0aW9uYWxpdHkgPSAocHJvY2Vzc1VzZXJJbnB1dCwgc2hpcEdyaWQpID0+IHtcbiAgICBidXR0b25TdWl0ZS5zdGFydC5vbmNsaWNrID0gKCkgPT4ge1xuICAgICAgbWFrZUF0dGFja0dyaWRDbGlja2FibGUocHJvY2Vzc1VzZXJJbnB1dCk7XG4gICAgICBkaXNhYmxlTW92ZW1lbnRCdG5zKCk7XG4gICAgICBjbGVhckV4aXN0aW5nSGlnaGxpZ2h0cygpO1xuXG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucmlnaHRDb250YWluZXInKS5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmJ1dHRvbkNvbnRhaW5lcicpLnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgICAgIFxuICAgICAgbXNnT25lLnRleHRDb250ZW50ID0gJ0F0dGFjayB5b3VyIG9wcG9uZW50IGJ5IGNsaWNraW5nIGEgY2VsbCBvbiB0aGVpciBncmlkLic7XG4gICAgfVxuICAgIGJ1dHRvblN1aXRlLnJhbmRvbWl6ZS5vbmNsaWNrID0gKCkgPT4ge1xuICAgICAgZ2FtZU1hc3Rlci5yYW5kb21pemVQbGF5ZXJCb2FyZCgpO1xuICAgICAgY2xlYXJTaGlwRGlzcGxheSgpO1xuICAgICAgY2xlYXJTaGlwU2VsZWN0b3IoKTtcbiAgICAgIGRpc3BsYXlTaGlwcyhnYW1lTWFzdGVyLmdldFNoaXBHcmlkKCksIHNoaXBUQm9keSlcbiAgICB9XG4gICAgY3JlYXRlSGlnaGxpZ2h0aW5nKHNoaXBHcmlkKTtcbiAgfVxuXG4gIGNvbnN0IHVwZGF0ZVNoaXBWaWV3ID0gKCkgPT4ge1xuXG4gICAgaWYoIWdhbWVNYXN0ZXIuZ2V0UG9zc2libGVNb3ZlKCkpe1xuICAgICAgY29uc29sZS5sb2coJ25vIG1vdmUgZXhlY3R1ZWQtIGV4aXRpbmcgb3V0IG9mIHVwZGF0ZSBzaGlwIHZpZXcnKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgbGV0IGxvY2F0aW9uQ2hhbmdlID0gZ2FtZU1hc3Rlci5nZXRMb2NhdGlvbkNoYW5nZSgpO1xuICAgIGZvcihsZXQgbG9jYXRpb24gb2YgbG9jYXRpb25DaGFuZ2Uub2xkTG9jYXRpb25zKXtcbiAgICAgIGxldCBjZWxsID0gZ2V0VGFibGVDZWxsKGxvY2F0aW9uLnJvdywgbG9jYXRpb24uY29sKTtcbiAgICAgIGNlbGwuY2xhc3NMaXN0LnJlbW92ZSgnc2hpcCcpO1xuICAgICAgY2VsbC5jbGFzc0xpc3QucmVtb3ZlKCdzZWxlY3RlZCcpO1xuICAgIH1cbiAgICBcbiAgICBmb3IobGV0IGxvY2F0aW9uIG9mIGxvY2F0aW9uQ2hhbmdlLm5ld0xvY2F0aW9ucyl7XG4gICAgICBsZXQgY2VsbCA9IGdldFRhYmxlQ2VsbChsb2NhdGlvbi5yb3csIGxvY2F0aW9uLmNvbCk7XG4gICAgICBjZWxsLmNsYXNzTGlzdC5hZGQoJ3NoaXAnKTtcbiAgICAgIGNlbGwuY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCB1cGRhdGVFcnJvck1zZyA9ICgpID0+IHtcbiAgICBsZXQgZXJyb3JDb2RlID0gZ2FtZU1hc3Rlci5nZXRFcnJvck1zZygpO1xuICAgIGNvbnNvbGUubG9nKGVycm9yQ29kZSk7XG4gICAgaWYoZXJyb3JDb2RlID09PSAnb3V0T2ZCb3VuZHMnKXtcbiAgICAgIGVycm9yTWVzc2FnZS50ZXh0Q29udGVudCA9ICdDYW5ub3QgbW92ZSBzaGlwcyBvdXQgb2YgYm91bmRzLic7XG4gICAgICBlcnJvckNvbnRhaW5lci5zdHlsZS52aXNpYmlsaXR5ID0gJ3Zpc2libGUnO1xuICAgIH0gZWxzZSBpZihlcnJvckNvZGUgPT09ICdzcGFjZVZpb2xhdGlvbicpe1xuICAgICAgZXJyb3JNZXNzYWdlLnRleHRDb250ZW50ID0gJ0Nhbm5vdCBtb3ZlIHNoaXBzIHRvIGNsb3NlLiBBIG1pbmltdW0gb2Ygb25lIGVtcHR5IHNwYWNlIGJldHdlZW4gc2hpcHMgaXMgcmVxdWlyZWQuJztcbiAgICAgIGVycm9yQ29udGFpbmVyLnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVycm9yTWVzc2FnZS50ZXh0Q29udGVudCA9ICcnO1xuICAgICAgZXJyb3JDb250YWluZXIuc3R5bGUudmlzaWJpbGl0eSA9ICdoaWRkZW4nO1xuICAgIH1cbiAgICBcbiAgfVxuXG4gIGNvbnN0IGxvYWRNb3ZlbWVudEJ1dHRvbkZ1bmN0aW9uYWxpdHkgPSAoKSA9PiB7XG4gICAgYnV0dG9uU3VpdGUudXAub25jbGljayA9ICgpID0+IHtcbiAgICAgIGdhbWVNYXN0ZXIubW92ZVNoaXAoc2hpcFNlbGVjdG9yLnZhbHVlLCAndXAnKTtcbiAgICAgIHVwZGF0ZVNoaXBWaWV3KCk7XG4gICAgICB1cGRhdGVFcnJvck1zZygpO1xuICAgIH1cbiAgICBidXR0b25TdWl0ZS5kb3duLm9uY2xpY2sgPSAoKSA9PiB7XG4gICAgICBnYW1lTWFzdGVyLm1vdmVTaGlwKHNoaXBTZWxlY3Rvci52YWx1ZSwgJ2Rvd24nKTtcbiAgICAgIHVwZGF0ZVNoaXBWaWV3KCk7XG4gICAgICB1cGRhdGVFcnJvck1zZygpO1xuICAgIH1cbiAgICBidXR0b25TdWl0ZS5yaWdodC5vbmNsaWNrID0gKCkgPT4ge1xuICAgICAgZ2FtZU1hc3Rlci5tb3ZlU2hpcChzaGlwU2VsZWN0b3IudmFsdWUsICdyaWdodCcpO1xuICAgICAgdXBkYXRlU2hpcFZpZXcoKTtcbiAgICAgIHVwZGF0ZUVycm9yTXNnKCk7XG4gICAgfVxuICAgIGJ1dHRvblN1aXRlLmxlZnQub25jbGljayA9ICgpID0+IHtcbiAgICAgIGdhbWVNYXN0ZXIubW92ZVNoaXAoc2hpcFNlbGVjdG9yLnZhbHVlLCAnbGVmdCcpO1xuICAgICAgdXBkYXRlU2hpcFZpZXcoKTtcbiAgICAgIHVwZGF0ZUVycm9yTXNnKCk7XG4gICAgfVxuICAgIGJ1dHRvblN1aXRlLnJvdGF0ZS5vbmNsaWNrID0gKCkgPT4ge1xuICAgICAgZ2FtZU1hc3Rlci5yb3RhdGVTaGlwKHNoaXBTZWxlY3Rvci52YWx1ZSk7XG4gICAgICB1cGRhdGVTaGlwVmlldygpO1xuICAgICAgdXBkYXRlRXJyb3JNc2coKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBsb2FkQnV0dG9uU3VpdGUgPSAoKSA9PiB7XG4gICAgYnV0dG9uU3VpdGUgPSB7fTtcbiAgICBidXR0b25TdWl0ZS51cCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy51cCcpO1xuICAgIGJ1dHRvblN1aXRlLmxlZnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubGVmdCcpO1xuICAgIGJ1dHRvblN1aXRlLmRvd24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZG93bicpO1xuICAgIGJ1dHRvblN1aXRlLnJpZ2h0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnJpZ2h0Jyk7XG4gICAgYnV0dG9uU3VpdGUucm90YXRlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnJvdGF0ZScpO1xuICAgIGJ1dHRvblN1aXRlLnJhbmRvbWl6ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5yYW5kb21pemUnKTtcbiAgICBidXR0b25TdWl0ZS5zdGFydCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zdGFydCcpO1xuICB9XG5cbiAgY29uc3QgbG9hZEVsZW1lbnRzID0gKCkgPT4ge1xuICAgIHNoaXBUQm9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zaGlwR3JpZCcpO1xuICAgIGF0dGFja0dyaWQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYXR0YWNrR3JpZCcpO1xuICAgIGVycm9yTWVzc2FnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5lcnJvclRleHQnKTtcbiAgICBlcnJvckNvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5lcnJvckNvbnRhaW5lcicpO1xuICAgIG1zZ09uZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tc2dPbmUnKTtcbiAgICBtc2dUd28gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubXNnVHdvJyk7XG4gICAgc2hpcFNlbGVjdG9yID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3NoaXAtc2VsZWN0b3InKTtcbiAgICBsb2FkQnV0dG9uU3VpdGUoKTtcbiAgICBjcmVhdGVIaWdobGlnaHRpbmcoKTtcbiAgfVxuXG4gIGNvbnN0IGxvYWRHYW1lTWFzdGVyID0gKGdhbWUpID0+IHtcbiAgICBnYW1lTWFzdGVyID0gZ2FtZTtcbiAgfVxuXG4gIGNvbnN0IHVwZGF0ZU1zZ09uZSA9IChyb3csIGNvbCwgcmVzdWx0KSA9PiB7XG4gICAgbGV0IG1zZztcbiAgICBpZihyZXN1bHQgPT09ICdtaXNzJyl7XG4gICAgICBtc2cgPSBgWW91IGZpcmUgYXQgKCR7cm93fSwgJHtjb2x9KSBidXQgaGl0IG5vdGhpbmcuYDtcbiAgICB9IGVsc2UgaWYgKHJlc3VsdCA9PT0gJ2hpdCcpe1xuICAgICAgbXNnID0gYFlvdSBmaXJlIGF0ICgke3Jvd30sICR7Y29sfSkgYW5kIHNjb3JlIGEgaGl0LmA7XG4gICAgfSBlbHNlIGlmIChyZXN1bHQgPT09ICdzdW5rJyl7XG4gICAgICBtc2cgPSBgWW91IGZpcmUgYXQgKCR7cm93fSwgJHtjb2x9KSwgc2NvcmUgYSBoaXQsIGFuZCBzaW5rIGEgc2hpcC5gO1xuICAgIH0gZWxzZSBpZiAocmVzdWx0ID09PSAnbG9zcycpe1xuICAgICAgbXNnID0gYFlvdXIgb3Bwb25lbnQgaGFzIHN1bmsgYWxsIHlvdXIgc2hpcHMuIFlvdSBsb3NlIHRoZSBtYXRjaC5gO1xuICAgIH1cbiAgICBtc2dPbmUudGV4dENvbnRlbnQgPSBtc2c7XG4gIH1cblxuICBjb25zdCB1cGRhdGVNc2dUd28gPSAocm93LCBjb2wsIHJlc3VsdCkgPT4ge1xuICAgIGxldCBtc2c7XG4gICAgaWYocmVzdWx0ID09PSAnbWlzcycpe1xuICAgICAgbXNnID0gYFlvdXIgb3Bwb25lbnQgZmlyZXMgYXQgKCR7cm93fSwgJHtjb2x9KSBidXQgaGl0cyBub3RoaW5nLmA7XG4gICAgfSBlbHNlIGlmIChyZXN1bHQgPT09ICdoaXQnKXtcbiAgICAgIG1zZyA9IGBZb3VyIG9wcG9uZW50IGZpcmVzIGF0ICgke3Jvd30sICR7Y29sfSkgYW5kIHNjb3JlcyBhIGhpdC5gO1xuICAgIH0gZWxzZSBpZiAocmVzdWx0ID09PSAnc3Vuaycpe1xuICAgICAgbXNnID0gYFlvdXIgb3Bwb25lbnQgZmlyZXMgYXQgKCR7cm93fSwgJHtjb2x9KSwgc2NvcmVzIGEgaGl0LCBhbmQgc2lua3MgYSBzaGlwLmA7XG4gICAgfSBlbHNlIGlmIChyZXN1bHQgPT09ICd3aW4nKXtcbiAgICAgIG1zZyA9IGBZb3UgaGF2ZSBzdW5rIGFsbCB5b3VyIG9wcG9uZW50J3Mgc2hpcHMgYW5kIHdvbiFgO1xuICAgIH1cbiAgICBtc2dUd28udGV4dENvbnRlbnQgPSBtc2c7XG4gIH1cblxuICBjb25zdCBzZXRVcE1haW4gPSAoY29udGFpbmVyLCBnYW1lLCBwcm9jZXNzVXNlcklucHV0KSA9PiB7XG4gICAgLyogc2hpcFRCb2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNoaXBHcmlkJyk7XG4gICAgYXR0YWNrR3JpZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hdHRhY2tHcmlkJyk7ICovXG4gICAgZGlzcGxheVNoaXBzKGdhbWUuZ2V0U2hpcEdyaWQoKSwgc2hpcFRCb2R5KVxuICAgIC8qIG1ha2VBdHRhY2tHcmlkQ2xpY2thYmxlKGF0dGFja0dyaWQsIHByb2Nlc3NVc2VySW5wdXQpOyAqL1xuICB9XG5cbiAgY29uc3Qgc2V0VXBWaWV3ID0gKGdhbWUsIHByb2Nlc3NVc2VySW5wdXQpID0+IHtcbiAgICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2NvbnRlbnRcIik7XG4gICAgXG4gICAgc2V0VXBNYWluKGNvbnRhaW5lciwgZ2FtZSwgcHJvY2Vzc1VzZXJJbnB1dCk7XG4gIH1cblxuICBjb25zdCBzZXRVcCA9IChnYW1lLCBwcm9jZXNzVXNlcklucHV0KSA9PiB7XG4gICAgbG9hZEVsZW1lbnRzKCk7XG4gICAgbG9hZEdhbWVNYXN0ZXIoZ2FtZSk7XG4gICAgbG9hZEJ1dHRvbkZ1bmN0aW9uYWxpdHkocHJvY2Vzc1VzZXJJbnB1dCwgZ2FtZS5nZXRTaGlwR3JpZFdyYXBwZXIoKSk7XG4gICAgbG9hZE1vdmVtZW50QnV0dG9uRnVuY3Rpb25hbGl0eSgpO1xuICAgIHNldFVwVmlldyhnYW1lLCBwcm9jZXNzVXNlcklucHV0KTtcbiAgfVxuICBjb25zdCBnZXRUYWJsZUNlbGwgPSAocm93LCBjb2wpID0+IHtcbiAgICBsZXQgdGFibGVSb3cgPSBzaGlwVEJvZHkuY2hpbGRyZW5bcm93ICsgMV07XG4gICAgbGV0IGNlbGwgPSB0YWJsZVJvdy5jaGlsZHJlbltjb2wgKyAxXTtcbiAgICByZXR1cm4gY2VsbDtcbiAgfVxuICBjb25zdCBtYXJrQ29tcHV0ZXJBdHRhY2sgPSAocm93LCBjb2wpID0+IHtcbiAgICBsZXQgbXlURCA9IGdldFRhYmxlQ2VsbChyb3csIGNvbCk7XG5cbiAgICBpZihnYW1lTWFzdGVyLmlzU2hpcFByZXNlbnRBdChyb3csIGNvbCwgJ3BsYXllcicpKXtcbiAgICAgIG15VEQuY2xhc3NMaXN0LmFkZCgnaGl0Jyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG15VEQuY2xhc3NMaXN0LmFkZCgnbWlzcycpO1xuICAgIH1cbiAgICBteVRELmNsYXNzTGlzdC5hZGQoJ2FuaW1hdGUnKVxuICB9XG5cbiAgcmV0dXJuIHsgXG4gICAgc2V0VXAsIFxuICAgIHNldFVwVmlldywgXG4gICAgbWFya0NvbXB1dGVyQXR0YWNrLCBcbiAgICB1cGRhdGVNc2dPbmUsIFxuICAgIHVwZGF0ZU1zZ1R3byxcbiAgICB1cGRhdGVTaGlwVmlldyxcbiAgICBsb2Nrb3V0QXR0YWNrR3JpZCxcbiAgICBtYWtlQXR0YWNrR3JpZENsaWNrYWJsZVxuICAgfTtcbn1cblxuZXhwb3J0IHsgXG4gICAgdmlld0NvbnRyb2xsZXIsXG4gICAgbWFya0F0dGFjayxcbn07XG4iLCJjb25zdCBzaGlwRmFjdG9yeSA9IChsZW4sIHNoaXBJRCA9J25vSUQnLCBkaXIgPSAnc291dGgnKSA9PiB7XG4gICAgY29uc3QgaWQgPSBzaGlwSUQ7XG4gICAgY29uc3QgbGVuZ3RoID0gbGVuO1xuICAgIGxldCBkaXJlY3Rpb24gPSBkaXI7XG4gICAgbGV0IGhpdHNTdXN0YWluZWQgPSAwO1xuICAgIGxldCBzdW5rID0gZmFsc2U7XG5cbiAgICBjb25zdCBnZXRIaXRzU3VzdGFpbmVkID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gaGl0c1N1c3RhaW5lZDtcbiAgICB9XG4gICAgY29uc3QgaGl0ID0gKCkgPT4ge1xuICAgICAgICAvL2NvbnNvbGUubG9nKCdoaXQnKTtcbiAgICAgICAgaGl0c1N1c3RhaW5lZCsrO1xuICAgICAgICBpZihoaXRzU3VzdGFpbmVkID09PSBsZW5ndGgpe1xuICAgICAgICAgICAgc3VuayA9IHRydWU7XG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKCdzdW5rJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3Qgc2V0RGlyZWN0aW9uID0gKG5ld0RpcmVjdGlvbikgPT4ge1xuICAgICAgICBkaXJlY3Rpb24gPSBuZXdEaXJlY3Rpb247XG4gICAgfVxuICAgIGNvbnN0IGlzU3VuayA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHN1bms7XG4gICAgfVxuICAgIGNvbnN0IGdldExlbmd0aCA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICB9XG4gICAgY29uc3QgZ2V0RGlyZWN0aW9uID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gZGlyZWN0aW9uO1xuICAgIH1cbiAgICBjb25zdCBnZXRJRCA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIGlkO1xuICAgIH1cbiAgICByZXR1cm4geyBcbiAgICAgICAgZ2V0SGl0c1N1c3RhaW5lZCxcbiAgICAgICAgaGl0LFxuICAgICAgICBzZXREaXJlY3Rpb24sXG4gICAgICAgIGlzU3VuayxcbiAgICAgICAgZ2V0TGVuZ3RoLFxuICAgICAgICBnZXREaXJlY3Rpb24sXG4gICAgICAgIGdldElEIFxuICAgIH07XG59XG5cbmV4cG9ydCB7XG4gICAgc2hpcEZhY3Rvcnlcbn0iLCJpbXBvcnQge1xuICAgIHNoaXBGYWN0b3J5XG59IGZyb20gJy4vc2hpcEZhY3RvcnknO1xuaW1wb3J0IHtcbiAgICB0cmFmZmljQ29udHJvbGxlckZhY3Rvcnlcbn0gZnJvbSAnLi90cmFmZmljQ29udHJvbGxlcic7XG5cbmNvbnN0IHNoaXBHcmlkRmFjdG9yeSA9ICgpID0+IHtcbiAgICBjb25zdCBzaGlwR3JpZCA9IEFycmF5KDEwKS5maWxsKCkubWFwKCgpID0+IEFycmF5KDEwKS5maWxsKG51bGwpKTtcbiAgICBjb25zdCBzaGlwQXJyID0gW107XG4gICAgY29uc3Qgc2hpcExvY2F0aW9ucyA9IHt9O1xuICAgIGNvbnN0IHRyYWZmaWNDb250cm9sbGVyID0gdHJhZmZpY0NvbnRyb2xsZXJGYWN0b3J5KHNoaXBHcmlkLCBzaGlwTG9jYXRpb25zLCBzaGlwQXJyKTtcbiAgICBsZXQgb3V0Y29tZSA9ICcnO1xuXG4gICAgY29uc3QgaW5Cb3VuZHMgPSAocm93LCBjb2wpID0+IHtcbiAgICAgICAgcmV0dXJuIHJvdyA+PSAwICYmIHJvdyA8IDEwICYmIGNvbCA+PSAwICYmIGNvbCA8IDEwO1xuICAgIH1cbiAgICBcbiAgICBjb25zdCBpc1ZhbGlkU2hpcFBsYWNlbWVudCA9IChzaGlwLCByb3csIGNvbCkgPT4ge1xuICAgICAgICBsZXQgcm93TW9kID0gc2hpcC5nZXREaXJlY3Rpb24oKSA9PT0gJ3NvdXRoJyA/IDEgOiAwO1xuICAgICAgICBsZXQgY29sTW9kID0gc2hpcC5nZXREaXJlY3Rpb24oKSA9PT0gJ2Vhc3QnID8gMSA6IDA7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBzaGlwLmdldExlbmd0aCgpOyBpKyspe1xuICAgICAgICAgICAgaWYoIWluQm91bmRzKHJvdywgY29sKSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNoaXBHcmlkW3Jvd11bY29sXSAhPSBudWxsKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByb3cgPSByb3cgKyAocm93TW9kKTtcbiAgICAgICAgICAgIGNvbCA9IGNvbCArIChjb2xNb2QpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBcbiAgICBjb25zdCBwbGFjZVNoaXAgPSAoc2hpcCwgcm93LCBjb2wpID0+IHtcblxuICAgICAgICBpZighaXNWYWxpZFNoaXBQbGFjZW1lbnQoc2hpcCwgcm93LCBjb2wpKXtcbiAgICAgICAgICAgIHRyYWZmaWNDb250cm9sbGVyLnByaW50R3JpZChzaGlwR3JpZCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgRGlyZWN0aW9uOiAke3NoaXAuZ2V0RGlyZWN0aW9uKCl9YCk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBwbGFjZSBzaGlwICR7c2hpcC5nZXRJRCgpfSBhdCByb3c6ICR7cm93fSwgY29sOiAke2NvbH1gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vc2hpcEFyci5wdXNoKHNoaXApO1xuICAgICAgICBzaGlwTG9jYXRpb25zW3NoaXAuZ2V0SUQoKV0gPSBbXTtcblxuICAgICAgICBsZXQgcm93TW9kID0gc2hpcC5nZXREaXJlY3Rpb24oKSA9PT0gJ3NvdXRoJyA/IDEgOiAwO1xuICAgICAgICBsZXQgY29sTW9kID0gc2hpcC5nZXREaXJlY3Rpb24oKSA9PT0gJ2Vhc3QnID8gMSA6IDA7XG4gICAgICAgIGZvcihsZXQgaSA9IDA7IGkgPCBzaGlwLmdldExlbmd0aCgpOyBpKyspe1xuICAgICAgICAgICAgc2hpcEdyaWRbcm93XVtjb2xdID0gc2hpcDtcbiAgICAgICAgICAgIHNoaXBMb2NhdGlvbnNbc2hpcC5nZXRJRCgpXS5wdXNoKHtyb3csIGNvbH0pO1xuICAgICAgICAgICAgcm93ID0gcm93ICsgKHJvd01vZCk7XG4gICAgICAgICAgICBjb2wgPSBjb2wgKyAoY29sTW9kKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBjb25zdCBnZXRTaGlwTG9jYXRpb24gPSAoc2hpcElEKSA9PiB7XG4gICAgICAgIHJldHVybiBzaGlwTG9jYXRpb25zW3NoaXBJRF07XG4gICAgfVxuICAgIFxuICAgIGNvbnN0IHJlY2VpdmVBdHRhY2sgPSAocm93LCBjb2wpID0+IHtcbiAgICAgICAgb3V0Y29tZSA9ICcnO1xuICAgICAgICBpZihzaGlwR3JpZFtyb3ddW2NvbF0pe1xuICAgICAgICAgICAgc2hpcEdyaWRbcm93XVtjb2xdLmhpdCgpO1xuICAgICAgICAgICAgb3V0Y29tZSA9ICdoaXQnO1xuICAgICAgICAgICAgaWYoc2hpcEdyaWRbcm93XVtjb2xdLmlzU3VuaygpKXtcbiAgICAgICAgICAgICAgICBvdXRjb21lID0gJ3N1bmsnO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb3V0Y29tZSA9ICdtaXNzJ1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgZ2V0T3V0Y29tZSA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIG91dGNvbWU7XG4gICAgfVxuXG4gICAgY29uc3QgaXNEZWZlYXRlZCA9ICgpID0+IHtcbiAgICAgICAgZm9yKGxldCBzaGlwIG9mIHNoaXBBcnIpe1xuICAgICAgICAgICAgaWYoIXNoaXAuaXNTdW5rKCkpe1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBjb25zdCBjcmVhdGVEZWZhdWx0U2hpcHMgPSAoKSA9PiB7XG4gICAgICAgIGxldCBzaGlwXzEgPSBzaGlwRmFjdG9yeSggNCwnMScsICdlYXN0Jyk7XG4gICAgICAgIGxldCBzaGlwXzIgPSBzaGlwRmFjdG9yeSggMiwnMicsICdzb3V0aCcpO1xuICAgICAgICBsZXQgc2hpcF8zID0gc2hpcEZhY3RvcnkoIDIsJzMnLCAnZWFzdCcpO1xuICAgICAgICBsZXQgc2hpcF80ID0gc2hpcEZhY3RvcnkoIDMsJzQnLCAnc291dGgnKTtcbiAgICAgICAgbGV0IHNoaXBfNSA9IHNoaXBGYWN0b3J5KCAxLCc1JywgJ3NvdXRoJyk7XG4gICAgICAgIGxldCBzaGlwXzYgPSBzaGlwRmFjdG9yeSggMywnNicsICdzb3V0aCcpO1xuICAgICAgICBsZXQgc2hpcF83ID0gc2hpcEZhY3RvcnkoIDIsJzcnLCAnZWFzdCcpO1xuICAgICAgICBsZXQgc2hpcF84ID0gc2hpcEZhY3RvcnkoMSwgJzgnKTtcbiAgICAgICAgbGV0IHNoaXBfOSA9IHNoaXBGYWN0b3J5KDEsICc5Jyk7XG4gICAgICAgIGxldCBzaGlwXzEwID0gc2hpcEZhY3RvcnkoMSwgJzEwJyk7XG5cbiAgICAgICAgc2hpcEFyci5wdXNoKHNoaXBfMSk7XG4gICAgICAgIHNoaXBBcnIucHVzaChzaGlwXzIpO1xuICAgICAgICBzaGlwQXJyLnB1c2goc2hpcF8zKTtcbiAgICAgICAgc2hpcEFyci5wdXNoKHNoaXBfNCk7XG4gICAgICAgIHNoaXBBcnIucHVzaChzaGlwXzUpO1xuICAgICAgICBzaGlwQXJyLnB1c2goc2hpcF82KTtcbiAgICAgICAgc2hpcEFyci5wdXNoKHNoaXBfNyk7XG4gICAgICAgIHNoaXBBcnIucHVzaChzaGlwXzgpO1xuICAgICAgICBzaGlwQXJyLnB1c2goc2hpcF85KTtcbiAgICAgICAgc2hpcEFyci5wdXNoKHNoaXBfMTApO1xuICAgIH1cblxuICAgIGNvbnN0IHBsYWNlRGVmYXVsdFN0YXJ0aW5nUG9zID0gKCkgPT4ge1xuICAgICAgICBwbGFjZVNoaXAoc2hpcEFyclswXSwgMCwgNCk7XG4gICAgICAgIHBsYWNlU2hpcChzaGlwQXJyWzFdLCAwLCA5KTtcbiAgICAgICAgcGxhY2VTaGlwKHNoaXBBcnJbMl0sIDIsIDApO1xuICAgICAgICBwbGFjZVNoaXAoc2hpcEFyclszXSwgMywgNCk7XG4gICAgICAgIHBsYWNlU2hpcChzaGlwQXJyWzRdLCAzLCA2KTtcbiAgICAgICAgcGxhY2VTaGlwKHNoaXBBcnJbNV0sIDQsIDkpO1xuICAgICAgICBwbGFjZVNoaXAoc2hpcEFycls2XSwgNSwgMCk7XG4gICAgICAgIHBsYWNlU2hpcChzaGlwQXJyWzddLCA4LCAwKTtcbiAgICAgICAgcGxhY2VTaGlwKHNoaXBBcnJbOF0sIDksIDUpO1xuICAgICAgICBwbGFjZVNoaXAoc2hpcEFycls5XSwgOSwgOSk7XG5cbiAgICB9XG5cbiAgICBjb25zdCBpbml0RGVmYXVsdFNoaXBzID0gKCkgPT4ge1xuICAgICAgICBjcmVhdGVEZWZhdWx0U2hpcHMoKTtcbiAgICAgICAgcGxhY2VEZWZhdWx0U3RhcnRpbmdQb3MoKTtcbiAgICAgICAgLyogXG4gICAgICAgIGxldCBzaGlwXzEgPSBzaGlwRmFjdG9yeSggNCwnMScsICdlYXN0Jyk7XG4gICAgICAgIHBsYWNlU2hpcChzaGlwXzEsIDAsIDQpO1xuICAgICAgICAvL3NoaXBBcnIucHVzaChzaGlwXzEpO1xuXG4gICAgICAgIGxldCBzaGlwXzIgPSBzaGlwRmFjdG9yeSggMiwnMicsICdzb3V0aCcpO1xuICAgICAgICBwbGFjZVNoaXAoc2hpcF8yLCAwLCA5KTtcbiAgICAgICAgLy9zaGlwQXJyLnB1c2goc2hpcF8yKTtcblxuICAgICAgICBsZXQgc2hpcF8zID0gc2hpcEZhY3RvcnkoIDIsJzMnLCAnZWFzdCcpO1xuICAgICAgICBwbGFjZVNoaXAoc2hpcF8zLCAyLCAwKTtcbiAgICAgICAgLy9zaGlwQXJyLnB1c2goc2hpcF8zKTtcblxuICAgICAgICBsZXQgc2hpcF80ID0gc2hpcEZhY3RvcnkoIDMsJzQnLCAnc291dGgnKTtcbiAgICAgICAgcGxhY2VTaGlwKHNoaXBfNCwgMywgNCk7XG4gICAgICAgIC8vc2hpcEFyci5wdXNoKHNoaXBfNCk7XG5cbiAgICAgICAgbGV0IHNoaXBfNSA9IHNoaXBGYWN0b3J5KCAxLCc1JywgJ3NvdXRoJyk7XG4gICAgICAgIHBsYWNlU2hpcChzaGlwXzUsIDMsIDYpO1xuICAgICAgICAvL3NoaXBBcnIucHVzaChzaGlwXzUpO1xuXG4gICAgICAgIGxldCBzaGlwXzYgPSBzaGlwRmFjdG9yeSggMywnNicsICdzb3V0aCcpO1xuICAgICAgICBwbGFjZVNoaXAoc2hpcF82LCA0LCA5KTtcbiAgICAgICAgLy9zaGlwQXJyLnB1c2goc2hpcF82KTtcblxuICAgICAgICBsZXQgc2hpcF83ID0gc2hpcEZhY3RvcnkoIDIsJzcnLCAnZWFzdCcpO1xuICAgICAgICBwbGFjZVNoaXAoc2hpcF83LCA1LCAwKTtcbiAgICAgICAgLy9zaGlwQXJyLnB1c2goc2hpcF83KTtcblxuICAgICAgICBsZXQgc2hpcF84ID0gc2hpcEZhY3RvcnkoMSwgJzgnKTtcbiAgICAgICAgcGxhY2VTaGlwKHNoaXBfOCwgOCwgMCk7XG4gICAgICAgIC8vc2hpcEFyci5wdXNoKHNoaXBfOCk7XG5cbiAgICAgICAgbGV0IHNoaXBfOSA9IHNoaXBGYWN0b3J5KDEsICc5Jyk7XG4gICAgICAgIHBsYWNlU2hpcChzaGlwXzksIDksIDUpO1xuICAgICAgICAvL3NoaXBBcnIucHVzaChzaGlwXzkpO1xuXG4gICAgICAgIGxldCBzaGlwXzEwID0gc2hpcEZhY3RvcnkoMSwgJzEwJyk7XG4gICAgICAgIHBsYWNlU2hpcChzaGlwXzEwLCA5LCA5KTtcbiAgICAgICAgLy9zaGlwQXJyLnB1c2goc2hpcF8xMCk7ICovXG4gICAgfVxuXG4gICAgY29uc3QgZ2V0UmFuZG9tSW50ID0gKG1heCkgPT4ge1xuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogbWF4KTtcbiAgICB9XG5cbiAgICBjb25zdCBjbGVhckdyaWQgPSAoKSA9PiB7XG4gICAgICAgIGZvcihsZXQgcm93ID0gMDsgcm93IDwgMTA7IHJvdysrKXtcbiAgICAgICAgICAgIGZvcihsZXQgY29sID0gMDsgY29sIDwgMTA7IGNvbCsrKXtcbiAgICAgICAgICAgICAgICBzaGlwR3JpZFtyb3ddW2NvbF0gPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgY2xlYXJTaGlwTG9jYXRpb25zID0gKCkgPT4ge1xuICAgICAgICBmb3IobGV0IG1lbWJlciBpbiBzaGlwTG9jYXRpb25zKXtcbiAgICAgICAgICAgIGRlbGV0ZSBzaGlwTG9jYXRpb25zW21lbWJlcl07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCByYW5kb21pemUgPSAoKSA9PiB7XG4gICAgICAgIGNsZWFyR3JpZCgpO1xuICAgICAgICBjbGVhclNoaXBMb2NhdGlvbnMoKTtcbiAgICAgICAgZm9yKGxldCBzaGlwIG9mIHNoaXBBcnIpe1xuICAgICAgICAgICAgbGV0IHJvdywgY29sLCBkaXI7XG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgcm93ID0gZ2V0UmFuZG9tSW50KDEwKTtcbiAgICAgICAgICAgICAgICBjb2wgPSBnZXRSYW5kb21JbnQoMTApO1xuICAgICAgICAgICAgICAgIGRpciA9IGdldFJhbmRvbUludCgyKSA9PT0gMCA/ICdzb3V0aCcgOiAnZWFzdCc7XG4gICAgICAgICAgICAgICAgc2hpcC5zZXREaXJlY3Rpb24oZGlyKTtcbiAgICAgICAgICAgIH0gd2hpbGUgKFxuICAgICAgICAgICAgICAgICFpc1ZhbGlkU2hpcFBsYWNlbWVudChzaGlwLCByb3csIGNvbCkgfHwgXG4gICAgICAgICAgICAgICAgdHJhZmZpY0NvbnRyb2xsZXIuaGFzU3BhY2VDb25mbGljdChzaGlwLCByb3csIGNvbClcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgcGxhY2VTaGlwKHNoaXAsIHJvdywgY29sKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZygncmVhY2hlZCcpO1xuICAgICAgICB0cmFmZmljQ29udHJvbGxlci5wcmludEdyaWQoc2hpcEdyaWQpO1xuICAgIH1cbiAgICBcbiAgICBjb25zdCBnZXRTaGlwR3JpZCA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHNoaXBHcmlkO1xuICAgIH1cblxuICAgIGNvbnN0IGdldFNoaXBBcnIgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBzaGlwQXJyO1xuICAgIH1cblxuICAgIGNvbnN0IGdldFNoaXBMb2NhdGlvbnMgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBzaGlwTG9jYXRpb25zO1xuICAgIH1cbiAgICBcbiAgICBjb25zdCBpc1NoaXBQcmVzZW50QXQgPSAocm93LCBjb2wpID0+IHtcbiAgICAgICAgcmV0dXJuIHNoaXBHcmlkW3Jvd11bY29sXSAhPSBudWxsO1xuICAgIH1cblxuICAgIGNvbnN0IG1vdmVTaGlwID0gKHNoaXBJRCwgZGlyZWN0aW9uKSA9PiB7XG4gICAgICAgIHRyYWZmaWNDb250cm9sbGVyLm1vdmVTaGlwKHNoaXBJRCwgZGlyZWN0aW9uKTtcbiAgICB9XG5cbiAgICBjb25zdCByb3RhdGVTaGlwID0gKHNoaXBJRCkgPT4ge1xuICAgICAgICB0cmFmZmljQ29udHJvbGxlci5yb3RhdGVTaGlwKHNoaXBJRCk7XG4gICAgfVxuXG4gICAgY29uc3QgZ2V0TG9jYXRpb25DaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiB0cmFmZmljQ29udHJvbGxlci5nZXRMb2NhdGlvbkNoYW5nZSgpO1xuICAgIH1cblxuICAgIGNvbnN0IGdldEVycm9yTXNnID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gdHJhZmZpY0NvbnRyb2xsZXIuZ2V0RXJyb3IoKTtcbiAgICB9XG5cbiAgICBjb25zdCBnZXRQb3NzaWJsZU1vdmUgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiB0cmFmZmljQ29udHJvbGxlci5nZXRQb3NzaWJsZU1vdmUoKTtcbiAgICB9XG5cbiAgICBjb25zdCBwcmludEdyaWQgPSAoKSA9PiB7XG4gICAgICAgIHRyYWZmaWNDb250cm9sbGVyLnByaW50R3JpZCgpO1xuICAgIH1cblxuICAgIHJldHVybiB7IFxuICAgICAgICBwbGFjZVNoaXAsIFxuICAgICAgICBnZXRTaGlwTG9jYXRpb24sXG4gICAgICAgIHJlY2VpdmVBdHRhY2ssXG4gICAgICAgIGdldE91dGNvbWUsXG4gICAgICAgIGlzRGVmZWF0ZWQsIFxuICAgICAgICBpbml0RGVmYXVsdFNoaXBzLCBcbiAgICAgICAgcmFuZG9taXplLFxuICAgICAgICBnZXRTaGlwR3JpZCxcbiAgICAgICAgZ2V0U2hpcEFycixcbiAgICAgICAgZ2V0U2hpcExvY2F0aW9ucyxcbiAgICAgICAgaXNTaGlwUHJlc2VudEF0LFxuICAgICAgICBtb3ZlU2hpcCxcbiAgICAgICAgcm90YXRlU2hpcCxcbiAgICAgICAgZ2V0TG9jYXRpb25DaGFuZ2UsXG4gICAgICAgIGdldEVycm9yTXNnLFxuICAgICAgICBnZXRQb3NzaWJsZU1vdmUsXG4gICAgICAgIHByaW50R3JpZFxuICAgIH07XG59XG5cbmV4cG9ydCB7XG4gICAgc2hpcEdyaWRGYWN0b3J5XG59IiwiY29uc3QgdHJhZmZpY0NvbnRyb2xsZXJGYWN0b3J5ID0gKHNoaXBHcmlkSW4sIHNoaXBMb2NhdGlvbnNJbiwgc2hpcEFyckluKSA9PiB7XG4gICAgbGV0IHNoaXBHcmlkID0gc2hpcEdyaWRJbjtcbiAgICBsZXQgc2hpcExvY2F0aW9ucyA9IHNoaXBMb2NhdGlvbnNJbjtcbiAgICBsZXQgc2hpcEFyciA9IHNoaXBBcnJJbjtcblxuICAgIGxldCBlcnJvciA9ICdub25lJztcbiAgICBsZXQgbG9jYXRpb25DaGFuZ2UgPSB7fTtcbiAgICBsZXQgcG9zc2libGVNb3ZlID0gZmFsc2U7XG5cbiAgICBjb25zdCBnZXROZXdMb2NhdGlvbnMgPSAob2xkTG9jYXRpb25zLCBkaXJlY3Rpb24pID0+IHtcbiAgICAgICAgbGV0IG5ld0xvY2F0aW9ucyA9IFtdO1xuICAgICAgICBsZXQgcm93TW9kID0gMDtcbiAgICAgICAgbGV0IGNvbE1vZCA9IDA7XG4gICAgICAgIHN3aXRjaChkaXJlY3Rpb24pe1xuICAgICAgICAgICAgY2FzZSAndXAnOlxuICAgICAgICAgICAgICAgIHJvd01vZCA9IC0xO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZG93bic6XG4gICAgICAgICAgICAgICAgcm93TW9kID0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2xlZnQnOlxuICAgICAgICAgICAgICAgIGNvbE1vZCA9IC0xO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncmlnaHQnOlxuICAgICAgICAgICAgICAgIGNvbE1vZCA9IDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZm9yKGxldCBsb2NhdGlvbiBvZiBvbGRMb2NhdGlvbnMpe1xuICAgICAgICAgICAgbGV0IHJvdyA9IGxvY2F0aW9uLnJvdyArIHJvd01vZDtcbiAgICAgICAgICAgIGxldCBjb2wgPSBsb2NhdGlvbi5jb2wgKyBjb2xNb2Q7XG4gICAgICAgICAgICBuZXdMb2NhdGlvbnMucHVzaCh7cm93LCBjb2x9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3TG9jYXRpb25zO1xuICAgIH1cblxuICAgIGNvbnN0IGdldE5ld1JvdGF0aW9uTG9jYXRpb25zID0gKG9sZExvY2F0aW9ucywgbmV3RGlyZWN0aW9uKSA9PiB7XG4gICAgICAgIGxldCBhbmNob3JMb2NhdGlvbiA9IG9sZExvY2F0aW9uc1swXTtcbiAgICAgICAgbGV0IG5ld0xvY2F0aW9ucyA9IFtdO1xuICAgICAgICBsZXQgcm93TW9kID0gMDtcbiAgICAgICAgbGV0IGNvbE1vZCA9IDA7XG4gICAgICAgIGxldCByb3cgPSBhbmNob3JMb2NhdGlvbi5yb3c7XG4gICAgICAgIGxldCBjb2wgPSBhbmNob3JMb2NhdGlvbi5jb2w7XG4gICAgICAgIHN3aXRjaChuZXdEaXJlY3Rpb24pe1xuICAgICAgICAgICAgY2FzZSAnc291dGgnOlxuICAgICAgICAgICAgICAgIHJvd01vZCA9IDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdlYXN0JzpcbiAgICAgICAgICAgICAgICBjb2xNb2QgPSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG5ld0xvY2F0aW9ucy5wdXNoKHtyb3csIGNvbH0pO1xuICAgICAgICBmb3IobGV0IGxlbiA9IDE7IGxlbiA8IG9sZExvY2F0aW9ucy5sZW5ndGg7IGxlbisrKXtcbiAgICAgICAgICAgIHJvdyA9IHJvdyArIHJvd01vZDtcbiAgICAgICAgICAgIGNvbCA9IGNvbCArIGNvbE1vZDtcbiAgICAgICAgICAgIG5ld0xvY2F0aW9ucy5wdXNoKHtyb3csIGNvbH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXdMb2NhdGlvbnM7XG4gICAgfVxuXG4gICAgY29uc3QgaXNPdXRPZkJvdW5kc0Nvb3JkID0gKHJvdywgY29sKSA9PiB7XG4gICAgICAgIHJldHVybiByb3cgPCAwIHx8IHJvdyA+PSAxMCB8fCBjb2wgPCAwIHx8IGNvbCA+PSAxMDtcbiAgICB9XG5cbiAgICBjb25zdCBpc091dE9mQm91bmRzID0gKG5ld0xvY2F0aW9ucykgPT4ge1xuICAgICAgICBmb3IobGV0IGxvY2F0aW9uIG9mIG5ld0xvY2F0aW9ucyl7XG4gICAgICAgICAgICBpZihpc091dE9mQm91bmRzQ29vcmQobG9jYXRpb24ucm93LCBsb2NhdGlvbi5jb2wpKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3QgcmVzZXRMb2NhdGlvbkNoYW5nZSA9ICgpID0+IHtcbiAgICAgICAgbG9jYXRpb25DaGFuZ2UgPSB7fTtcbiAgICB9XG5cbiAgICBjb25zdCBwcmludEdyaWQgPSAoKSA9PiB7XG4gICAgICAgIGZvcihsZXQgcm93ID0gMDsgcm93IDwgMTA7IHJvdysrKXtcbiAgICAgICAgICAgIGxldCByb3dTdHIgPSByb3cgKyBcIjogXCI7XG4gICAgICAgICAgICBmb3IobGV0IGNvbCA9IDA7IGNvbCA8IDEwOyBjb2wrKyl7XG4gICAgICAgICAgICAgICAgaWYoc2hpcEdyaWRbcm93XVtjb2xdKXtcbiAgICAgICAgICAgICAgICAgICAgcm93U3RyICs9IHNoaXBHcmlkW3Jvd11bY29sXS5nZXRJRCgpXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcm93U3RyICs9ICdfJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcm93U3RyICs9IFwiIFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc29sZS5sb2cocm93U3RyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vY2hlY2sgaWYgYW5vdGhlciBzaGlwIGlzIHRvbyBjbG9zZSB0byB0aGUgcHJvcG9zZWQgbG9jYXRpb25cbiAgICAvL2Egc2hpcCBpcyB0b28gY2xvc2UgaWYgaXQgaXMgYWRqYWNlbnQsIHRoZXJlIHNob3VsZCBiZSBvbmUgc3BhY2VcbiAgICBjb25zdCBpc1NwYWNlVmlvbGF0aW9uQ2VsbCA9IChyb3csIGNvbCwgc2hpcElEKSA9PiB7XG4gICAgICAgIC8vY29uc29sZS5sb2coYHJvdzogJHtyb3d9LCBjb2w6ICR7Y29sfSwgc2hpcElEOiAke3NoaXBJRH1gKTtcbiAgICAgICAgaWYoIGlzT3V0T2ZCb3VuZHNDb29yZChyb3csIGNvbCkgfHxcbiAgICAgICAgICAgIHNoaXBHcmlkW3Jvd11bY29sXSA9PT0gbnVsbCB8fFxuICAgICAgICAgICAgc2hpcEdyaWRbcm93XVtjb2xdID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICl7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLy9wcmludEdyaWQoc2hpcEdyaWQpOy8vLy8vLy8vLy9cbiAgICAgICAgcmV0dXJuIHNoaXBHcmlkW3Jvd11bY29sXS5nZXRJRCgpICE9PSBzaGlwSUQ7XG4gICAgfVxuXG4gICAgY29uc3QgaXNTcGFjZVZpb2xhdGlvbiA9IChzaGlwSUQsIG5ld0xvY2F0aW9ucykgPT4ge1xuICAgICAgICBmb3IobGV0IGxvY2F0aW9uIG9mIG5ld0xvY2F0aW9ucyl7XG4gICAgICAgICAgICBsZXQgcm93ID0gbG9jYXRpb24ucm93O1xuICAgICAgICAgICAgbGV0IGNvbCA9IGxvY2F0aW9uLmNvbDtcbiAgICAgICAgICAgIGlmKGlzU3BhY2VWaW9sYXRpb25DZWxsKHJvdyAtIDEsIGNvbCArIDEsIHNoaXBJRCkpIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgaWYoaXNTcGFjZVZpb2xhdGlvbkNlbGwocm93ICAgICwgY29sICsgMSwgc2hpcElEKSkgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICBpZihpc1NwYWNlVmlvbGF0aW9uQ2VsbChyb3cgKyAxLCBjb2wgKyAxLCBzaGlwSUQpKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIGlmKGlzU3BhY2VWaW9sYXRpb25DZWxsKHJvdyArIDEsIGNvbCAgICAsIHNoaXBJRCkpIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgaWYoaXNTcGFjZVZpb2xhdGlvbkNlbGwocm93ICsgMSwgY29sIC0gMSwgc2hpcElEKSkgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICBpZihpc1NwYWNlVmlvbGF0aW9uQ2VsbChyb3cgICAgLCBjb2wgLSAxLCBzaGlwSUQpKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIGlmKGlzU3BhY2VWaW9sYXRpb25DZWxsKHJvdyAtIDEsIGNvbCAtIDEsIHNoaXBJRCkpIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgaWYoaXNTcGFjZVZpb2xhdGlvbkNlbGwocm93IC0gMSwgY29sICAgICwgc2hpcElEKSkgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IHJlbW92ZU9sZExvY2F0aW9uID0gKHNoaXBJRCwgb2xkTG9jYXRpb25zKSA9PiB7XG4gICAgICAgIGZvcihsZXQgbG9jYXRpb24gb2Ygb2xkTG9jYXRpb25zKXtcbiAgICAgICAgICAgIHNoaXBHcmlkW2xvY2F0aW9uLnJvd11bbG9jYXRpb24uY29sXSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgc2hpcExvY2F0aW9uc1tzaGlwSURdID0gW107XG4gICAgfVxuXG4gICAgY29uc3QgbWFya05ld0xvY2F0aW9uID0gKHNoaXBJRCwgbmV3TG9jYXRpb25zKSA9PiB7XG4gICAgICAgIC8qIGNvbnNvbGUubG9nKCdoZXJlIGluIG1hcmsgbmV3IGxvY2F0aW9uJylcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHNoaXBBcnIubGVuZ3RoOyBpKyspe1xuICAgICAgICAgICAgY29uc29sZS5sb2coYGluZGV4OiAke2l9LCBzaGlwSUQ6ICR7c2hpcEFycltpXS5nZXRJRCgpfWApO1xuICAgICAgICB9ICovXG4gICAgICAgIGZvcihsZXQgbG9jYXRpb24gb2YgbmV3TG9jYXRpb25zKXtcbiAgICAgICAgICAgIHNoaXBHcmlkW2xvY2F0aW9uLnJvd11bbG9jYXRpb24uY29sXSA9IHNoaXBBcnJbc2hpcElEIC0gMV07XG5cbiAgICAgICAgICAgIHNoaXBMb2NhdGlvbnNbc2hpcElEXS5wdXNoKHN0cnVjdHVyZWRDbG9uZShsb2NhdGlvbikpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgbW92ZVNoaXAgPSAoc2hpcElELCBkaXJlY3Rpb24pID0+IHtcblxuICAgICAgICBsZXQgb2xkTG9jYXRpb25zID0gc3RydWN0dXJlZENsb25lKHNoaXBMb2NhdGlvbnNbc2hpcElEXSk7XG4gICAgICAgIGxldCBuZXdMb2NhdGlvbnMgPSBzdHJ1Y3R1cmVkQ2xvbmUoZ2V0TmV3TG9jYXRpb25zKG9sZExvY2F0aW9ucywgZGlyZWN0aW9uKSk7XG5cbiAgICAgICAgaWYoaXNPdXRPZkJvdW5kcyhuZXdMb2NhdGlvbnMpKXtcbiAgICAgICAgICAgIGVycm9yID0gJ291dE9mQm91bmRzJztcbiAgICAgICAgICAgIHJlc2V0TG9jYXRpb25DaGFuZ2UoKTtcbiAgICAgICAgICAgIHBvc3NpYmxlTW92ZSA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vY29uc29sZS5sb2coaXNTcGFjZVZpb2xhdGlvbihzaGlwSUQsIG5ld0xvY2F0aW9ucykpO1xuICAgICAgICBpZihpc1NwYWNlVmlvbGF0aW9uKHNoaXBJRCwgbmV3TG9jYXRpb25zKSl7XG4gICAgICAgICAgICBlcnJvciA9ICdzcGFjZVZpb2xhdGlvbic7XG4gICAgICAgICAgICByZXNldExvY2F0aW9uQ2hhbmdlKCk7XG4gICAgICAgICAgICBwb3NzaWJsZU1vdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGVycm9yID0gJyc7XG4gICAgICAgIHBvc3NpYmxlTW92ZSA9IHRydWU7XG4gICAgICAgIGxvY2F0aW9uQ2hhbmdlID0ge29sZExvY2F0aW9ucywgbmV3TG9jYXRpb25zfTtcbiAgICAgICAgcmVtb3ZlT2xkTG9jYXRpb24oc2hpcElELCBvbGRMb2NhdGlvbnMpO1xuICAgICAgICBtYXJrTmV3TG9jYXRpb24oc2hpcElELCBuZXdMb2NhdGlvbnMpO1xuICAgIH1cblxuICAgIC8qIGNvbnN0IGdldE5ld1JvdGF0aW9uTG9jYXRpb25zID0gKGFuY2hvckxvY2F0aW9uLCBuZXdEaXJlY3Rpb24pID0+IHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgIH0gKi9cbiAgICBcbiAgICBjb25zdCByb3RhdGVTaGlwID0gKHNoaXBJRCkgPT4ge1xuICAgICAgICBsZXQgc2hpcCA9IHNoaXBBcnJbc2hpcElEIC0gMV07XG4gICAgICAgIGxldCBvbGREaXJlY3Rpb24gPSBzaGlwLmdldERpcmVjdGlvbigpO1xuICAgICAgICBsZXQgbmV3RGlyZWN0aW9uID0gb2xkRGlyZWN0aW9uID09PSAnc291dGgnID8gJ2Vhc3QnIDogJ3NvdXRoJztcbiAgICAgICAgbGV0IG9sZExvY2F0aW9ucyA9IHNoaXBMb2NhdGlvbnNbc2hpcElEXTtcbiAgICAgICAgbGV0IG5ld0xvY2F0aW9ucyA9IGdldE5ld1JvdGF0aW9uTG9jYXRpb25zKG9sZExvY2F0aW9ucywgbmV3RGlyZWN0aW9uKTtcbiAgICAgICAgXG4gICAgICAgIGlmKGlzT3V0T2ZCb3VuZHMobmV3TG9jYXRpb25zKSl7XG4gICAgICAgICAgICBlcnJvciA9ICdvdXRPZkJvdW5kcyc7XG4gICAgICAgICAgICByZXNldExvY2F0aW9uQ2hhbmdlKCk7XG4gICAgICAgICAgICBwb3NzaWJsZU1vdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZihpc1NwYWNlVmlvbGF0aW9uKHNoaXBJRCwgbmV3TG9jYXRpb25zKSl7XG4gICAgICAgICAgICBlcnJvciA9ICdzcGFjZVZpb2xhdGlvbic7XG4gICAgICAgICAgICByZXNldExvY2F0aW9uQ2hhbmdlKCk7XG4gICAgICAgICAgICBwb3NzaWJsZU1vdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGVycm9yID0gJyc7XG4gICAgICAgIHBvc3NpYmxlTW92ZSA9IHRydWU7XG4gICAgICAgIGxvY2F0aW9uQ2hhbmdlID0ge29sZExvY2F0aW9ucywgbmV3TG9jYXRpb25zfTtcbiAgICAgICAgc2hpcC5zZXREaXJlY3Rpb24obmV3RGlyZWN0aW9uKTtcbiAgICAgICAgcmVtb3ZlT2xkTG9jYXRpb24oc2hpcElELCBvbGRMb2NhdGlvbnMpO1xuICAgICAgICBtYXJrTmV3TG9jYXRpb24oc2hpcElELCBuZXdMb2NhdGlvbnMpO1xuICAgIH1cblxuICAgIGNvbnN0IGdldEVycm9yID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gZXJyb3I7XG4gICAgfVxuXG4gICAgY29uc3QgZ2V0UG9zc2libGVNb3ZlID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gcG9zc2libGVNb3ZlO1xuICAgIH1cblxuICAgIGNvbnN0IGdldExvY2F0aW9uQ2hhbmdlID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gbG9jYXRpb25DaGFuZ2U7XG4gICAgfVxuXG4gICAgY29uc3QgZ2V0UHJvcG9zZWRMb2NhdGlvbiA9IChzaGlwLCByb3csIGNvbCkgPT4ge1xuICAgICAgICBsZXQgcHJvcG9zZWRMb2NhdGlvbiA9IFtdO1xuXG4gICAgICAgIGxldCByb3dNb2QgPSBzaGlwLmdldERpcmVjdGlvbigpID09PSAnc291dGgnID8gMSA6IDA7XG4gICAgICAgIGxldCBjb2xNb2QgPSBzaGlwLmdldERpcmVjdGlvbigpID09PSAnZWFzdCcgPyAxIDogMDtcbiAgICAgICAgZm9yKGxldCBpID0gMDsgaSA8IHNoaXAuZ2V0TGVuZ3RoKCk7IGkrKyl7XG4gICAgICAgICAgICBwcm9wb3NlZExvY2F0aW9uLnB1c2goe3JvdywgY29sfSk7XG4gICAgICAgICAgICByb3cgPSByb3cgKyAocm93TW9kKTtcbiAgICAgICAgICAgIGNvbCA9IGNvbCArIChjb2xNb2QpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwcm9wb3NlZExvY2F0aW9uO1xuICAgIH1cblxuICAgIGNvbnN0IGdldFN1cnJvdW5kaW5nTG9jYXRpb25zID0gKHNoaXAsIHJvdywgY29sKSA9PiB7XG4gICAgICAgIGxldCBzdXJyb3VuZGluZ0xvY2F0aW9ucyA9IFtdO1xuICAgICAgICBsZXQgZGlyID0gc2hpcC5nZXREaXJlY3Rpb24oKTtcbiAgICAgICAgbGV0IGxlbiA9IHNoaXAuZ2V0TGVuZ3RoKCk7XG4gICAgICAgIGlmKGRpciA9PT0gJ3NvdXRoJyl7XG4gICAgICAgICAgICBzdXJyb3VuZGluZ0xvY2F0aW9ucy5wdXNoKHtyb3c6IHJvdyAtIDEsIGNvbDogY29sICAgIH0pO1xuICAgICAgICAgICAgc3Vycm91bmRpbmdMb2NhdGlvbnMucHVzaCh7cm93OiByb3cgLSAxLCBjb2w6IGNvbCAtIDF9KTtcbiAgICAgICAgICAgIHN1cnJvdW5kaW5nTG9jYXRpb25zLnB1c2goe3Jvdzogcm93IC0gMSwgY29sOiBjb2wgKyAxfSk7XG4gICAgICAgICAgICBmb3IobGV0IG1vZCA9IDA7IG1vZCA8IGxlbjsgbW9kKyspe1xuICAgICAgICAgICAgICAgIHN1cnJvdW5kaW5nTG9jYXRpb25zLnB1c2goe3Jvdzogcm93ICsgbW9kLCBjb2w6IGNvbCAtIDF9KTtcbiAgICAgICAgICAgICAgICBzdXJyb3VuZGluZ0xvY2F0aW9ucy5wdXNoKHtyb3c6IHJvdyArIG1vZCwgY29sOiBjb2wgKyAxfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzdXJyb3VuZGluZ0xvY2F0aW9ucy5wdXNoKHtyb3c6IHJvdyArIGxlbiwgY29sOiBjb2x9KTtcbiAgICAgICAgICAgIHN1cnJvdW5kaW5nTG9jYXRpb25zLnB1c2goe3Jvdzogcm93ICsgbGVuLCBjb2w6IGNvbCAtIDF9KTtcbiAgICAgICAgICAgIHN1cnJvdW5kaW5nTG9jYXRpb25zLnB1c2goe3Jvdzogcm93ICsgbGVuLCBjb2w6IGNvbCArIDF9KTtcbiAgICAgICAgfSBlbHNlIHsgLy8nZWFzdCdcbiAgICAgICAgICAgIHN1cnJvdW5kaW5nTG9jYXRpb25zLnB1c2goe3Jvdzogcm93ICAgICwgY29sOiBjb2wgLSAxfSk7XG4gICAgICAgICAgICBzdXJyb3VuZGluZ0xvY2F0aW9ucy5wdXNoKHtyb3c6IHJvdyArIDEsIGNvbDogY29sIC0gMX0pO1xuICAgICAgICAgICAgc3Vycm91bmRpbmdMb2NhdGlvbnMucHVzaCh7cm93OiByb3cgLSAxLCBjb2w6IGNvbCAtIDF9KTtcbiAgICAgICAgICAgIGZvcihsZXQgbW9kID0gMDsgbW9kIDwgbGVuOyBtb2QrKyl7XG4gICAgICAgICAgICAgICAgc3Vycm91bmRpbmdMb2NhdGlvbnMucHVzaCh7cm93OiByb3cgLSAxLCBjb2w6IGNvbCArIG1vZH0pO1xuICAgICAgICAgICAgICAgIHN1cnJvdW5kaW5nTG9jYXRpb25zLnB1c2goe3Jvdzogcm93ICsgMSwgY29sOiBjb2wgKyBtb2R9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHN1cnJvdW5kaW5nTG9jYXRpb25zLnB1c2goe3Jvdzogcm93ICAgICwgY29sOiBjb2wgKyBsZW59KTtcbiAgICAgICAgICAgIHN1cnJvdW5kaW5nTG9jYXRpb25zLnB1c2goe3Jvdzogcm93IC0gMSwgY29sOiBjb2wgKyBsZW59KTtcbiAgICAgICAgICAgIHN1cnJvdW5kaW5nTG9jYXRpb25zLnB1c2goe3Jvdzogcm93ICsgMSwgY29sOiBjb2wgKyBsZW59KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZygnc3Vycm91bmRzaW5nIG9mIHNoaXAgJyArIHNoaXAuZ2V0SUQoKSk7XG4gICAgICAgIGNvbnNvbGUubG9nKHN1cnJvdW5kaW5nTG9jYXRpb25zKTtcbiAgICAgICAgcmV0dXJuIHN1cnJvdW5kaW5nTG9jYXRpb25zO1xuICAgIH1cblxuICAgIGNvbnN0IGhhc1NwYWNlQ29uZmxpY3RGcm9tTG9jYXRpb25zID0gKHN1cnJvdW5kaW5nTG9jYXRpb25zKSA9PiB7XG4gICAgICAgIGZvcihsZXQgbG9jYXRpb24gb2Ygc3Vycm91bmRpbmdMb2NhdGlvbnMpe1xuICAgICAgICAgICAgaWYoaXNPdXRPZkJvdW5kc0Nvb3JkKGxvY2F0aW9uLnJvdywgbG9jYXRpb24uY29sKSkgY29udGludWU7XG4gICAgICAgICAgICBpZihzaGlwR3JpZFtsb2NhdGlvbi5yb3ddW2xvY2F0aW9uLmNvbF0gPT09IG51bGwpIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYoc2hpcEdyaWRbbG9jYXRpb24ucm93XVtsb2NhdGlvbi5jb2xdID09PSB1bmRlZmluZWQpIGNvbnRpbnVlO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnY29uZmxpY3QgJyk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhzaGlwR3JpZFtsb2NhdGlvbi5yb3ddW2xvY2F0aW9uLmNvbF0pO1xuICAgICAgICAgICAgY29uc29sZS5sb2coc2hpcEdyaWRbbG9jYXRpb24ucm93XVtsb2NhdGlvbi5jb2xdLmdldElEKCkpO1xuICAgICAgICAgICAgY29uc29sZS5sb2cobG9jYXRpb24pO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBoYXNTcGFjZUNvbmZsaWN0ID0gKHNoaXAsIHJvdywgY29sKSA9PiB7XG4gICAgICAgIHJldHVybiBoYXNTcGFjZUNvbmZsaWN0RnJvbUxvY2F0aW9ucyhnZXRTdXJyb3VuZGluZ0xvY2F0aW9ucyhzaGlwLCByb3csIGNvbCkpO1xuICAgIH1cblxuICAgIHJldHVybiB7IFxuICAgICAgICBtb3ZlU2hpcCxcbiAgICAgICAgcm90YXRlU2hpcCxcbiAgICAgICAgZ2V0RXJyb3IsXG4gICAgICAgIGdldFBvc3NpYmxlTW92ZSwgXG4gICAgICAgIGdldExvY2F0aW9uQ2hhbmdlLFxuICAgICAgICBoYXNTcGFjZUNvbmZsaWN0LFxuICAgICAgICBwcmludEdyaWQvLy8vLy8vL1xuICAgIH1cbn1cblxuZXhwb3J0IHtcbiAgICB0cmFmZmljQ29udHJvbGxlckZhY3Rvcnlcbn0iLCJjb25zdCBhdHRhY2tHcmlkRmFjdG9yeSA9ICgpID0+IHtcbiAgICBjb25zdCBhdHRhY2tzID0gQXJyYXkoMTApLmZpbGwoKS5tYXAoKCkgPT4gQXJyYXkoMTApLmZpbGwobnVsbCkpO1xuXG4gICAgY29uc3QgaW5Cb3VuZHMgPSAocm93LCBjb2wpID0+IHtcbiAgICAgICAgcmV0dXJuIHJvdyA+PSAwICYmIHJvdyA8IDEwICYmIGNvbCA+PSAwICYmIGNvbCA8IDEwO1xuICAgIH1cblxuICAgIGNvbnN0IGlzVmFsaWRBdHRhY2sgPSAocm93LCBjb2wpID0+IHtcbiAgICAgICAgcmV0dXJuIGluQm91bmRzKHJvdywgY29sKSAmJiBhdHRhY2tzW3Jvd11bY29sXSA9PT0gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCByZWNvcmRBdHRhY2sgPSAocm93LCBjb2wpID0+IHtcbiAgICAgICAgYXR0YWNrc1tyb3ddW2NvbF0gPSAnaGl0JztcbiAgICB9XG5cbiAgICByZXR1cm4geyBpc1ZhbGlkQXR0YWNrLCByZWNvcmRBdHRhY2sgfTtcbn1cblxuZXhwb3J0e1xuICAgIGF0dGFja0dyaWRGYWN0b3J5XG59IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IHsgXG4gICAgdmlld0NvbnRyb2xsZXIsXG4gICAgLyogc2V0VXBWaWV3LCAqL1xuICAgIG1hcmtBdHRhY2tcbn0gZnJvbSAnLi92aWV3Q29udHJvbGxlcic7XG5cbmltcG9ydCB7IFxuICAgIGdhbWVNYXN0ZXJGYWN0b3J5LFxufSBmcm9tICcuL2dhbWVNYXN0ZXInO1xuXG4vL21hbmFnZXMgdGhlIGdhbWUgYW5kIHRoZSB2aWV3Y29udHJvbGxlclxuY29uc3Qgd2Vic2l0ZU1hbmFnZXJGYWN0b3J5ID0gKCkgPT4ge1xuICAgIGxldCBnYW1lID0gZ2FtZU1hc3RlckZhY3RvcnkoKTtcbiAgICBsZXQgbXlWaWV3Q29udHJvbGxlciA9IHZpZXdDb250cm9sbGVyKCk7XG4gICAgY29uc3QgZ2V0U2hpcEdyaWQgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBnYW1lLmdldFNoaXBHcmlkKCk7XG4gICAgfVxuICAgIGNvbnN0IHByb2Nlc3NVc2VySW5wdXQgPSAocm93LCBjb2wsIGNsaWNrKSA9PiB7XG4gICAgICAgIFxuICAgICAgICBpZighZ2FtZS5pc0F0dGFja2FibGVCeVBsYXllcihyb3csIGNvbCkpe1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbXlWaWV3Q29udHJvbGxlci5sb2Nrb3V0QXR0YWNrR3JpZCgpO1xuXG4gICAgICAgIG1hcmtBdHRhY2soXG4gICAgICAgICAgICBjbGljaywgXG4gICAgICAgICAgICBnYW1lLmlzU2hpcFByZXNlbnRBdChcbiAgICAgICAgICAgICAgICBjbGljay50YXJnZXQuZGF0YXNldC5yb3csIFxuICAgICAgICAgICAgICAgIGNsaWNrLnRhcmdldC5kYXRhc2V0LmNvbCwgXG4gICAgICAgICAgICAgICAgJ2NvbXB1dGVyJykpO1xuICAgICAgICAvL2NvbnNvbGUubG9nKGNsaWNrKTtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhjbGljay50YXJnZXQuZGF0YXNldC5yb3cpO1xuLyogXG4gICAgICAgIGlmKGdhbWUuaXNTaGlwUHJlc2VudEF0KHJvdywgY29sLCAnY29tcHV0ZXInKSl7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnU0NVQ0VTUycpO1xuICAgICAgICAgICAgLy91cGRhdGUgY29uc29sZVxuICAgICAgICB9ICovXG5cbiAgICAgICAgZ2FtZS5wcm9jZXNzVXNlcklucHV0KHJvdywgY29sKTtcblxuICAgICAgICAvL2Rpc3BsYXkgb3V0Y29tZVxuICAgICAgICAvL2NvbnNvbGUubG9nKGBZb3UgZmlyZSBhdCAoJHtyb3d9LCAke2NvbH0pIGFuZCAke2dhbWUuZ2V0UGxheWVyVHVyblJlc3VsdCgpfWApO1xuICAgICAgICBteVZpZXdDb250cm9sbGVyLnVwZGF0ZU1zZ09uZShyb3csIGNvbCwgZ2FtZS5nZXRQbGF5ZXJUdXJuUmVzdWx0KCkpO1xuXG4gICAgICAgIC8vY29uc29sZS5sb2coZ2FtZS53aW5DaGVja1BsYXllcigpKTtcbiAgICAgICAgaWYoZ2FtZS53aW5DaGVja1BsYXllcigpKXtcbiAgICAgICAgICAgIC8vZGlzcGxheSB2aWN0b3J5IG1lc3NhZ2VcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdwbGF5ZXIgd2lucycpO1xuICAgICAgICAgICAgbXlWaWV3Q29udHJvbGxlci51cGRhdGVNc2dUd28oMCwgMCwgJ3dpbicpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy9nZXQgYWkgdGFyZ2V0XG4gICAgICAgIC8vZXhlY3V0ZSBhaSBhdHRhY2tcbiAgICAgICAgbGV0IHRhcmdldCA9IGdhbWUucHJvY2Vzc0NvbXB1dGVyQXR0YWNrKCk7XG4gICAgICAgIC8vY29uc29sZS5sb2codGFyZ2V0KTtcbiAgICAgICAgLy91cGRhdGUgcGxheWVyIHNoaXAgZ3JpZCB0byBzaG93IGF0dGFja1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIG15Vmlld0NvbnRyb2xsZXIubWFya0NvbXB1dGVyQXR0YWNrKHRhcmdldC5yb3csIHRhcmdldC5jb2wpO1xuICAgICAgICAgICAgbXlWaWV3Q29udHJvbGxlci5tYWtlQXR0YWNrR3JpZENsaWNrYWJsZShwcm9jZXNzVXNlcklucHV0KTtcbiAgICAgICAgfVxuICAgICAgICAsMzAwMCk7XG4gICAgICAgIFxuXG4gICAgICAgIC8vZGlzcGxheSBvdXRjb21lXG4gICAgICAgIGNvbnNvbGUubG9nKGBZb3VyIG9wcG9uZW50IGZpcmVzIGF0ICgke3RhcmdldC5yb3d9LCAke3RhcmdldC5jb2x9KSBhbmQgJHtnYW1lLmdldENvbXB1dGVyVHVyblJlc3VsdCgpfWApO1xuICAgICAgICBteVZpZXdDb250cm9sbGVyLnVwZGF0ZU1zZ1R3byh0YXJnZXQucm93LCB0YXJnZXQuY29sLCBnYW1lLmdldENvbXB1dGVyVHVyblJlc3VsdCgpKTtcblxuICAgICAgICAvL3dpbiBjaGVja1xuICAgICAgICBpZihnYW1lLndpbkNoZWNrQ29tcHV0ZXIoKSl7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnY29tcHV0ZXIgd2lucycpO1xuICAgICAgICAgICAgbXlWaWV3Q29udHJvbGxlci51cGRhdGVNc2dUd28oMCwgMCwgJ2xvc3MnKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICB9XG5cbiAgICBjb25zdCBpbml0aWF0ZSA9ICgpID0+IHtcbiAgICAgICAgbXlWaWV3Q29udHJvbGxlci5zZXRVcChnYW1lLCBwcm9jZXNzVXNlcklucHV0KTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHsgaW5pdGlhdGUsIHByb2Nlc3NVc2VySW5wdXQsIGdldFNoaXBHcmlkIH07XG59XG5cbmV4cG9ydCB7IFxuICAgIHdlYnNpdGVNYW5hZ2VyRmFjdG9yeVxufTsiLCJpbXBvcnQgeyBcbiAgICBzaGlwR3JpZEZhY3Rvcnlcbn0gZnJvbSAnLi9zaGlwR3JpZEZhY3RvcnknO1xuXG5pbXBvcnQgeyBcbiAgICBhdHRhY2tHcmlkRmFjdG9yeVxufSBmcm9tICcuL2F0dGFja0dyaWRGYWN0b3J5JztcblxuaW1wb3J0IHsgXG4gICAgY29tcHV0ZXJUYXJnZXRpbmdBSUZhY3Rvcnlcbn0gZnJvbSAnLi9jb21wdXRlclRhcmdldGluZyc7XG5cbmNvbnN0IGdhbWVNYXN0ZXJGYWN0b3J5ID0gKCkgPT4ge1xuXG4gICAgY29uc3QgYm9hcmRfcGxheWVyX3NoaXBzID0gc2hpcEdyaWRGYWN0b3J5KCk7XG4gICAgY29uc3QgYm9hcmRfY29tcHV0ZXJfc2hpcHMgPSBzaGlwR3JpZEZhY3RvcnkoKTtcblxuICAgIGNvbnN0IGJvYXJkX3BsYXllcl9hdHRhY2tzID0gYXR0YWNrR3JpZEZhY3RvcnkoKTtcbiAgICBjb25zdCBib2FyZF9jb21wdXRlcl9hdHRhY2tzID0gYXR0YWNrR3JpZEZhY3RvcnkoKTtcblxuICAgIGxldCBwbGF5ZXJUdXJuUmVzdWx0ID0gJyc7XG4gICAgbGV0IGNvbXB1dGVyVHVyblJlc3VsdCA9ICcnO1xuXG4gICAgYm9hcmRfcGxheWVyX3NoaXBzLmluaXREZWZhdWx0U2hpcHMoKTtcbiAgICBib2FyZF9jb21wdXRlcl9zaGlwcy5pbml0RGVmYXVsdFNoaXBzKCk7XG4gICAgYm9hcmRfY29tcHV0ZXJfc2hpcHMucmFuZG9taXplKCk7XG4gICAgY29uc3QgY29tcHV0ZXJUYXJnZXRpbmdBSSA9IGNvbXB1dGVyVGFyZ2V0aW5nQUlGYWN0b3J5KGJvYXJkX2NvbXB1dGVyX2F0dGFja3MpO1xuICAgIGxldCBhdHRhY2tMb2NhdGlvbjtcbiAgICBcbiAgICBjb25zdCBnZXRTaGlwR3JpZCA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIGJvYXJkX3BsYXllcl9zaGlwcy5nZXRTaGlwR3JpZCgpO1xuICAgIH1cblxuICAgIGNvbnN0IGdldFNoaXBHcmlkV3JhcHBlciA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIGJvYXJkX3BsYXllcl9zaGlwcztcbiAgICB9XG5cbiAgICBjb25zdCBwcm9jZXNzVXNlcklucHV0ID0gKHJvdyAsIGNvbCkgPT4ge1xuICAgICAgICAvL2NvbnNvbGUubG9nKGBWYWxpZCBwbGF5ZXIgYXR0YWNrICgke3Jvd30sICR7Y29sfSk6ICR7Ym9hcmRfcGxheWVyX2F0dGFja3MuaXNWYWxpZEF0dGFjayhyb3csIGNvbCl9YCk7XG4gICAgICAgIGlmKCFib2FyZF9wbGF5ZXJfYXR0YWNrcy5pc1ZhbGlkQXR0YWNrKHJvdywgY29sKSl7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgYm9hcmRfY29tcHV0ZXJfc2hpcHMucmVjZWl2ZUF0dGFjayhyb3csIGNvbCk7XG4gICAgICAgIHBsYXllclR1cm5SZXN1bHQgPSBib2FyZF9jb21wdXRlcl9zaGlwcy5nZXRPdXRjb21lKCk7XG4gICAgICAgIGJvYXJkX3BsYXllcl9hdHRhY2tzLnJlY29yZEF0dGFjayhyb3csIGNvbCk7XG4gICAgfVxuXG4gICAgY29uc3QgaXNBdHRhY2thYmxlQnlQbGF5ZXIgPSAocm93LCBjb2wpID0+IHtcbiAgICAgICAgcmV0dXJuIGJvYXJkX3BsYXllcl9hdHRhY2tzLmlzVmFsaWRBdHRhY2socm93LCBjb2wpO1xuICAgIH1cblxuICAgIGNvbnN0IHdpbkNoZWNrUGxheWVyID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gYm9hcmRfY29tcHV0ZXJfc2hpcHMuaXNEZWZlYXRlZCgpO1xuICAgIH1cblxuICAgIGNvbnN0IHdpbkNoZWNrQ29tcHV0ZXIgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBib2FyZF9wbGF5ZXJfc2hpcHMuaXNEZWZlYXRlZCgpO1xuICAgIH1cblxuICAgIGNvbnN0IGlzU2hpcFByZXNlbnRBdCA9IChyb3csIGNvbCwgdGFyZ2V0KSA9PiB7XG4gICAgICAgIGxldCBib2FyZCA9IHRhcmdldCA9PT0gJ2NvbXB1dGVyJyA/IGJvYXJkX2NvbXB1dGVyX3NoaXBzIDogYm9hcmRfcGxheWVyX3NoaXBzO1xuICAgICAgICByZXR1cm4gYm9hcmQuaXNTaGlwUHJlc2VudEF0KHJvdywgY29sKTtcbiAgICB9XG5cbiAgICBjb25zdCBwcm9jZXNzQ29tcHV0ZXJBdHRhY2sgPSAoKSA9PiB7XG4gICAgICAgIGxldCB0YXJnZXQgPSBjb21wdXRlclRhcmdldGluZ0FJLnBpY2tUYXJnZXRTaW1wbGUoKTtcbiAgICAgICAgLy9jb25zb2xlLmxvZyhgVmFsaWQgY29tcHV0ZXIgYXR0YWNrICgke3RhcmdldC5yb3d9LCAke3RhcmdldC5jb2x9KTogJHtib2FyZF9jb21wdXRlcl9hdHRhY2tzLmlzVmFsaWRBdHRhY2sodGFyZ2V0LnJvdywgdGFyZ2V0LmNvbCl9YCk7XG4gICAgICAgIGlmKCFib2FyZF9jb21wdXRlcl9hdHRhY2tzLmlzVmFsaWRBdHRhY2sodGFyZ2V0LnJvdywgdGFyZ2V0LmNvbCkpe1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2dhbWUgbWFzdGVyOiBwcm9jZXNzQ29tcHV0ZXJBdHRhY2tFcnJvcicpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGJvYXJkX3BsYXllcl9zaGlwcy5yZWNlaXZlQXR0YWNrKHRhcmdldC5yb3csIHRhcmdldC5jb2wpO1xuICAgICAgICBjb21wdXRlclR1cm5SZXN1bHQgPSBib2FyZF9wbGF5ZXJfc2hpcHMuZ2V0T3V0Y29tZSgpO1xuICAgICAgICBib2FyZF9jb21wdXRlcl9hdHRhY2tzLnJlY29yZEF0dGFjayh0YXJnZXQucm93LCB0YXJnZXQuY29sKTtcbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG5cbiAgICBjb25zdCBnZXRQbGF5ZXJUdXJuUmVzdWx0ID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gcGxheWVyVHVyblJlc3VsdDtcbiAgICB9XG5cbiAgICBjb25zdCBnZXRDb21wdXRlclR1cm5SZXN1bHQgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBjb21wdXRlclR1cm5SZXN1bHQ7XG4gICAgfVxuXG4gICAgY29uc3QgbW92ZVNoaXAgPSAoc2hpcElELCBkaXJlY3Rpb24pID0+IHtcbiAgICAgICAgYm9hcmRfcGxheWVyX3NoaXBzLm1vdmVTaGlwKHNoaXBJRCwgZGlyZWN0aW9uKTtcbiAgICB9XG5cbiAgICBjb25zdCByb3RhdGVTaGlwID0gKHNoaXBJRCwgZGlyZWN0aW9uKSA9PiB7XG4gICAgICAgIGJvYXJkX3BsYXllcl9zaGlwcy5yb3RhdGVTaGlwKHNoaXBJRCk7XG4gICAgfVxuXG4gICAgY29uc3QgZ2V0TG9jYXRpb25DaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBib2FyZF9wbGF5ZXJfc2hpcHMuZ2V0TG9jYXRpb25DaGFuZ2UoKTtcbiAgICB9XG5cbiAgICBjb25zdCBnZXRFcnJvck1zZyA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIGJvYXJkX3BsYXllcl9zaGlwcy5nZXRFcnJvck1zZygpO1xuICAgIH1cblxuICAgIGNvbnN0IGdldFBvc3NpYmxlTW92ZSA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIGJvYXJkX3BsYXllcl9zaGlwcy5nZXRQb3NzaWJsZU1vdmUoKTtcbiAgICB9XG5cbiAgICBjb25zdCByYW5kb21pemVQbGF5ZXJCb2FyZCA9ICgpID0+IHtcbiAgICAgICAgYm9hcmRfcGxheWVyX3NoaXBzLnJhbmRvbWl6ZSgpO1xuICAgIH1cblxuICAgIGNvbnN0IHJhbmRvbWl6ZUNvbXB1dGVyQm9hcmQgPSAoKSA9PiB7XG4gICAgICAgIGJvYXJkX2NvbXB1dGVyX3NoaXBzLnJhbmRvbWl6ZSgpO1xuICAgIH1cblxuICAgIHJldHVybiB7IFxuICAgICAgICBnZXRTaGlwR3JpZCwgXG4gICAgICAgIGdldFNoaXBHcmlkV3JhcHBlcixcbiAgICAgICAgcHJvY2Vzc1VzZXJJbnB1dCwgXG4gICAgICAgIGlzQXR0YWNrYWJsZUJ5UGxheWVyLCBcbiAgICAgICAgd2luQ2hlY2tQbGF5ZXIsIFxuICAgICAgICB3aW5DaGVja0NvbXB1dGVyLCBcbiAgICAgICAgaXNTaGlwUHJlc2VudEF0LFxuICAgICAgICBwcm9jZXNzQ29tcHV0ZXJBdHRhY2ssXG4gICAgICAgIGdldFBsYXllclR1cm5SZXN1bHQsXG4gICAgICAgIGdldENvbXB1dGVyVHVyblJlc3VsdCxcbiAgICAgICAgbW92ZVNoaXAsXG4gICAgICAgIHJvdGF0ZVNoaXAsXG4gICAgICAgIGdldExvY2F0aW9uQ2hhbmdlLFxuICAgICAgICBnZXRFcnJvck1zZyxcbiAgICAgICAgZ2V0UG9zc2libGVNb3ZlLFxuICAgICAgICByYW5kb21pemVQbGF5ZXJCb2FyZCxcbiAgICAgICAgcmFuZG9taXplQ29tcHV0ZXJCb2FyZFxuICAgIH07XG59XG5cblxuZXhwb3J0IHsgXG4gICAgZ2FtZU1hc3RlckZhY3Rvcnlcbn07IiwiY29uc3QgY29tcHV0ZXJUYXJnZXRpbmdBSUZhY3RvcnkgPSAoYm9hcmQpID0+IHtcbiAgICBsZXQgbGFzdENvb3JkaW5hdGVzSGl0O1xuICAgIGxldCBoaXRTaGlwID0gZmFsc2U7XG4gICAgbGV0IGdldFJhbmQgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMCk7XG4gICAgfVxuICAgIGxldCBwaWNrVGFyZ2V0U2ltcGxlID0gKCkgPT4ge1xuICAgICAgICBsZXQgcm93ID0gZ2V0UmFuZCgpO1xuICAgICAgICBsZXQgY29sID0gZ2V0UmFuZCgpO1xuICAgICAgICB3aGlsZSghYm9hcmQuaXNWYWxpZEF0dGFjayhyb3csIGNvbCkpe1xuICAgICAgICAgICAgY29uc29sZS5sb2coYCgke3Jvd30sICR7Y29sfSkgaXMgaW52YWxpZC4gUmVyb2xsaW5nYClcbiAgICAgICAgICAgIHJvdyA9IGdldFJhbmQoKTtcbiAgICAgICAgICAgIGNvbCA9IGdldFJhbmQoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zb2xlLmxvZyhgQUkgZmluYWwgdGFyZ2V0ICgke3Jvd30sICR7Y29sfSlgKTtcbiAgICAgICAgcmV0dXJuIHtyb3csIGNvbH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgcGlja1RhcmdldFNpbXBsZSB9O1xufVxuXG5leHBvcnQgeyBcbiAgICBjb21wdXRlclRhcmdldGluZ0FJRmFjdG9yeVxufTsiLCJpbXBvcnQgeyBcbiAgICB3ZWJzaXRlTWFuYWdlckZhY3Rvcnlcbn0gZnJvbSAnLi93ZWJzaXRlTWFuYWdlcic7XG5pbXBvcnQgJy4vc3R5bGUuY3NzJztcblxuY29uc3Qgc2l0ZU1hbmFnZXIgPSB3ZWJzaXRlTWFuYWdlckZhY3RvcnkoKTtcbnNpdGVNYW5hZ2VyLmluaXRpYXRlKCk7Il0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfRVhQT1JUX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwib3B0aW9ucyIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjb3VudCIsImluZGV4QnlJZGVudGlmaWVyIiwib2JqIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsInVwZGF0ZXIiLCJhZGRFbGVtZW50U3R5bGUiLCJieUluZGV4Iiwic3BsaWNlIiwiYXBpIiwiZG9tQVBJIiwidXBkYXRlIiwibmV3T2JqIiwicmVtb3ZlIiwibGFzdElkZW50aWZpZXJzIiwibmV3TGlzdCIsImluZGV4IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJtZW1vIiwiaW5zZXJ0Iiwic3R5bGUiLCJ0YXJnZXQiLCJzdHlsZVRhcmdldCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsIndpbmRvdyIsIkhUTUxJRnJhbWVFbGVtZW50IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsImUiLCJnZXRUYXJnZXQiLCJFcnJvciIsImFwcGVuZENoaWxkIiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsIm4iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwiZCIsImEiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJuYyIsImRpc3BsYXlTaGlwcyIsInNoaXBHcmlkIiwidGFibGUiLCJyb3ciLCJjb2wiLCJjaGlsZHJlbiIsImNsYXNzTGlzdCIsImFkZCIsInZpZXdDb250cm9sbGVyIiwic2hpcFRCb2R5IiwiYXR0YWNrR3JpZCIsImVycm9yQ29udGFpbmVyIiwiZXJyb3JNZXNzYWdlIiwibXNnT25lIiwibXNnVHdvIiwic2hpcFNlbGVjdG9yIiwiYnV0dG9uU3VpdGUiLCJnYW1lTWFzdGVyIiwiY2xlYXJFeGlzdGluZ0hpZ2hsaWdodHMiLCJnZXRUYWJsZUNlbGwiLCJjcmVhdGVIaWdobGlnaHRpbmciLCJzaGlwR3JpZFdyYXBwZXIiLCJvbmNoYW5nZSIsImV2ZW50Iiwic2hpcElEIiwidmFsdWUiLCJjb29yZGluYXRlcyIsImdldFNoaXBMb2NhdGlvbiIsImNvb3JkIiwiY29uc29sZSIsImxvZyIsIm15VEQiLCJtYWtlQXR0YWNrR3JpZENsaWNrYWJsZSIsInByb2Nlc3NVc2VySW5wdXQiLCJvbmNsaWNrIiwiY2xpY2siLCJ1cGRhdGVTaGlwVmlldyIsImdldFBvc3NpYmxlTW92ZSIsImxvY2F0aW9uQ2hhbmdlIiwiZ2V0TG9jYXRpb25DaGFuZ2UiLCJsb2NhdGlvbiIsIm9sZExvY2F0aW9ucyIsImNlbGwiLCJuZXdMb2NhdGlvbnMiLCJ1cGRhdGVFcnJvck1zZyIsImVycm9yQ29kZSIsImdldEVycm9yTXNnIiwidGV4dENvbnRlbnQiLCJ2aXNpYmlsaXR5Iiwic2V0VXBWaWV3IiwiZ2FtZSIsImNvbnRhaW5lciIsImdldFNoaXBHcmlkIiwic2V0VXBNYWluIiwic2V0VXAiLCJ1cCIsImxlZnQiLCJkb3duIiwicmlnaHQiLCJyb3RhdGUiLCJyYW5kb21pemUiLCJzdGFydCIsImxvYWRHYW1lTWFzdGVyIiwiZGlzYWJsZWQiLCJyYW5kb21pemVQbGF5ZXJCb2FyZCIsImNsZWFyU2hpcERpc3BsYXkiLCJsb2FkQnV0dG9uRnVuY3Rpb25hbGl0eSIsImdldFNoaXBHcmlkV3JhcHBlciIsIm1vdmVTaGlwIiwicm90YXRlU2hpcCIsIm1hcmtDb21wdXRlckF0dGFjayIsImlzU2hpcFByZXNlbnRBdCIsInVwZGF0ZU1zZ09uZSIsIm1zZyIsInVwZGF0ZU1zZ1R3byIsImxvY2tvdXRBdHRhY2tHcmlkIiwidGFibGVSb3ciLCJzaGlwRmFjdG9yeSIsImxlbiIsImRpciIsImRpcmVjdGlvbiIsImhpdHNTdXN0YWluZWQiLCJzdW5rIiwiZ2V0SGl0c1N1c3RhaW5lZCIsImhpdCIsInNldERpcmVjdGlvbiIsIm5ld0RpcmVjdGlvbiIsImlzU3VuayIsImdldExlbmd0aCIsImdldERpcmVjdGlvbiIsImdldElEIiwic2hpcEdyaWRGYWN0b3J5IiwiQXJyYXkiLCJmaWxsIiwic2hpcEFyciIsInNoaXBMb2NhdGlvbnMiLCJ0cmFmZmljQ29udHJvbGxlciIsInNoaXBHcmlkSW4iLCJzaGlwTG9jYXRpb25zSW4iLCJzaGlwQXJySW4iLCJlcnJvciIsInBvc3NpYmxlTW92ZSIsImlzT3V0T2ZCb3VuZHNDb29yZCIsImlzT3V0T2ZCb3VuZHMiLCJyZXNldExvY2F0aW9uQ2hhbmdlIiwiaXNTcGFjZVZpb2xhdGlvbkNlbGwiLCJpc1NwYWNlVmlvbGF0aW9uIiwicmVtb3ZlT2xkTG9jYXRpb24iLCJtYXJrTmV3TG9jYXRpb24iLCJzdHJ1Y3R1cmVkQ2xvbmUiLCJyb3dNb2QiLCJjb2xNb2QiLCJnZXROZXdMb2NhdGlvbnMiLCJzaGlwIiwiYW5jaG9yTG9jYXRpb24iLCJnZXROZXdSb3RhdGlvbkxvY2F0aW9ucyIsImdldEVycm9yIiwiaGFzU3BhY2VDb25mbGljdCIsInN1cnJvdW5kaW5nTG9jYXRpb25zIiwiaGFzU3BhY2VDb25mbGljdEZyb21Mb2NhdGlvbnMiLCJtb2QiLCJnZXRTdXJyb3VuZGluZ0xvY2F0aW9ucyIsInByaW50R3JpZCIsInJvd1N0ciIsInRyYWZmaWNDb250cm9sbGVyRmFjdG9yeSIsIm91dGNvbWUiLCJpbkJvdW5kcyIsImlzVmFsaWRTaGlwUGxhY2VtZW50IiwicGxhY2VTaGlwIiwiZ2V0UmFuZG9tSW50IiwibWF4IiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwicmVjZWl2ZUF0dGFjayIsImdldE91dGNvbWUiLCJpc0RlZmVhdGVkIiwiaW5pdERlZmF1bHRTaGlwcyIsInNoaXBfMSIsInNoaXBfMiIsInNoaXBfMyIsInNoaXBfNCIsInNoaXBfNSIsInNoaXBfNiIsInNoaXBfNyIsInNoaXBfOCIsInNoaXBfOSIsInNoaXBfMTAiLCJjcmVhdGVEZWZhdWx0U2hpcHMiLCJjbGVhckdyaWQiLCJtZW1iZXIiLCJjbGVhclNoaXBMb2NhdGlvbnMiLCJnZXRTaGlwQXJyIiwiZ2V0U2hpcExvY2F0aW9ucyIsImF0dGFja0dyaWRGYWN0b3J5IiwiYXR0YWNrcyIsImlzVmFsaWRBdHRhY2siLCJyZWNvcmRBdHRhY2siLCJsb2NhbHMiLCJib2FyZF9wbGF5ZXJfc2hpcHMiLCJib2FyZF9jb21wdXRlcl9zaGlwcyIsImJvYXJkX3BsYXllcl9hdHRhY2tzIiwiYm9hcmRfY29tcHV0ZXJfYXR0YWNrcyIsInBsYXllclR1cm5SZXN1bHQiLCJjb21wdXRlclR1cm5SZXN1bHQiLCJjb21wdXRlclRhcmdldGluZ0FJIiwiYm9hcmQiLCJnZXRSYW5kIiwicGlja1RhcmdldFNpbXBsZSIsImNvbXB1dGVyVGFyZ2V0aW5nQUlGYWN0b3J5IiwiaXNBdHRhY2thYmxlQnlQbGF5ZXIiLCJ3aW5DaGVja1BsYXllciIsIndpbkNoZWNrQ29tcHV0ZXIiLCJwcm9jZXNzQ29tcHV0ZXJBdHRhY2siLCJnZXRQbGF5ZXJUdXJuUmVzdWx0IiwiZ2V0Q29tcHV0ZXJUdXJuUmVzdWx0IiwicmFuZG9taXplQ29tcHV0ZXJCb2FyZCIsImdhbWVNYXN0ZXJGYWN0b3J5IiwibXlWaWV3Q29udHJvbGxlciIsInNoaXBQcmVzZW50IiwibWFya0F0dGFjayIsImRhdGFzZXQiLCJzZXRUaW1lb3V0IiwiaW5pdGlhdGUiLCJ3ZWJzaXRlTWFuYWdlckZhY3RvcnkiXSwic291cmNlUm9vdCI6IiJ9