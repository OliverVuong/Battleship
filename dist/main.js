(()=>{"use strict";var e={426:(e,t,o)=>{o.d(t,{Z:()=>a});var n=o(537),r=o.n(n),i=o(645),s=o.n(i)()(r());s.push([e.id,"body {\n    background-color: lightgray;\n}\n\n.animate {\n    /* animation: 0.7s slide-in 0.7s 3 linear; */\n    animation-name: slide-in;\n    animation-duration: 0.3s;\n    animation-iteration-count: 3;\n}\n  \n@keyframes slide-in {\n    0% {\n        transform: scale(0.25);\n        transform: translateY(-1000px);\n    }\n    80%{\n        transform: scale(0.25);\n    }\n    100% {\n        transform: translateY(0);\n        transform: scale(1);\n    }\n}\n\nth, td{\n    margin: 0;\n    padding: 0;\n    height: 32px;\n    width: 32px;\n}\n\ntd {\n    border: 1px solid black;\n}\n\ndiv.hit, div.ship {\n    margin: 0;\n    padding: 0;\n    \n    height: 100%;\n    width: 100%;\n}\n\ndiv.ship {\n    background-color: blue;\n}\n\ndiv.hit {\n    background-color: red;\n}\n\ndiv.hit.ship {\n    border: 5px solid blue;\n}\n\ntd.ship {\n    background-color: blue;\n}\n\ntd.miss, td.hit {\n    background-color: red;\n}\n\ntd.hit {\n    border: 5px solid blue;\n    box-sizing: border-box;\n}\n\ntd.selected {\n    background-color: turquoise;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,2BAA2B;AAC/B;;AAEA;IACI,4CAA4C;IAC5C,wBAAwB;IACxB,wBAAwB;IACxB,4BAA4B;AAChC;;AAEA;IACI;QACI,sBAAsB;QACtB,8BAA8B;IAClC;IACA;QACI,sBAAsB;IAC1B;IACA;QACI,wBAAwB;QACxB,mBAAmB;IACvB;AACJ;;AAEA;IACI,SAAS;IACT,UAAU;IACV,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,SAAS;IACT,UAAU;;IAEV,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,sBAAsB;IACtB,sBAAsB;AAC1B;;AAEA;IACI,2BAA2B;AAC/B",sourcesContent:["body {\n    background-color: lightgray;\n}\n\n.animate {\n    /* animation: 0.7s slide-in 0.7s 3 linear; */\n    animation-name: slide-in;\n    animation-duration: 0.3s;\n    animation-iteration-count: 3;\n}\n  \n@keyframes slide-in {\n    0% {\n        transform: scale(0.25);\n        transform: translateY(-1000px);\n    }\n    80%{\n        transform: scale(0.25);\n    }\n    100% {\n        transform: translateY(0);\n        transform: scale(1);\n    }\n}\n\nth, td{\n    margin: 0;\n    padding: 0;\n    height: 32px;\n    width: 32px;\n}\n\ntd {\n    border: 1px solid black;\n}\n\ndiv.hit, div.ship {\n    margin: 0;\n    padding: 0;\n    \n    height: 100%;\n    width: 100%;\n}\n\ndiv.ship {\n    background-color: blue;\n}\n\ndiv.hit {\n    background-color: red;\n}\n\ndiv.hit.ship {\n    border: 5px solid blue;\n}\n\ntd.ship {\n    background-color: blue;\n}\n\ntd.miss, td.hit {\n    background-color: red;\n}\n\ntd.hit {\n    border: 5px solid blue;\n    box-sizing: border-box;\n}\n\ntd.selected {\n    background-color: turquoise;\n}"],sourceRoot:""}]);const a=s},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var o="",n=void 0!==t[5];return t[4]&&(o+="@supports (".concat(t[4],") {")),t[2]&&(o+="@media ".concat(t[2]," {")),n&&(o+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),o+=e(t),n&&(o+="}"),t[2]&&(o+="}"),t[4]&&(o+="}"),o})).join("")},t.i=function(e,o,n,r,i){"string"==typeof e&&(e=[[null,e,void 0]]);var s={};if(n)for(var a=0;a<this.length;a++){var l=this[a][0];null!=l&&(s[l]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);n&&s[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),o&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=o):u[2]=o),r&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=r):u[4]="".concat(r)),t.push(u))}},t}},537:e=>{e.exports=function(e){var t=e[1],o=e[3];if(!o)return t;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),i="/*# ".concat(r," */");return[t].concat([i]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function o(e){for(var o=-1,n=0;n<t.length;n++)if(t[n].identifier===e){o=n;break}return o}function n(e,n){for(var i={},s=[],a=0;a<e.length;a++){var l=e[a],c=n.base?l[0]+n.base:l[0],u=i[c]||0,d="".concat(c," ").concat(u);i[c]=u+1;var p=o(d),h={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==p)t[p].references++,t[p].updater(h);else{var A=r(h,n);n.byIndex=a,t.splice(a,0,{identifier:d,updater:A,references:1})}s.push(d)}return s}function r(e,t){var o=t.domAPI(t);return o.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;o.update(e=t)}else o.remove()}}e.exports=function(e,r){var i=n(e=e||[],r=r||{});return function(e){e=e||[];for(var s=0;s<i.length;s++){var a=o(i[s]);t[a].references--}for(var l=n(e,r),c=0;c<i.length;c++){var u=o(i[c]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}i=l}}},569:e=>{var t={};e.exports=function(e,o){var n=function(e){if(void 0===t[e]){var o=document.querySelector(e);if(window.HTMLIFrameElement&&o instanceof window.HTMLIFrameElement)try{o=o.contentDocument.head}catch(e){o=null}t[e]=o}return t[e]}(e);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(o)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,o)=>{e.exports=function(e){var t=o.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(o){!function(e,t,o){var n="";o.supports&&(n+="@supports (".concat(o.supports,") {")),o.media&&(n+="@media ".concat(o.media," {"));var r=void 0!==o.layer;r&&(n+="@layer".concat(o.layer.length>0?" ".concat(o.layer):""," {")),n+=o.css,r&&(n+="}"),o.media&&(n+="}"),o.supports&&(n+="}");var i=o.sourceMap;i&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(n,e,t.options)}(t,e,o)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function o(n){var r=t[n];if(void 0!==r)return r.exports;var i=t[n]={id:n,exports:{}};return e[n](i,i.exports,o),i.exports}o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.nc=void 0,(()=>{const e=(e,t)=>{for(let o=0;o<10;o++)for(let n=0;n<10;n++)e[o][n]&&t.children[o+1].children[n+1].classList.add("ship")},t=()=>{let t,o,n,r,i,s,a,l;const c=()=>{for(let e=0;e<10;e++)for(let t=0;t<10;t++)f(e,t).classList.remove("selected")},u=e=>{s.onchange=t=>{c();let o=s.value,n=e.getShipLocation(o);for(let e of n){console.log("coords:"),console.log(e);let t=f(e.row,e.col);console.log("myTD"),console.log(t),t.classList.add("selected")}}},d=e=>{for(let t=0;t<10;t++)for(let n=0;n<10;n++)o.children[t+1].children[n+1].onclick=o=>{e(t,n,o)}},p=()=>{if(!l.getPossibleMove())return void console.log("no move exectued- exiting out of update ship view");let e=l.getLocationChange();for(let t of e.oldLocations){let e=f(t.row,t.col);e.classList.remove("ship"),e.classList.remove("selected")}for(let t of e.newLocations){let e=f(t.row,t.col);e.classList.add("ship"),e.classList.add("selected")}},h=()=>{let e=l.getErrorMsg();console.log(e),n.textContent="outOfBounds"===e?"Cannot move ships out of bounds.":"spaceViolation"===e?"Cannot move ships to close. A minimum of one empty space between ships is required.":""},A=(o,n)=>{document.querySelector("#content"),((o,n,r)=>{e(n.getShipGrid(),t)})(0,o)},f=(e,o)=>t.children[e+1].children[o+1];return{setUp:(g,m)=>{t=document.querySelector(".shipGrid"),o=document.querySelector(".attackGrid"),n=document.querySelector(".errorText"),r=document.querySelector(".msgOne"),i=document.querySelector(".msgTwo"),s=document.querySelector("#ship-selector"),a={},a.up=document.querySelector(".up"),a.left=document.querySelector(".left"),a.down=document.querySelector(".down"),a.right=document.querySelector(".right"),a.rotate=document.querySelector(".rotate"),a.randomize=document.querySelector(".randomize"),a.start=document.querySelector(".start"),u(),(e=>{l=e})(g),((o,n)=>{a.start.onclick=()=>{d(o),a.up.disabled=!0,a.left.disabled=!0,a.down.disabled=!0,a.right.disabled=!0,a.rotate.disabled=!0,a.randomize.disabled=!0,a.start.disabled=!0,s.disabled=!0,c()},a.randomize.onclick=()=>{l.randomizePlayerBoard(),(()=>{for(let e=0;e<10;e++)for(let t=0;t<10;t++){let o=f(e,t);o.classList.remove("ship"),o.classList.remove("selected")}})(),s.value="none",e(l.getShipGrid(),t)},u(n)})(m,g.getShipGridWrapper()),a.up.onclick=()=>{l.moveShip(s.value,"up"),p(),h()},a.down.onclick=()=>{l.moveShip(s.value,"down"),p(),h()},a.right.onclick=()=>{l.moveShip(s.value,"right"),p(),h()},a.left.onclick=()=>{l.moveShip(s.value,"left"),p(),h()},a.rotate.onclick=()=>{l.rotateShip(s.value),p(),h()},A(g)},setUpView:A,markComputerAttack:(e,t)=>{let o=f(e,t);l.isShipPresentAt(e,t,"player")?o.classList.add("hit"):o.classList.add("miss"),o.classList.add("animate")},updateMsgOne:(e,t,o)=>{let n;"miss"===o?n=`You fire at (${e}, ${t}) but hit nothing.`:"hit"===o?n=`You fire at (${e}, ${t}) and score a hit.`:"sunk"===o?n=`You fire at (${e}, ${t}), score a hit, and sink a ship.`:"loss"===o&&(n="Your opponent has sunk all your ships. You lose the match."),r.textContent=n},updateMsgTwo:(e,t,o)=>{let n;"miss"===o?n=`Your opponent fires at (${e}, ${t}) but hits nothing.`:"hit"===o?n=`Your opponent fires at (${e}, ${t}) and scores a hit.`:"sunk"===o?n=`Your opponent fires at (${e}, ${t}), scores a hit, and sinks a ship.`:"win"===o&&(n="You have sunk all your opponent's ships and won!"),i.textContent=n},updateShipView:p,lockoutAttackGrid:()=>{for(let e=0;e<10;e++){let t=o.children[e+1];for(let e=0;e<10;e++)t.children[e+1].onclick=null}},makeAttackGridClickable:d}},n=(e,t="noID",o="south")=>{const n=t,r=e;let i=o,s=0,a=!1;return{getHitsSustained:()=>s,hit:()=>{s++,s===r&&(a=!0)},setDirection:e=>{i=e},isSunk:()=>a,getLength:()=>r,getDirection:()=>i,getID:()=>n}},r=()=>{const e=Array(10).fill().map((()=>Array(10).fill(null))),t=[],o={},r=((e,t,o)=>{let n=e,r=t,i=o,s="none",a={},l=!1;const c=(e,t)=>e<0||e>=10||t<0||t>=10,u=e=>{for(let t of e)if(c(t.row,t.col))return!0;return!1},d=()=>{a={}},p=(e,t,o)=>!c(e,t)&&null!==n[e][t]&&void 0!==n[e][t]&&n[e][t].getID()!==o,h=(e,t)=>{for(let o of t){let t=o.row,n=o.col;if(p(t-1,n+1,e))return!0;if(p(t,n+1,e))return!0;if(p(t+1,n+1,e))return!0;if(p(t+1,n,e))return!0;if(p(t+1,n-1,e))return!0;if(p(t,n-1,e))return!0;if(p(t-1,n-1,e))return!0;if(p(t-1,n,e))return!0}return!1},A=(e,t)=>{for(let e of t)n[e.row][e.col]=null;r[e]=[]},f=(e,t)=>{for(let o of t)n[o.row][o.col]=i[e-1],r[e].push(structuredClone(o))};return{moveShip:(e,t)=>{let o=structuredClone(r[e]),n=structuredClone(((e,t)=>{let o=[],n=0,r=0;switch(t){case"up":n=-1;break;case"down":n=1;break;case"left":r=-1;break;case"right":r=1}for(let t of e){let e=t.row+n,i=t.col+r;o.push({row:e,col:i})}return o})(o,t));return u(n)?(s="outOfBounds",d(),void(l=!1)):h(e,n)?(s="spaceViolation",d(),void(l=!1)):(s="",l=!0,a={oldLocations:o,newLocations:n},A(e,o),void f(e,n))},rotateShip:e=>{let t=i[e-1],o="south"===t.getDirection()?"east":"south",n=r[e],c=((e,t)=>{let o=e[0],n=[],r=0,i=0,s=o.row,a=o.col;switch(t){case"south":r=1;break;case"east":i=1}n.push({row:s,col:a});for(let t=1;t<e.length;t++)s+=r,a+=i,n.push({row:s,col:a});return n})(n,o);return u(c)?(s="outOfBounds",d(),void(l=!1)):h(e,c)?(s="spaceViolation",d(),void(l=!1)):(s="",l=!0,a={oldLocations:n,newLocations:c},t.setDirection(o),A(e,n),void f(e,c))},getError:()=>s,getPossibleMove:()=>l,getLocationChange:()=>a,hasSpaceConflict:(e,t,o)=>(e=>{for(let t of e)if(!c(t.row,t.col)&&null!==n[t.row][t.col]&&void 0!==n[t.row][t.col])return console.log("conflict "),console.log(n[t.row][t.col]),console.log(n[t.row][t.col].getID()),console.log(t),!0})(((e,t,o)=>{let n=[],r=e.getDirection(),i=e.getLength();if("south"===r){n.push({row:t-1,col:o}),n.push({row:t-1,col:o-1}),n.push({row:t-1,col:o+1});for(let e=0;e<i;e++)n.push({row:t+e,col:o-1}),n.push({row:t+e,col:o+1});n.push({row:t+i,col:o}),n.push({row:t+i,col:o-1}),n.push({row:t+i,col:o+1})}else{n.push({row:t,col:o-1}),n.push({row:t+1,col:o-1}),n.push({row:t-1,col:o-1});for(let e=0;e<i;e++)n.push({row:t-1,col:o+e}),n.push({row:t+1,col:o+e});n.push({row:t,col:o+i}),n.push({row:t-1,col:o+i}),n.push({row:t+1,col:o+i})}return console.log("surroundsing of ship "+e.getID()),console.log(n),n})(e,t,o)),printGrid:e=>{for(let t=0;t<10;t++){let o=t+": ";for(let n=0;n<10;n++)e[t][n]?o+=e[t][n].getID():o+="_",o+=" ";console.log(o)}}}})(e,o,t);let i="";const s=(e,t)=>e>=0&&e<10&&t>=0&&t<10,a=(t,o,n)=>{let r="south"===t.getDirection()?1:0,i="east"===t.getDirection()?1:0;for(let a=0;a<t.getLength();a++){if(!s(o,n))return!1;if(null!=e[o][n])return!1;o+=r,n+=i}return!0},l=(t,n,i)=>{if(!a(t,n,i))throw r.printGrid(e),console.log(`Direction: ${t.getDirection()}`),new Error(`Failed to place ship ${t.getID()} at row: ${n}, col: ${i}`);o[t.getID()]=[];let s="south"===t.getDirection()?1:0,l="east"===t.getDirection()?1:0;for(let r=0;r<t.getLength();r++)e[n][i]=t,o[t.getID()].push({row:n,col:i}),n+=s,i+=l},c=e=>Math.floor(Math.random()*e);return{placeShip:l,getShipLocation:e=>o[e],receiveAttack:(t,o)=>{i="",e[t][o]?(e[t][o].hit(),i="hit",e[t][o].isSunk()&&(i="sunk")):i="miss"},getOutcome:()=>i,isDefeated:()=>{for(let e of t)if(!e.isSunk())return!1;return!0},initDefaultShips:()=>{(()=>{let e=n(4,"1","east"),o=n(2,"2","south"),r=n(2,"3","east"),i=n(3,"4","south"),s=n(1,"5","south"),a=n(3,"6","south"),l=n(2,"7","east"),c=n(1,"8"),u=n(1,"9"),d=n(1,"10");t.push(e),t.push(o),t.push(r),t.push(i),t.push(s),t.push(a),t.push(l),t.push(c),t.push(u),t.push(d)})(),l(t[0],0,4),l(t[1],0,9),l(t[2],2,0),l(t[3],3,4),l(t[4],3,6),l(t[5],4,9),l(t[6],5,0),l(t[7],8,0),l(t[8],9,5),l(t[9],9,9)},randomize:()=>{(()=>{for(let t=0;t<10;t++)for(let o=0;o<10;o++)e[t][o]=null})(),(()=>{for(let e in o)delete o[e]})();for(let e of t){let t,o,n;do{t=c(10),o=c(10),n=0===c(2)?"south":"east",e.setDirection(n)}while(!a(e,t,o)||r.hasSpaceConflict(e,t,o));l(e,t,o)}console.log("reached"),r.printGrid(e)},getShipGrid:()=>e,getShipArr:()=>t,getShipLocations:()=>o,isShipPresentAt:(t,o)=>null!=e[t][o],moveShip:(e,t)=>{r.moveShip(e,t)},rotateShip:e=>{r.rotateShip(e)},getLocationChange:()=>r.getLocationChange(),getErrorMsg:()=>r.getError(),getPossibleMove:()=>r.getPossibleMove()}},i=()=>{const e=Array(10).fill().map((()=>Array(10).fill(null)));return{isValidAttack:(t,o)=>((e,t)=>e>=0&&e<10&&t>=0&&t<10)(t,o)&&null===e[t][o],recordAttack:(t,o)=>{e[t][o]="hit"}}};var s=o(379),a=o.n(s),l=o(795),c=o.n(l),u=o(569),d=o.n(u),p=o(565),h=o.n(p),A=o(216),f=o.n(A),g=o(589),m=o.n(g),v=o(426),w={};w.styleTagTransform=m(),w.setAttributes=h(),w.insert=d().bind(null,"head"),w.domAPI=c(),w.insertStyleElement=f(),a()(v.Z,w),v.Z&&v.Z.locals&&v.Z.locals,(()=>{let e=(()=>{const e=r(),t=r(),o=i(),n=i();let s="",a="";e.initDefaultShips(),t.initDefaultShips();const l=(e=>{let t=()=>Math.floor(10*Math.random());return{pickTargetSimple:()=>{let o=t(),n=t();for(;!e.isValidAttack(o,n);)console.log(`(${o}, ${n}) is invalid. Rerolling`),o=t(),n=t();return console.log(`AI final target (${o}, ${n})`),{row:o,col:n}}}})(n);return{getShipGrid:()=>e.getShipGrid(),getShipGridWrapper:()=>e,processUserInput:(e,n)=>{o.isValidAttack(e,n)&&(t.receiveAttack(e,n),s=t.getOutcome(),o.recordAttack(e,n))},isAttackableByPlayer:(e,t)=>o.isValidAttack(e,t),winCheckPlayer:()=>t.isDefeated(),winCheckComputer:()=>e.isDefeated(),isShipPresentAt:(o,n,r)=>("computer"===r?t:e).isShipPresentAt(o,n),processComputerAttack:()=>{let t=l.pickTargetSimple();if(n.isValidAttack(t.row,t.col))return e.receiveAttack(t.row,t.col),a=e.getOutcome(),n.recordAttack(t.row,t.col),t;console.log("game master: processComputerAttackError")},getPlayerTurnResult:()=>s,getComputerTurnResult:()=>a,moveShip:(t,o)=>{e.moveShip(t,o)},rotateShip:(t,o)=>{e.rotateShip(t)},getLocationChange:()=>e.getLocationChange(),getErrorMsg:()=>e.getErrorMsg(),getPossibleMove:()=>e.getPossibleMove(),randomizePlayerBoard:()=>{e.randomize()},randomizeComputerBoard:()=>{t.randomize()}}})(),o=t();const n=(t,r,i)=>{if(!e.isAttackableByPlayer(t,r))return;if(o.lockoutAttackGrid(),((e,t)=>{console.log(e.target);let o=e.target;o.classList.add("animate"),t?o.classList.add("hit"):o.classList.add("miss")})(i,e.isShipPresentAt(i.target.dataset.row,i.target.dataset.col,"computer")),e.processUserInput(t,r),o.updateMsgOne(t,r,e.getPlayerTurnResult()),e.winCheckPlayer())return console.log("player wins"),void o.updateMsgTwo(0,0,"win");let s=e.processComputerAttack();setTimeout((()=>{o.markComputerAttack(s.row,s.col),o.makeAttackGridClickable(n)}),3e3),console.log(`Your opponent fires at (${s.row}, ${s.col}) and ${e.getComputerTurnResult()}`),o.updateMsgTwo(s.row,s.col,e.getComputerTurnResult()),e.winCheckComputer()&&(console.log("computer wins"),o.updateMsgTwo(0,0,"loss"))};return{initiate:()=>{o.setUp(e,n)},processUserInput:n,getShipGrid:()=>e.getShipGrid()}})().initiate()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,