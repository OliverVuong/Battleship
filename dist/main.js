(()=>{"use strict";var e={426:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(537),a=n.n(r),o=n(645),i=n.n(o)()(a());i.push([e.id,"body {\n    background-color: lightgray;\n}\n\n.animate {\n    animation: slide-in 0.7s both;\n}\n  \n@keyframes slide-in {\n    0% {\n        transform: translateY(-1000px);\n    }\n    100% {\n        transform: translateY(0);\n    }\n}\n\ndiv, td, tr {\n    margin: 0;\n    padding: 0;\n    border: solid black 1px;\n    max-height: 32px;\n    min-height: 32px;\n}\n\ndiv, td {\n    max-width: 32px;\n    min-width: 32px;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,2BAA2B;AAC/B;;AAEA;IACI,6BAA6B;AACjC;;AAEA;IACI;QACI,8BAA8B;IAClC;IACA;QACI,wBAAwB;IAC5B;AACJ;;AAEA;IACI,SAAS;IACT,UAAU;IACV,uBAAuB;IACvB,gBAAgB;IAChB,gBAAgB;AACpB;;AAEA;IACI,eAAe;IACf,eAAe;AACnB",sourcesContent:["body {\n    background-color: lightgray;\n}\n\n.animate {\n    animation: slide-in 0.7s both;\n}\n  \n@keyframes slide-in {\n    0% {\n        transform: translateY(-1000px);\n    }\n    100% {\n        transform: translateY(0);\n    }\n}\n\ndiv, td, tr {\n    margin: 0;\n    padding: 0;\n    border: solid black 1px;\n    max-height: 32px;\n    min-height: 32px;\n}\n\ndiv, td {\n    max-width: 32px;\n    min-width: 32px;\n}"],sourceRoot:""}]);const s=i},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,a,o){"string"==typeof e&&(e=[[null,e,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(i[c]=!0)}for(var l=0;l<e.length;l++){var p=[].concat(e[l]);r&&i[p[0]]||(void 0!==o&&(void 0===p[5]||(p[1]="@layer".concat(p[5].length>0?" ".concat(p[5]):""," {").concat(p[1],"}")),p[5]=o),n&&(p[2]?(p[1]="@media ".concat(p[2]," {").concat(p[1],"}"),p[2]=n):p[2]=n),a&&(p[4]?(p[1]="@supports (".concat(p[4],") {").concat(p[1],"}"),p[4]=a):p[4]="".concat(a)),t.push(p))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[t].concat([o]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var o={},i=[],s=0;s<e.length;s++){var c=e[s],l=r.base?c[0]+r.base:c[0],p=o[l]||0,d="".concat(l," ").concat(p);o[l]=p+1;var u=n(d),h={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==u)t[u].references++,t[u].updater(h);else{var f=a(h,r);r.byIndex=s,t.splice(s,0,{identifier:d,updater:f,references:1})}i.push(d)}return i}function a(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,a){var o=r(e=e||[],a=a||{});return function(e){e=e||[];for(var i=0;i<o.length;i++){var s=n(o[i]);t[s].references--}for(var c=r(e,a),l=0;l<o.length;l++){var p=n(o[l]);0===t[p].references&&(t[p].updater(),t.splice(p,1))}o=c}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={id:r,exports:{}};return e[r](o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0,(()=>{const e=document.querySelector("#content"),t=document.createElement("head"),r=document.createElement("main"),a=document.createElement("footer");e.appendChild(t),e.appendChild(r),e.appendChild(a);const o=(e,t)=>{let n=document.createElement("td");return n.classList.add("playerGrid"),n.dataset.row=e,n.dataset.col=t,n},i=e=>{let t=document.createElement("th");return t.textContent=e,t},s=e=>{let t=document.createElement("tr");t.dataset.row=e,t.appendChild(i(e));for(let n=0;n<10;n++)t.appendChild(o(e,n));return t},c=()=>{const e=document.createElement("table");e.appendChild((()=>{let e=document.createElement("tr");return e.appendChild(i("&nbsp;")),e.appendChild(i("A")),e.appendChild(i("B")),e.appendChild(i("C")),e.appendChild(i("D")),e.appendChild(i("E")),e.appendChild(i("F")),e.appendChild(i("G")),e.appendChild(i("H")),e.appendChild(i("I")),e.appendChild(i("J")),e})());for(let t=0;t<10;t++)e.appendChild(s(t));return e},l=()=>{let e;return{setUpView:(t,n)=>{const r=document.querySelector("#content");e=c(),r.appendChild(e),((e,t)=>{for(let n=0;n<10;n++)for(let r=0;r<10;r++)if(e[n][r]){let e=t.children[n+1].children[r+1],a=document.createElement("div");a.classList.add("ship"),a.textContent="s",e.appendChild(a)}})(t.getShipGrid(),e),r.appendChild((e=>{let t=c();for(let n=0;n<10;n++)for(let r=0;r<10;r++)t.children[n+1].children[r+1].onclick=t=>{e(n,r,t)};return t})(n))},markComputerAttack:(t,n)=>{let r=((t,n)=>e.children[t+1].children[n+1])(t,n);r.textContent="pch"}}},p=(e,t="noID",n="south")=>{const r=t,a=e,o=n;let i=0,s=!1;return{getHitsSustained:()=>i,hit:()=>{i++,i===a&&(s=!0)},isSunk:()=>s,getLength:()=>a,getDirection:()=>o,getID:()=>r}},d=()=>{const e=Array(10).fill().map((()=>Array(10).fill(null))),t=[],n=(e,t)=>e>=0&&e<10&&t>=0&&t<10,r=(r,a,o)=>{if(!((t,r,a)=>{let o="south"===t.getDirection()?1:0,i="east"===t.getDirection()?1:0;for(let s=0;s<t.getLength();s++){if(!n(r,a))return!1;if(null!=e[r][a])return!1;r+=o,a+=i}return!0})(r,a,o))throw new Error(`Failed to place ship ${r.getID()} at row: ${a}, col: ${o}`);t.push(r);let i="south"===r.getDirection()?1:0,s="east"===r.getDirection()?1:0;for(let t=0;t<r.getLength();t++)e[a][o]=r,a+=i,o+=s};return{placeShip:r,receiveAttack:(t,n)=>{e[t][n]&&e[t][n].hit()},isDefeated:()=>{for(let e of t)if(!e.isSunk())return!1;return!0},initDefaultShips:()=>{let e=p(4,"a","east");r(e,0,4),t.push(e);let n=p(2,"b","south");r(n,0,9),t.push(n);let a=p(2,"c","east");r(a,2,0),t.push(a);let o=p(3,"d","south");r(o,3,4),t.push(o);let i=p(1,"e","south");r(i,3,6),t.push(i);let s=p(3,"f","south");r(s,4,9),t.push(s);let c=p(2,"g","east");r(c,5,0),t.push(c);let l=p(1,"h");r(l,8,0),t.push(l);let d=p(1,"i");r(d,9,5),t.push(d);let u=p(1,"j");r(u,9,9),t.push(u)},getShipGrid:()=>e,isShipPresentAt:(t,n)=>null!=e[t][n]}},u=()=>{const e=Array(10).fill().map((()=>Array(10).fill(null)));return{isValidAttack:(t,n)=>((e,t)=>e>=0&&e<10&&t>=0&&t<10)(t,n)&&null===e[t][n],recordAttack:(t,n)=>{e[t][n]="hit"}}};var h=n(379),f=n.n(h),m=n(795),A=n.n(m),g=n(569),C=n.n(g),v=n(565),y=n.n(v),k=n(216),b=n.n(k),x=n(589),I=n.n(x),S=n(426),w={};w.styleTagTransform=I(),w.setAttributes=y(),w.insert=C().bind(null,"head"),w.domAPI=A(),w.insertStyleElement=b(),f()(S.Z,w),S.Z&&S.Z.locals&&S.Z.locals,(()=>{let e=(()=>{const e=d(),t=d(),n=u(),r=u();e.initDefaultShips(),t.initDefaultShips();const a=(e=>{let t=()=>Math.floor(10*Math.random());return{pickTargetSimple:()=>{let n=t(),r=t();for(;!e.isValidAttack(n,r);)n=t(),r=t();return{row:n,col:r}}}})(r);return{getShipGrid:()=>e.getShipGrid(),processUserInput:(e,r)=>{console.log(`Valid player attack (${e}, ${r}): ${n.isValidAttack(e,r)}`),n.isValidAttack(e,r)&&(t.receiveAttack(e,r),n.recordAttack(e,r))},isAttackableByPlayer:(e,t)=>n.isValidAttack(e,t),winCheckPlayer:()=>t.isDefeated(),winCheckComputer:()=>e.isDefeated(),isShipPresentAt:(n,r,a)=>("computer"===a?t:e).isShipPresentAt(n,r),processComputerAttack:()=>{let t=a.pickTargetSimple();if(console.log(`Valid computer attack (${t.row}, ${t.col}): ${r.isValidAttack(t.row,t.col)}`),r.isValidAttack(t.row,t.col))return e.receiveAttack(t.row,t.col),t;console.log("game master: processComputerAttackError")}}})(),t=l();const n=(n,r,a)=>{if(!e.isAttackableByPlayer(n,r))return;(e=>{console.log(e.target);let t=document.createElement("div");t.classList.add("hit"),t.classList.add("animate"),t.textContent="hit",e.target.appendChild(t)})(a),e.isShipPresentAt(n,r,"computer")&&console.log("SCUCESS"),e.processUserInput(n,r),e.winCheckPlayer()&&console.log("player wins");let o=e.processComputerAttack();console.log(o),t.markComputerAttack(o.row,o.col)};return{initiate:()=>{t.setUpView(e,n)},processUserInput:n,getShipGrid:()=>e.getShipGrid()}})().initiate()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,