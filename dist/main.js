(()=>{"use strict";var t={426:(t,e,n)=>{n.d(e,{Z:()=>s});var r=n(537),a=n.n(r),o=n(645),i=n.n(o)()(a());i.push([t.id,"body {\n    background-color: lightgray;\n}\n\n.animate {\n    /* animation: 0.7s slide-in 0.7s 3 linear; */\n    animation-name: slide-in;\n    animation-duration: 0.3s;\n    animation-iteration-count: 3;\n}\n  \n@keyframes slide-in {\n    0% {\n        transform: scale(0.25);\n        transform: translateY(-1000px);\n    }\n    80%{\n        transform: scale(0.25);\n    }\n    100% {\n        transform: translateY(0);\n        transform: scale(1);\n    }\n}\n\nth, td{\n    margin: 0;\n    padding: 0;\n    height: 32px;\n    width: 32px;\n}\n\ntd {\n    border: 1px solid black;\n}\n\ndiv.hit, div.ship {\n    margin: 0;\n    padding: 0;\n    \n    height: 100%;\n    width: 100%;\n}\n\ndiv.ship {\n    background-color: blue;\n}\n\ndiv.hit {\n    background-color: red;\n}\n\ndiv.hit.ship {\n    border: 5px solid blue;\n    box-sizing: border-box;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,2BAA2B;AAC/B;;AAEA;IACI,4CAA4C;IAC5C,wBAAwB;IACxB,wBAAwB;IACxB,4BAA4B;AAChC;;AAEA;IACI;QACI,sBAAsB;QACtB,8BAA8B;IAClC;IACA;QACI,sBAAsB;IAC1B;IACA;QACI,wBAAwB;QACxB,mBAAmB;IACvB;AACJ;;AAEA;IACI,SAAS;IACT,UAAU;IACV,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,SAAS;IACT,UAAU;;IAEV,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,sBAAsB;IACtB,sBAAsB;AAC1B",sourcesContent:["body {\n    background-color: lightgray;\n}\n\n.animate {\n    /* animation: 0.7s slide-in 0.7s 3 linear; */\n    animation-name: slide-in;\n    animation-duration: 0.3s;\n    animation-iteration-count: 3;\n}\n  \n@keyframes slide-in {\n    0% {\n        transform: scale(0.25);\n        transform: translateY(-1000px);\n    }\n    80%{\n        transform: scale(0.25);\n    }\n    100% {\n        transform: translateY(0);\n        transform: scale(1);\n    }\n}\n\nth, td{\n    margin: 0;\n    padding: 0;\n    height: 32px;\n    width: 32px;\n}\n\ntd {\n    border: 1px solid black;\n}\n\ndiv.hit, div.ship {\n    margin: 0;\n    padding: 0;\n    \n    height: 100%;\n    width: 100%;\n}\n\ndiv.ship {\n    background-color: blue;\n}\n\ndiv.hit {\n    background-color: red;\n}\n\ndiv.hit.ship {\n    border: 5px solid blue;\n    box-sizing: border-box;\n}"],sourceRoot:""}]);const s=i},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,a,o){"string"==typeof t&&(t=[[null,t,void 0]]);var i={};if(r)for(var s=0;s<this.length;s++){var d=this[s][0];null!=d&&(i[d]=!0)}for(var c=0;c<t.length;c++){var l=[].concat(t[c]);r&&i[l[0]]||(void 0!==o&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=o),n&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=n):l[2]=n),a&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=a):l[4]="".concat(a)),e.push(l))}},e}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),a="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),o="/*# ".concat(a," */");return[e].concat([o]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var o={},i=[],s=0;s<t.length;s++){var d=t[s],c=r.base?d[0]+r.base:d[0],l=o[c]||0,p="".concat(c," ").concat(l);o[c]=l+1;var u=n(p),h={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==u)e[u].references++,e[u].updater(h);else{var m=a(h,r);r.byIndex=s,e.splice(s,0,{identifier:p,updater:m,references:1})}i.push(p)}return i}function a(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,a){var o=r(t=t||[],a=a||{});return function(t){t=t||[];for(var i=0;i<o.length;i++){var s=n(o[i]);e[s].references--}for(var d=r(t,a),c=0;c<o.length;c++){var l=n(o[c]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}o=d}}},569:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var a=void 0!==n.layer;a&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,a&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var o=n.sourceMap;o&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(r){var a=e[r];if(void 0!==a)return a.exports;var o=e[r]={id:r,exports:{}};return t[r](o,o.exports,n),o.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nc=void 0,(()=>{const t=document.querySelector("#content"),e=document.createElement("footer");t.appendChild(e);const r=(t,e)=>{let n=document.createElement("td");return n.classList.add("playerGrid"),n.dataset.row=t,n.dataset.col=e,n},a=t=>{let e=document.createElement("th");return e.textContent=t,e},o=t=>{let e=document.createElement("tr");e.dataset.row=t,e.appendChild(a(t));for(let n=0;n<10;n++)e.appendChild(r(t,n));return e},i=()=>{const t=document.createElement("table");t.appendChild((()=>{let t=document.createElement("tr");return t.appendChild(a("")),t.appendChild(a("A")),t.appendChild(a("B")),t.appendChild(a("C")),t.appendChild(a("D")),t.appendChild(a("E")),t.appendChild(a("F")),t.appendChild(a("G")),t.appendChild(a("H")),t.appendChild(a("I")),t.appendChild(a("J")),t})());for(let e=0;e<10;e++)t.appendChild(o(e));return t},s=()=>{let t,e,n;return{setUpView:(r,a)=>{const o=document.querySelector("#content");(t=>{let e=document.createElement("header"),n=document.createElement("h1");n.textContent="Battleship",e.appendChild(n),t.appendChild(e)})(o),((e,n,r)=>{const a=document.createElement("main");e.appendChild(a);const o=document.createElement("div");o.classList.add("leftContainer");const s=document.createElement("div");s.classList.add("rightContainer"),a.appendChild(o),a.appendChild(s);const d=document.createElement("div");d.textContent="Your grid.",t=i(),o.appendChild(d),o.appendChild(t),((t,e)=>{for(let n=0;n<10;n++)for(let r=0;r<10;r++)if(t[n][r]){let t=e.children[n+1].children[r+1],a=document.createElement("div");a.classList.add("ship"),t.appendChild(a)}})(n.getShipGrid(),t);const c=document.createElement("div");c.textContent="Opponent's grid.",s.appendChild(c),s.appendChild((t=>{let e=i();for(let n=0;n<10;n++)for(let r=0;r<10;r++)e.children[n+1].children[r+1].onclick=e=>{t(n,r,e)};return e})(r))})(o,r,a),(t=>{const e=document.createElement("div");e.classList.add("buttonContainer"),e.appendChild((()=>{const t=document.createElement("div");t.classList.add("dropDownContainer");const e=document.createElement("label");e.for="ship-selector",e.textContent="Chose a ship";const n=document.createElement("select");n.name="ship-selector",n.id="ship-selector";for(let t=1;t<=10;t++){const e=document.createElement("option");e.value=`Ship${t}`,e.textContent=`Ship ${t}`,n.appendChild(e)}return t.appendChild(e),t.appendChild(n),t})()),e.appendChild((()=>{const t=document.createElement("div");t.classList.add("buttonsContainer");const e=document.createElement("button");e.textContent="Up",e.classList.add("up");const n=document.createElement("button");n.textContent="Left",n.classList.add("left");const r=document.createElement("button");r.textContent="Down",r.classList.add("down");const a=document.createElement("button");a.textContent="Right",a.classList.add("right");const o=document.createElement("button");o.textContent="Rotate",o.classList.add("rotate");const i=document.createElement("button");return i.textContent="Start",i.classList.add("start"),t.appendChild(e),t.appendChild(n),t.appendChild(r),t.appendChild(a),t.appendChild(o),t.appendChild(i),t})()),e.appendChild((()=>{const t=document.createElement("div");t.classList.add("errorContainer");const e=document.createElement("p");return e.classList.add("errorText"),e.textContent="Error goes here, otherwise blank",t.appendChild(e),t})()),t.appendChild(e)})(o),(t=>{const r=document.createElement("p");r.classList.add("msgDisplay"),r.classList.add("container"),e=document.createElement("p"),e.classList.add("msgOne"),e.textContent="Begin the game by clicking on the right board to select coordinates to fire at",n=document.createElement("p"),n.classList.add("msgTwo"),n.textContent="Have fun!",t.appendChild(r),r.appendChild(e),r.appendChild(n)})(o)},markComputerAttack:(e,n)=>{let r=((e,n)=>t.children[e+1].children[n+1])(e,n);if(r.firstChild)r.firstChild.classList.add("hit"),r.firstChild.classList.add("animate");else{let t=document.createElement("div");t.classList.add("hit"),t.classList.add("animate"),r.appendChild(t)}},updateMsgOne:(t,n,r)=>{let a;"miss"===r?a=`You fire at (${t}, ${n}) but hit nothing.`:"hit"===r?a=`You fire at (${t}, ${n}) and score a hit.`:"sunk"===r?a=`You fire at (${t}, ${n}), score a hit, and sink a ship.`:"loss"===r&&(a="Your opponent has sunk all your ships. You lose the match."),e.textContent=a},updateMsgTwo:(t,e,r)=>{let a;"miss"===r?a=`Your opponent fires at (${t}, ${e}) but hits nothing.`:"hit"===r?a=`Your opponent fires at (${t}, ${e}) and scores a hit.`:"sunk"===r?a=`Your opponent fires at (${t}, ${e}), scores a hit, and sinks a ship.`:"win"===r&&(a="You have sunk all your opponent's ships and won!"),n.textContent=a}}},d=(t,e="noID",n="south")=>{const r=e,a=t,o=n;let i=0,s=!1;return{getHitsSustained:()=>i,hit:()=>{i++,i===a&&(s=!0)},isSunk:()=>s,getLength:()=>a,getDirection:()=>o,getID:()=>r}},c=()=>{const t=Array(10).fill().map((()=>Array(10).fill(null))),e=[];let n="";const r=(t,e)=>t>=0&&t<10&&e>=0&&e<10,a=(n,a,o)=>{if(!((e,n,a)=>{let o="south"===e.getDirection()?1:0,i="east"===e.getDirection()?1:0;for(let s=0;s<e.getLength();s++){if(!r(n,a))return!1;if(null!=t[n][a])return!1;n+=o,a+=i}return!0})(n,a,o))throw new Error(`Failed to place ship ${n.getID()} at row: ${a}, col: ${o}`);e.push(n);let i="south"===n.getDirection()?1:0,s="east"===n.getDirection()?1:0;for(let e=0;e<n.getLength();e++)t[a][o]=n,a+=i,o+=s};return{placeShip:a,receiveAttack:(e,r)=>{n="",t[e][r]?(t[e][r].hit(),n="hit",t[e][r].isSunk()&&(n="sunk")):n="miss"},getOutcome:()=>n,isDefeated:()=>{for(let t of e)if(!t.isSunk())return!1;return!0},initDefaultShips:()=>{let t=d(4,"a","east");a(t,0,4),e.push(t);let n=d(2,"b","south");a(n,0,9),e.push(n);let r=d(2,"c","east");a(r,2,0),e.push(r);let o=d(3,"d","south");a(o,3,4),e.push(o);let i=d(1,"e","south");a(i,3,6),e.push(i);let s=d(3,"f","south");a(s,4,9),e.push(s);let c=d(2,"g","east");a(c,5,0),e.push(c);let l=d(1,"h");a(l,8,0),e.push(l);let p=d(1,"i");a(p,9,5),e.push(p);let u=d(1,"j");a(u,9,9),e.push(u)},getShipGrid:()=>t,isShipPresentAt:(e,n)=>null!=t[e][n]}},l=()=>{const t=Array(10).fill().map((()=>Array(10).fill(null)));return{isValidAttack:(e,n)=>((t,e)=>t>=0&&t<10&&e>=0&&e<10)(e,n)&&null===t[e][n],recordAttack:(e,n)=>{t[e][n]="hit"}}};var p=n(379),u=n.n(p),h=n(795),m=n.n(h),A=n(569),C=n.n(A),f=n(565),g=n.n(f),v=n(216),b=n.n(v),y=n(589),E=n.n(y),k=n(426),w={};w.styleTagTransform=E(),w.setAttributes=g(),w.insert=C().bind(null,"head"),w.domAPI=m(),w.insertStyleElement=b(),u()(k.Z,w),k.Z&&k.Z.locals&&k.Z.locals,(()=>{let t=(()=>{const t=c(),e=c(),n=l(),r=l();let a="",o="";t.initDefaultShips(),e.initDefaultShips();const i=(t=>{let e=()=>Math.floor(10*Math.random());return{pickTargetSimple:()=>{let n=e(),r=e();for(;!t.isValidAttack(n,r);)console.log(`(${n}, ${r}) is invalid. Rerolling`),n=e(),r=e();return console.log(`AI final target (${n}, ${r})`),{row:n,col:r}}}})(r);return{getShipGrid:()=>t.getShipGrid(),processUserInput:(t,r)=>{n.isValidAttack(t,r)&&(e.receiveAttack(t,r),a=e.getOutcome(),n.recordAttack(t,r))},isAttackableByPlayer:(t,e)=>n.isValidAttack(t,e),winCheckPlayer:()=>e.isDefeated(),winCheckComputer:()=>t.isDefeated(),isShipPresentAt:(n,r,a)=>("computer"===a?e:t).isShipPresentAt(n,r),processComputerAttack:()=>{let e=i.pickTargetSimple();if(r.isValidAttack(e.row,e.col))return t.receiveAttack(e.row,e.col),o=t.getOutcome(),r.recordAttack(e.row,e.col),e;console.log("game master: processComputerAttackError")},getPlayerTurnResult:()=>a,getComputerTurnResult:()=>o}})(),e=s();const n=(n,r,a)=>{if(!t.isAttackableByPlayer(n,r))return;if(((t,e)=>{console.log(t.target);let n=document.createElement("div");n.classList.add("hit"),n.classList.add("animate"),e&&n.classList.add("ship"),t.target.appendChild(n)})(a,t.isShipPresentAt(a.target.dataset.row,a.target.dataset.col,"computer")),t.processUserInput(n,r),e.updateMsgOne(n,r,t.getPlayerTurnResult()),t.winCheckPlayer())return console.log("player wins"),void e.updateMsgTwo(0,0,"win");let o=t.processComputerAttack();e.markComputerAttack(o.row,o.col),console.log(`Your opponent fires at (${o.row}, ${o.col}) and ${t.getComputerTurnResult()}`),e.updateMsgTwo(o.row,o.col,t.getComputerTurnResult()),t.winCheckComputer()&&(console.log("computer wins"),e.updateMsgTwo(0,0,"loss"))};return{initiate:()=>{e.setUpView(t,n)},processUserInput:n,getShipGrid:()=>t.getShipGrid()}})().initiate()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,