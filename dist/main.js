(()=>{"use strict";var t={426:(t,e,n)=>{n.d(e,{Z:()=>a});var r=n(537),o=n.n(r),i=n(645),s=n.n(i)()(o());s.push([t.id,"body {\n    background-color: lightgray;\n}\n\n.animate {\n    /* animation: 0.7s slide-in 0.7s 3 linear; */\n    animation-name: slide-in;\n    animation-duration: 0.3s;\n    animation-iteration-count: 3;\n}\n  \n@keyframes slide-in {\n    0% {\n        transform: scale(0.25);\n        transform: translateY(-1000px);\n    }\n    80%{\n        transform: scale(0.25);\n    }\n    100% {\n        transform: translateY(0);\n        transform: scale(1);\n    }\n}\n\nth, td{\n    margin: 0;\n    padding: 0;\n    height: 32px;\n    width: 32px;\n}\n\ntd {\n    border: 1px solid black;\n}\n\ndiv.hit, div.ship {\n    margin: 0;\n    padding: 0;\n    \n    height: 100%;\n    width: 100%;\n}\n\ndiv.ship {\n    background-color: blue;\n}\n\ndiv.hit {\n    background-color: red;\n}\n\ndiv.hit.ship {\n    border: 5px solid blue;\n}\n\ntd.ship {\n    background-color: blue;\n}\n\ntd.miss, td.hit {\n    background-color: red;\n}\n\ntd.hit {\n    border: 5px solid blue;\n    box-sizing: border-box;\n}\n\ntd.selected {\n    background-color: pink;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,2BAA2B;AAC/B;;AAEA;IACI,4CAA4C;IAC5C,wBAAwB;IACxB,wBAAwB;IACxB,4BAA4B;AAChC;;AAEA;IACI;QACI,sBAAsB;QACtB,8BAA8B;IAClC;IACA;QACI,sBAAsB;IAC1B;IACA;QACI,wBAAwB;QACxB,mBAAmB;IACvB;AACJ;;AAEA;IACI,SAAS;IACT,UAAU;IACV,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,uBAAuB;AAC3B;;AAEA;IACI,SAAS;IACT,UAAU;;IAEV,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,sBAAsB;AAC1B;;AAEA;IACI,qBAAqB;AACzB;;AAEA;IACI,sBAAsB;IACtB,sBAAsB;AAC1B;;AAEA;IACI,sBAAsB;AAC1B",sourcesContent:["body {\n    background-color: lightgray;\n}\n\n.animate {\n    /* animation: 0.7s slide-in 0.7s 3 linear; */\n    animation-name: slide-in;\n    animation-duration: 0.3s;\n    animation-iteration-count: 3;\n}\n  \n@keyframes slide-in {\n    0% {\n        transform: scale(0.25);\n        transform: translateY(-1000px);\n    }\n    80%{\n        transform: scale(0.25);\n    }\n    100% {\n        transform: translateY(0);\n        transform: scale(1);\n    }\n}\n\nth, td{\n    margin: 0;\n    padding: 0;\n    height: 32px;\n    width: 32px;\n}\n\ntd {\n    border: 1px solid black;\n}\n\ndiv.hit, div.ship {\n    margin: 0;\n    padding: 0;\n    \n    height: 100%;\n    width: 100%;\n}\n\ndiv.ship {\n    background-color: blue;\n}\n\ndiv.hit {\n    background-color: red;\n}\n\ndiv.hit.ship {\n    border: 5px solid blue;\n}\n\ntd.ship {\n    background-color: blue;\n}\n\ntd.miss, td.hit {\n    background-color: red;\n}\n\ntd.hit {\n    border: 5px solid blue;\n    box-sizing: border-box;\n}\n\ntd.selected {\n    background-color: pink;\n}"],sourceRoot:""}]);const a=s},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,o,i){"string"==typeof t&&(t=[[null,t,void 0]]);var s={};if(r)for(var a=0;a<this.length;a++){var c=this[a][0];null!=c&&(s[c]=!0)}for(var l=0;l<t.length;l++){var u=[].concat(t[l]);r&&s[u[0]]||(void 0!==i&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=i),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),o&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=o):u[4]="".concat(o)),e.push(u))}},e}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var i={},s=[],a=0;a<t.length;a++){var c=t[a],l=r.base?c[0]+r.base:c[0],u=i[l]||0,d="".concat(l," ").concat(u);i[l]=u+1;var p=n(d),A={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==p)e[p].references++,e[p].updater(A);else{var h=o(A,r);r.byIndex=a,e.splice(a,0,{identifier:d,updater:h,references:1})}s.push(d)}return s}function o(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,o){var i=r(t=t||[],o=o||{});return function(t){t=t||[];for(var s=0;s<i.length;s++){var a=n(i[s]);e[a].references--}for(var c=r(t,o),l=0;l<i.length;l++){var u=n(i[l]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}i=c}}},569:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return t[r](i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),n.nc=void 0,(()=>{const t=(t,e="noID",n="south")=>{const r=e,o=t,i=n;let s=0,a=!1;return{getHitsSustained:()=>s,hit:()=>{s++,s===o&&(a=!0)},isSunk:()=>a,getLength:()=>o,getDirection:()=>i,getID:()=>r}},e=()=>{const e=Array(10).fill().map((()=>Array(10).fill(null))),n=[],r={};let o="";const i=(t,e)=>t>=0&&t<10&&e>=0&&e<10,s=(t,o,s)=>{if(!((t,n,r)=>{let o="south"===t.getDirection()?1:0,s="east"===t.getDirection()?1:0;for(let a=0;a<t.getLength();a++){if(!i(n,r))return!1;if(null!=e[n][r])return!1;n+=o,r+=s}return!0})(t,o,s))throw new Error(`Failed to place ship ${t.getID()} at row: ${o}, col: ${s}`);n.push(t),r[t.getID()]=[];let a="south"===t.getDirection()?1:0,c="east"===t.getDirection()?1:0;for(let n=0;n<t.getLength();n++)e[o][s]=t,r[t.getID()].push({row:o,col:s}),o+=a,s+=c;console.log(r[t.getID()])};return{placeShip:s,getShipLocation:t=>r[t],receiveAttack:(t,n)=>{o="",e[t][n]?(e[t][n].hit(),o="hit",e[t][n].isSunk()&&(o="sunk")):o="miss"},getOutcome:()=>o,isDefeated:()=>{for(let t of n)if(!t.isSunk())return!1;return!0},initDefaultShips:()=>{let e=t(4,"1","east");s(e,0,4),n.push(e);let r=t(2,"2","south");s(r,0,9),n.push(r);let o=t(2,"3","east");s(o,2,0),n.push(o);let i=t(3,"4","south");s(i,3,4),n.push(i);let a=t(1,"5","south");s(a,3,6),n.push(a);let c=t(3,"6","south");s(c,4,9),n.push(c);let l=t(2,"7","east");s(l,5,0),n.push(l);let u=t(1,"8");s(u,8,0),n.push(u);let d=t(1,"9");s(d,9,5),n.push(d);let p=t(1,"10");s(p,9,9),n.push(p)},getShipGrid:()=>e,isShipPresentAt:(t,n)=>null!=e[t][n]}},r=()=>{const t=Array(10).fill().map((()=>Array(10).fill(null)));return{isValidAttack:(e,n)=>((t,e)=>t>=0&&t<10&&e>=0&&e<10)(e,n)&&null===t[e][n],recordAttack:(e,n)=>{t[e][n]="hit"}}};var o=n(379),i=n.n(o),s=n(795),a=n.n(s),c=n(569),l=n.n(c),u=n(565),d=n.n(u),p=n(216),A=n.n(p),h=n(589),f=n.n(h),g=n(426),m={};m.styleTagTransform=f(),m.setAttributes=d(),m.insert=l().bind(null,"head"),m.domAPI=a(),m.insertStyleElement=A(),i()(g.Z,m),g.Z&&g.Z.locals&&g.Z.locals,(()=>{let t=(()=>{const t=e(),n=e(),o=r(),i=r();let s="",a="";t.initDefaultShips(),n.initDefaultShips();const c=(t=>{let e=()=>Math.floor(10*Math.random());return{pickTargetSimple:()=>{let n=e(),r=e();for(;!t.isValidAttack(n,r);)console.log(`(${n}, ${r}) is invalid. Rerolling`),n=e(),r=e();return console.log(`AI final target (${n}, ${r})`),{row:n,col:r}}}})(i);return{getShipGrid:()=>t.getShipGrid(),getShipGridWrapper:()=>t,processUserInput:(t,e)=>{o.isValidAttack(t,e)&&(n.receiveAttack(t,e),s=n.getOutcome(),o.recordAttack(t,e))},isAttackableByPlayer:(t,e)=>o.isValidAttack(t,e),winCheckPlayer:()=>n.isDefeated(),winCheckComputer:()=>t.isDefeated(),isShipPresentAt:(e,r,o)=>("computer"===o?n:t).isShipPresentAt(e,r),processComputerAttack:()=>{let e=c.pickTargetSimple();if(i.isValidAttack(e.row,e.col))return t.receiveAttack(e.row,e.col),a=t.getOutcome(),i.recordAttack(e.row,e.col),e;console.log("game master: processComputerAttackError")},getPlayerTurnResult:()=>s,getComputerTurnResult:()=>a}})(),n=(()=>{let t,e,n,r,o,i;const s=t=>{o.onchange=e=>{let n=o.value,r=t.getShipLocation(n);for(let t of r){console.log("coords:"),console.log(t);let e=c(t.row,t.col);console.log("myTD"),console.log(e),e.classList.add("selected")}}},a=(e,n)=>{document.querySelector("#content"),((e,n,r)=>{((t,e)=>{for(let n=0;n<10;n++)for(let r=0;r<10;r++)t[n][r]&&e.children[n+1].children[r+1].classList.add("ship")})(n.getShipGrid(),t)})(0,e)},c=(e,n)=>t.children[e+1].children[n+1];return{setUp:(c,l)=>{t=document.querySelector(".shipGrid"),e=document.querySelector(".attackGrid"),n=document.querySelector(".msgOne"),r=document.querySelector(".msgTwo"),o=document.querySelector("#ship-selector"),s(),((t,n)=>{((t,e)=>{for(let n=0;n<10;n++)for(let r=0;r<10;r++)t.children[n+1].children[r+1].onclick=t=>{e(n,r,t)}})(e,t),s(n)})(l,c.getShipGridWrapper()),(t=>{i=t})(c),a(c)},setUpView:a,markComputerAttack:(t,e)=>{let n=c(t,e);i.isShipPresentAt(t,e,"player")?n.classList.add("hit"):n.classList.add("miss"),n.classList.add("animate")},updateMsgOne:(t,e,r)=>{let o;"miss"===r?o=`You fire at (${t}, ${e}) but hit nothing.`:"hit"===r?o=`You fire at (${t}, ${e}) and score a hit.`:"sunk"===r?o=`You fire at (${t}, ${e}), score a hit, and sink a ship.`:"loss"===r&&(o="Your opponent has sunk all your ships. You lose the match."),n.textContent=o},updateMsgTwo:(t,e,n)=>{let o;"miss"===n?o=`Your opponent fires at (${t}, ${e}) but hits nothing.`:"hit"===n?o=`Your opponent fires at (${t}, ${e}) and scores a hit.`:"sunk"===n?o=`Your opponent fires at (${t}, ${e}), scores a hit, and sinks a ship.`:"win"===n&&(o="You have sunk all your opponent's ships and won!"),r.textContent=o}}})();const o=(e,r,o)=>{if(!t.isAttackableByPlayer(e,r))return;if(((t,e)=>{console.log(t.target);let n=t.target;n.classList.add("animate"),e?n.classList.add("hit"):n.classList.add("miss")})(o,t.isShipPresentAt(o.target.dataset.row,o.target.dataset.col,"computer")),t.processUserInput(e,r),n.updateMsgOne(e,r,t.getPlayerTurnResult()),t.winCheckPlayer())return console.log("player wins"),void n.updateMsgTwo(0,0,"win");let i=t.processComputerAttack();n.markComputerAttack(i.row,i.col),console.log(`Your opponent fires at (${i.row}, ${i.col}) and ${t.getComputerTurnResult()}`),n.updateMsgTwo(i.row,i.col,t.getComputerTurnResult()),t.winCheckComputer()&&(console.log("computer wins"),n.updateMsgTwo(0,0,"loss"))};return{initiate:()=>{n.setUp(t,o)},processUserInput:o,getShipGrid:()=>t.getShipGrid()}})().initiate()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,